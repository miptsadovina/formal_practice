        -:    0:Source:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/src/CYK_algorithm.cpp
        -:    0:Graph:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/CMakeFiles/unit_tests.dir/src/CYK_algorithm.cpp.gcno
        -:    0:Data:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/CMakeFiles/unit_tests.dir/src/CYK_algorithm.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "CYK_algorithm.h"
        -:    2:
function _ZN3CYK13CYK_algorithmERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE called 5 returned 0% blocks executed 90%
        5:    3:void CYK::CYK_algorithm(const std::string &word) {
        5:    3-block  0
        5:    4:    g.to_CNF();
        5:    5:    int n = word.size();
        5:    6:    std::map<int, std::vector<std::vector<bool>>> dp;
       44:    7:    for(auto nonterm: g.nonterminals) {
        5:    7-block  0
       44:    7-block  1
branch  0 taken 44
branch  1 taken 0
       44:    7-block  2
branch  2 taken 39
branch  3 taken 5
       39:    7-block  3
branch  4 taken 39
branch  5 taken 0
       39:    7-block  4
       39:    7-block  5
branch  6 taken 39
branch  7 taken 0
       39:    7-block  6
       39:    8:        dp[nonterm] = std::vector<std::vector<bool>>(n, std::vector<bool>(n, false));
       39:    8-block  0
branch  0 taken 39
branch  1 taken 0
       39:    8-block  1
branch  2 taken 39
branch  3 taken 0
       39:    8-block  2
branch  4 taken 39
branch  5 taken 0
    $$$$$:    8-block  3
    $$$$$:    8-block  4
      329:    9:        for(int i = 0; i < n; ++i) {
       39:    9-block  0
      329:    9-block  1
branch  0 taken 290
branch  1 taken 39
      290:    9-block  2
      290:   10:            if(g.transitions[nonterm].contains({word[i]})) {
      290:   10-block  0
branch  0 taken 290
branch  1 taken 0
      290:   10-block  1
branch  2 taken 290
branch  3 taken 0
      290:   10-block  2
branch  4 taken 290
branch  5 taken 0
      290:   10-block  3
branch  6 taken 111
branch  7 taken 179
    $$$$$:   10-block  4
      111:   11:                dp[nonterm][i][i] = true;
      111:   11-block  0
branch  0 taken 111
branch  1 taken 0
      111:   11-block  1
branch  2 taken 111
branch  3 taken 0
      111:   12:            } else {
      111:   12-block  0
      179:   13:                dp[nonterm][i][i] = false;
      179:   13-block  0
branch  0 taken 179
branch  1 taken 0
      179:   13-block  1
branch  2 taken 179
branch  3 taken 0
      179:   13-block  2
        -:   14:            }
      290:   15:        }
      290:   15-block  0
        -:   16:    }
       38:   17:    for(int delta = 1; delta < n; ++delta) {
        5:   17-block  0
       38:   17-block  1
branch  0 taken 33
branch  1 taken 5
       33:   17-block  2
      173:   18:        for (int i = 0; i + delta < n; ++i) {
       33:   18-block  0
      173:   18-block  1
branch  0 taken 140
branch  1 taken 33
      140:   18-block  2
      140:   19:            int j = i + delta;
     1180:   20:            for (auto nonterm: g.nonterminals) {
      140:   20-block  0
     1180:   20-block  1
branch  0 taken 1180
branch  1 taken 0
     1180:   20-block  2
branch  2 taken 1040
branch  3 taken 140
     1040:   20-block  3
branch  4 taken 1040
branch  5 taken 0
     1040:   20-block  4
     1040:   20-block  5
branch  6 taken 1040
branch  7 taken 0
     1040:   20-block  6
     2680:   21:                for (auto &right_word: g.transitions[nonterm]) {
     1040:   21-block  0
branch  0 taken 1040
branch  1 taken 0
     1040:   21-block  1
     2680:   21-block  2
branch  2 taken 2680
branch  3 taken 0
     2680:   21-block  3
branch  4 taken 1640
branch  5 taken 1040
     1640:   21-block  4
branch  6 taken 1640
branch  7 taken 0
      715:   21-block  5
     1640:   21-block  6
branch  8 taken 1640
branch  9 taken 0
     1640:   21-block  7
     1640:   22:                    if (right_word.size() != 2) {
     1640:   22-block  0
branch  0 taken 925
branch  1 taken 715
      925:   23:                        continue;
      925:   23-block  0
        -:   24:                    }
     3125:   25:                    for (int k = i; k < j; ++k) {
      715:   25-block  0
     3125:   25-block  1
branch  0 taken 2410
branch  1 taken 715
     2410:   25-block  2
     2410:   26:                        bool help = (dp[right_word[0]][i][k] && dp[right_word[1]][k + 1][j]);
     2410:   26-block  0
branch  0 taken 2410
branch  1 taken 0
     2410:   26-block  1
branch  2 taken 2410
branch  3 taken 0
     2410:   26-block  2
branch  4 taken 449
branch  5 taken 1961
      449:   26-block  3
branch  6 taken 449
branch  7 taken 0
      449:   26-block  4
branch  8 taken 449
branch  9 taken 0
      449:   26-block  5
     2410:   27:                        dp[nonterm][i][j] = dp[nonterm][i][j] || help;
     2410:   27-block  0
branch  0 taken 2410
branch  1 taken 0
     2410:   27-block  1
branch  2 taken 2410
branch  3 taken 0
     2410:   27-block  2
branch  4 taken 36
branch  5 taken 2374
     2374:   27-block  3
     2410:   27-block  4
branch  6 taken 2410
branch  7 taken 0
     2410:   27-block  5
branch  8 taken 2410
branch  9 taken 0
     2410:   28:                    }
     2410:   28-block  0
        -:   29:                }
        -:   30:            }
      140:   31:        }
      140:   31-block  0
       33:   32:    }
       33:   32-block  0
        5:   33:    std::cout << dp[g.start][0][n - 1];
        5:   33-block  0
branch  0 taken 5
branch  1 taken 0
        5:   33-block  1
branch  2 taken 5
branch  3 taken 0
        5:   33-block  2
branch  4 taken 5
branch  5 taken 0
        5:   34:}
    $$$$$:   34-block  0
    $$$$$:   34-block  1
        5:   34-block  2
    $$$$$:   34-block  3
    $$$$$:   34-block  4
