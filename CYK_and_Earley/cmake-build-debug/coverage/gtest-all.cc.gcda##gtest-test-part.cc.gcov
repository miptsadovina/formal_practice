        -:    0:Source:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/_deps/googletest-src/googletest/src/gtest-test-part.cc
        -:    0:Graph:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest-test-part.h"
        -:   34:
        -:   35:#include "gtest/internal/gtest-port.h"
        -:   36:#include "src/gtest-internal-inl.h"
        -:   37:
        -:   38:namespace testing {
        -:   39:
        -:   40:using internal::GetUnitTestImpl;
        -:   41:
        -:   42:// Gets the summary of the failure message by omitting the stack trace
        -:   43:// in it.
function _ZN7testing14TestPartResult14ExtractSummaryEPKc called 0 returned 0% blocks executed 0%
    #####:   44:std::string TestPartResult::ExtractSummary(const char* message) {
    $$$$$:   44-block  0
    #####:   45:  const char* const stack_trace = strstr(message, internal::kStackTraceMarker);
    #####:   46:  return stack_trace == nullptr ? message : std::string(message, stack_trace);
    $$$$$:   46-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   46-block  1
    $$$$$:   46-block  2
    $$$$$:   46-block  3
        -:   47:}
        -:   48:
        -:   49:// Prints a TestPartResult object.
function _ZN7testinglsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   50:std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {
    $$$$$:   50-block  0
    #####:   51:  return os << internal::FormatFileLocation(result.file_name(),
    $$$$$:   51-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   51-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   51-block  2
    $$$$$:   51-block  3
    $$$$$:   51-block  4
    #####:   52:                                            result.line_number())
    #####:   53:            << " "
    $$$$$:   53-block  0
branch  0 never executed
branch  1 never executed
    #####:   54:            << (result.type() == TestPartResult::kSuccess ? "Success"
    $$$$$:   54-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   54-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   54-block  2
    $$$$$:   54-block  3
    $$$$$:   54-block  4
branch  4 never executed
branch  5 never executed
    #####:   55:                : result.type() == TestPartResult::kSkip  ? "Skipped"
    $$$$$:   55-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   55-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   55-block  2
    $$$$$:   55-block  3
    #####:   56:                : result.type() == TestPartResult::kFatalFailure
    $$$$$:   56-block  0
branch  0 never executed
branch  1 never executed
        -:   57:                    ? "Fatal failure"
        -:   58:                    : "Non-fatal failure")
    #####:   59:            << ":\n"
    $$$$$:   59-block  0
branch  0 never executed
branch  1 never executed
    #####:   60:            << result.message() << std::endl;
    $$$$$:   60-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   60-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   60-block  2
branch  4 never executed
branch  5 never executed
    #####:   61:}
        -:   62:
        -:   63:// Appends a TestPartResult to the array.
function _ZN7testing19TestPartResultArray6AppendERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   64:void TestPartResultArray::Append(const TestPartResult& result) {
    $$$$$:   64-block  0
    #####:   65:  array_.push_back(result);
    #####:   66:}
    $$$$$:   66-block  0
        -:   67:
        -:   68:// Returns the TestPartResult at the given index (0-based).
function _ZNK7testing19TestPartResultArray17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####:   69:const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {
    $$$$$:   69-block  0
    #####:   70:  if (index < 0 || index >= size()) {
    $$$$$:   70-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   70-block  1
branch  2 never executed
branch  3 never executed
    #####:   71:    printf("\nInvalid index (%d) into TestPartResultArray.\n", index);
    #####:   72:    internal::posix::Abort();
    $$$$$:   72-block  0
        -:   73:  }
        -:   74:
    #####:   75:  return array_[static_cast<size_t>(index)];
    $$$$$:   75-block  0
        -:   76:}
        -:   77:
        -:   78:// Returns the number of TestPartResult objects in the array.
function _ZNK7testing19TestPartResultArray4sizeEv called 0 returned 0% blocks executed 0%
    #####:   79:int TestPartResultArray::size() const {
    $$$$$:   79-block  0
    #####:   80:  return static_cast<int>(array_.size());
    $$$$$:   80-block  0
        -:   81:}
        -:   82:
        -:   83:namespace internal {
        -:   84:
function _ZN7testing8internal24HasNewFatalFailureHelperC2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal24HasNewFatalFailureHelperC1Ev called 0 returned 0% blocks executed 0%
    #####:   85:HasNewFatalFailureHelper::HasNewFatalFailureHelper()
    $$$$$:   85-block  0
    $$$$$:   85-block  1
    #####:   86:    : has_new_fatal_failure_(false),
    #####:   87:      original_reporter_(
    #####:   88:          GetUnitTestImpl()->GetTestPartResultReporterForCurrentThread()) {
    $$$$$:   88-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   88-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   88-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:   88-block  3
branch  6 never executed
branch  7 never executed
    #####:   89:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(this);
    $$$$$:   89-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   89-block  1
branch  2 never executed
branch  3 never executed
    #####:   90:}
    $$$$$:   90-block  0
    $$$$$:   90-block  1
    $$$$$:   90-block  2
    $$$$$:   90-block  3
        -:   91:
function _ZN7testing8internal24HasNewFatalFailureHelperD2Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal24HasNewFatalFailureHelperD1Ev called 0 returned 0% blocks executed 0%
function _ZN7testing8internal24HasNewFatalFailureHelperD0Ev called 0 returned 0% blocks executed 0%
    #####:   92:HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {
    $$$$$:   92-block  0
    $$$$$:   92-block  1
    $$$$$:   92-block  2
    #####:   93:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
    $$$$$:   93-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   93-block  1
branch  2 never executed
branch  3 never executed
    #####:   94:      original_reporter_);
    #####:   95:}
    $$$$$:   95-block  0
    $$$$$:   95-block  1
    $$$$$:   95-block  2
    $$$$$:   95-block  3
    $$$$$:   95-block  4
        -:   96:
function _ZN7testing8internal24HasNewFatalFailureHelper20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:   97:void HasNewFatalFailureHelper::ReportTestPartResult(
    $$$$$:   97-block  0
        -:   98:    const TestPartResult& result) {
    #####:   99:  if (result.fatally_failed()) has_new_fatal_failure_ = true;
    $$$$$:   99-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   99-block  1
    #####:  100:  original_reporter_->ReportTestPartResult(result);
    #####:  101:}
    $$$$$:  101-block  0
        -:  102:
        -:  103:}  // namespace internal
        -:  104:
        -:  105:}  // namespace testing
