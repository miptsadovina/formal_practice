        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX11.3.sdk/usr/include/c++/v1/iterator
        -:    0:Graph:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- iterator ----------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_ITERATOR
        -:   11:#define _LIBCPP_ITERATOR
        -:   12:
        -:   13:/*
        -:   14:    iterator synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:template<class Iterator>
        -:   20:struct iterator_traits
        -:   21:{
        -:   22:    typedef typename Iterator::difference_type difference_type;
        -:   23:    typedef typename Iterator::value_type value_type;
        -:   24:    typedef typename Iterator::pointer pointer;
        -:   25:    typedef typename Iterator::reference reference;
        -:   26:    typedef typename Iterator::iterator_category iterator_category;
        -:   27:};
        -:   28:
        -:   29:template<class T>
        -:   30:struct iterator_traits<T*>
        -:   31:{
        -:   32:    typedef ptrdiff_t difference_type;
        -:   33:    typedef T value_type;
        -:   34:    typedef T* pointer;
        -:   35:    typedef T& reference;
        -:   36:    typedef random_access_iterator_tag iterator_category;
        -:   37:};
        -:   38:
        -:   39:template<class Category, class T, class Distance = ptrdiff_t,
        -:   40:         class Pointer = T*, class Reference = T&>
        -:   41:struct iterator
        -:   42:{
        -:   43:    typedef T         value_type;
        -:   44:    typedef Distance  difference_type;
        -:   45:    typedef Pointer   pointer;
        -:   46:    typedef Reference reference;
        -:   47:    typedef Category  iterator_category;
        -:   48:};
        -:   49:
        -:   50:struct input_iterator_tag  {};
        -:   51:struct output_iterator_tag {};
        -:   52:struct forward_iterator_tag       : public input_iterator_tag         {};
        -:   53:struct bidirectional_iterator_tag : public forward_iterator_tag       {};
        -:   54:struct random_access_iterator_tag : public bidirectional_iterator_tag {};
        -:   55:
        -:   56:// 27.4.3, iterator operations
        -:   57:template <class InputIterator, class Distance>  // constexpr in C++17
        -:   58:  constexpr void advance(InputIterator& i, Distance n);
        -:   59:
        -:   60:template <class InputIterator>  // constexpr in C++17
        -:   61:  constexpr typename iterator_traits<InputIterator>::difference_type
        -:   62:    distance(InputIterator first, InputIterator last);
        -:   63:
        -:   64:template <class InputIterator>  // constexpr in C++17
        -:   65:  constexpr InputIterator next(InputIterator x,
        -:   66:typename iterator_traits<InputIterator>::difference_type n = 1);
        -:   67:
        -:   68:template <class BidirectionalIterator>  // constexpr in C++17
        -:   69:  constexpr BidirectionalIterator prev(BidirectionalIterator x,
        -:   70:    typename iterator_traits<BidirectionalIterator>::difference_type n = 1);
        -:   71:
        -:   72:template <class Iterator>
        -:   73:class reverse_iterator
        -:   74:    : public iterator<typename iterator_traits<Iterator>::iterator_category,
        -:   75:                      typename iterator_traits<Iterator>::value_type,
        -:   76:                      typename iterator_traits<Iterator>::difference_type,
        -:   77:                      typename iterator_traits<Iterator>::pointer,
        -:   78:                      typename iterator_traits<Iterator>::reference>
        -:   79:{
        -:   80:protected:
        -:   81:    Iterator current;
        -:   82:public:
        -:   83:    typedef Iterator                                            iterator_type;
        -:   84:    typedef typename iterator_traits<Iterator>::difference_type difference_type;
        -:   85:    typedef typename iterator_traits<Iterator>::reference       reference;
        -:   86:    typedef typename iterator_traits<Iterator>::pointer         pointer;
        -:   87:
        -:   88:    constexpr reverse_iterator();
        -:   89:    constexpr explicit reverse_iterator(Iterator x);
        -:   90:    template <class U> constexpr reverse_iterator(const reverse_iterator<U>& u);
        -:   91:    template <class U> constexpr reverse_iterator& operator=(const reverse_iterator<U>& u);
        -:   92:    constexpr Iterator base() const;
        -:   93:    constexpr reference operator*() const;
        -:   94:    constexpr pointer   operator->() const;
        -:   95:    constexpr reverse_iterator& operator++();
        -:   96:    constexpr reverse_iterator  operator++(int);
        -:   97:    constexpr reverse_iterator& operator--();
        -:   98:    constexpr reverse_iterator  operator--(int);
        -:   99:    constexpr reverse_iterator  operator+ (difference_type n) const;
        -:  100:    constexpr reverse_iterator& operator+=(difference_type n);
        -:  101:    constexpr reverse_iterator  operator- (difference_type n) const;
        -:  102:    constexpr reverse_iterator& operator-=(difference_type n);
        -:  103:    constexpr reference         operator[](difference_type n) const;
        -:  104:};
        -:  105:
        -:  106:template <class Iterator1, class Iterator2>
        -:  107:constexpr bool                          // constexpr in C++17
        -:  108:operator==(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  109:
        -:  110:template <class Iterator1, class Iterator2>
        -:  111:constexpr bool                          // constexpr in C++17
        -:  112:operator<(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  113:
        -:  114:template <class Iterator1, class Iterator2>
        -:  115:constexpr bool                          // constexpr in C++17
        -:  116:operator!=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  117:
        -:  118:template <class Iterator1, class Iterator2>
        -:  119:constexpr bool                          // constexpr in C++17
        -:  120:operator>(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  121:
        -:  122:template <class Iterator1, class Iterator2>
        -:  123:constexpr bool                          // constexpr in C++17
        -:  124:operator>=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  125:
        -:  126:template <class Iterator1, class Iterator2>
        -:  127:constexpr bool                          // constexpr in C++17
        -:  128:operator<=(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y);
        -:  129:
        -:  130:template <class Iterator1, class Iterator2>
        -:  131:constexpr auto
        -:  132:operator-(const reverse_iterator<Iterator1>& x, const reverse_iterator<Iterator2>& y)
        -:  133:-> decltype(__y.base() - __x.base());   // constexpr in C++17
        -:  134:
        -:  135:template <class Iterator>
        -:  136:constexpr reverse_iterator<Iterator>
        -:  137:operator+(typename reverse_iterator<Iterator>::difference_type n,
        -:  138:          const reverse_iterator<Iterator>& x);   // constexpr in C++17
        -:  139:
        -:  140:template <class Iterator>
        -:  141:constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i); // C++14, constexpr in C++17
        -:  142:
        -:  143:template <class Container>
        -:  144:class back_insert_iterator
        -:  145:{
        -:  146:protected:
        -:  147:    Container* container;
        -:  148:public:
        -:  149:    typedef Container                   container_type;
        -:  150:    typedef void                        value_type;
        -:  151:    typedef void                        difference_type;
        -:  152:    typedef void                        reference;
        -:  153:    typedef void                        pointer;
        -:  154:
        -:  155:    explicit back_insert_iterator(Container& x);
        -:  156:    back_insert_iterator& operator=(const typename Container::value_type& value);
        -:  157:    back_insert_iterator& operator*();
        -:  158:    back_insert_iterator& operator++();
        -:  159:    back_insert_iterator  operator++(int);
        -:  160:};
        -:  161:
        -:  162:template <class Container> back_insert_iterator<Container> back_inserter(Container& x);
        -:  163:
        -:  164:template <class Container>
        -:  165:class front_insert_iterator
        -:  166:{
        -:  167:protected:
        -:  168:    Container* container;
        -:  169:public:
        -:  170:    typedef Container                    container_type;
        -:  171:    typedef void                         value_type;
        -:  172:    typedef void                         difference_type;
        -:  173:    typedef void                         reference;
        -:  174:    typedef void                         pointer;
        -:  175:
        -:  176:    explicit front_insert_iterator(Container& x);
        -:  177:    front_insert_iterator& operator=(const typename Container::value_type& value);
        -:  178:    front_insert_iterator& operator*();
        -:  179:    front_insert_iterator& operator++();
        -:  180:    front_insert_iterator  operator++(int);
        -:  181:};
        -:  182:
        -:  183:template <class Container> front_insert_iterator<Container> front_inserter(Container& x);
        -:  184:
        -:  185:template <class Container>
        -:  186:class insert_iterator
        -:  187:{
        -:  188:protected:
        -:  189:    Container* container;
        -:  190:    typename Container::iterator iter;
        -:  191:public:
        -:  192:    typedef Container              container_type;
        -:  193:    typedef void                   value_type;
        -:  194:    typedef void                   difference_type;
        -:  195:    typedef void                   reference;
        -:  196:    typedef void                   pointer;
        -:  197:
        -:  198:    insert_iterator(Container& x, typename Container::iterator i);
        -:  199:    insert_iterator& operator=(const typename Container::value_type& value);
        -:  200:    insert_iterator& operator*();
        -:  201:    insert_iterator& operator++();
        -:  202:    insert_iterator& operator++(int);
        -:  203:};
        -:  204:
        -:  205:template <class Container, class Iterator>
        -:  206:insert_iterator<Container> inserter(Container& x, Iterator i);
        -:  207:
        -:  208:template <class Iterator>
        -:  209:class move_iterator {
        -:  210:public:
        -:  211:    typedef Iterator                                              iterator_type;
        -:  212:    typedef typename iterator_traits<Iterator>::difference_type   difference_type;
        -:  213:    typedef Iterator                                              pointer;
        -:  214:    typedef typename iterator_traits<Iterator>::value_type        value_type;
        -:  215:    typedef typename iterator_traits<Iterator>::iterator_category iterator_category;
        -:  216:    typedef value_type&&                                          reference;
        -:  217:
        -:  218:    constexpr move_iterator();  // all the constexprs are in C++17
        -:  219:    constexpr explicit move_iterator(Iterator i);
        -:  220:    template <class U>
        -:  221:      constexpr move_iterator(const move_iterator<U>& u);
        -:  222:    template <class U>
        -:  223:      constexpr move_iterator& operator=(const move_iterator<U>& u);
        -:  224:    constexpr iterator_type base() const;
        -:  225:    constexpr reference operator*() const;
        -:  226:    constexpr pointer operator->() const;
        -:  227:    constexpr move_iterator& operator++();
        -:  228:    constexpr move_iterator operator++(int);
        -:  229:    constexpr move_iterator& operator--();
        -:  230:    constexpr move_iterator operator--(int);
        -:  231:    constexpr move_iterator operator+(difference_type n) const;
        -:  232:    constexpr move_iterator& operator+=(difference_type n);
        -:  233:    constexpr move_iterator operator-(difference_type n) const;
        -:  234:    constexpr move_iterator& operator-=(difference_type n);
        -:  235:    constexpr unspecified operator[](difference_type n) const;
        -:  236:private:
        -:  237:    Iterator current; // exposition only
        -:  238:};
        -:  239:
        -:  240:template <class Iterator1, class Iterator2>
        -:  241:constexpr bool   // constexpr in C++17
        -:  242:operator==(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  243:
        -:  244:template <class Iterator1, class Iterator2>
        -:  245:constexpr bool   // constexpr in C++17
        -:  246:operator!=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  247:
        -:  248:template <class Iterator1, class Iterator2>
        -:  249:constexpr bool   // constexpr in C++17
        -:  250:operator<(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  251:
        -:  252:template <class Iterator1, class Iterator2>
        -:  253:constexpr bool   // constexpr in C++17
        -:  254:operator<=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  255:
        -:  256:template <class Iterator1, class Iterator2>
        -:  257:constexpr bool   // constexpr in C++17
        -:  258:operator>(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  259:
        -:  260:template <class Iterator1, class Iterator2>
        -:  261:constexpr bool   // constexpr in C++17
        -:  262:operator>=(const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
        -:  263:
        -:  264:template <class Iterator1, class Iterator2>
        -:  265:constexpr auto   // constexpr in C++17
        -:  266:operator-(const move_iterator<Iterator1>& x,
        -:  267:          const move_iterator<Iterator2>& y) -> decltype(x.base() - y.base());
        -:  268:
        -:  269:template <class Iterator>
        -:  270:constexpr move_iterator<Iterator> operator+(   // constexpr in C++17
        -:  271:            typename move_iterator<Iterator>::difference_type n,
        -:  272:            const move_iterator<Iterator>& x);
        -:  273:
        -:  274:template <class Iterator>   // constexpr in C++17
        -:  275:constexpr  move_iterator<Iterator> make_move_iterator(const Iterator& i);
        -:  276:
        -:  277:
        -:  278:template <class T, class charT = char, class traits = char_traits<charT>, class Distance = ptrdiff_t>
        -:  279:class istream_iterator
        -:  280:    : public iterator<input_iterator_tag, T, Distance, const T*, const T&>
        -:  281:{
        -:  282:public:
        -:  283:    typedef charT char_type;
        -:  284:    typedef traits traits_type;
        -:  285:    typedef basic_istream<charT,traits> istream_type;
        -:  286:
        -:  287:    constexpr istream_iterator();
        -:  288:    istream_iterator(istream_type& s);
        -:  289:    istream_iterator(const istream_iterator& x);
        -:  290:    ~istream_iterator();
        -:  291:
        -:  292:    const T& operator*() const;
        -:  293:    const T* operator->() const;
        -:  294:    istream_iterator& operator++();
        -:  295:    istream_iterator  operator++(int);
        -:  296:};
        -:  297:
        -:  298:template <class T, class charT, class traits, class Distance>
        -:  299:bool operator==(const istream_iterator<T,charT,traits,Distance>& x,
        -:  300:                const istream_iterator<T,charT,traits,Distance>& y);
        -:  301:template <class T, class charT, class traits, class Distance>
        -:  302:bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,
        -:  303:                const istream_iterator<T,charT,traits,Distance>& y);
        -:  304:
        -:  305:template <class T, class charT = char, class traits = char_traits<charT> >
        -:  306:class ostream_iterator
        -:  307:    : public iterator<output_iterator_tag, void, void, void ,void>
        -:  308:{
        -:  309:public:
        -:  310:    typedef charT char_type;
        -:  311:    typedef traits traits_type;
        -:  312:    typedef basic_ostream<charT,traits> ostream_type;
        -:  313:
        -:  314:    ostream_iterator(ostream_type& s);
        -:  315:    ostream_iterator(ostream_type& s, const charT* delimiter);
        -:  316:    ostream_iterator(const ostream_iterator& x);
        -:  317:    ~ostream_iterator();
        -:  318:    ostream_iterator& operator=(const T& value);
        -:  319:
        -:  320:    ostream_iterator& operator*();
        -:  321:    ostream_iterator& operator++();
        -:  322:    ostream_iterator& operator++(int);
        -:  323:};
        -:  324:
        -:  325:template<class charT, class traits = char_traits<charT> >
        -:  326:class istreambuf_iterator
        -:  327:    : public iterator<input_iterator_tag, charT,
        -:  328:                      typename traits::off_type, unspecified,
        -:  329:                      charT>
        -:  330:{
        -:  331:public:
        -:  332:    typedef charT                         char_type;
        -:  333:    typedef traits                        traits_type;
        -:  334:    typedef typename traits::int_type     int_type;
        -:  335:    typedef basic_streambuf<charT,traits> streambuf_type;
        -:  336:    typedef basic_istream<charT,traits>   istream_type;
        -:  337:
        -:  338:    istreambuf_iterator() noexcept;
        -:  339:    istreambuf_iterator(istream_type& s) noexcept;
        -:  340:    istreambuf_iterator(streambuf_type* s) noexcept;
        -:  341:    istreambuf_iterator(a-private-type) noexcept;
        -:  342:
        -:  343:    charT                operator*() const;
        -:  344:    pointer operator->() const;
        -:  345:    istreambuf_iterator& operator++();
        -:  346:    a-private-type       operator++(int);
        -:  347:
        -:  348:    bool equal(const istreambuf_iterator& b) const;
        -:  349:};
        -:  350:
        -:  351:template <class charT, class traits>
        -:  352:bool operator==(const istreambuf_iterator<charT,traits>& a,
        -:  353:                const istreambuf_iterator<charT,traits>& b);
        -:  354:template <class charT, class traits>
        -:  355:bool operator!=(const istreambuf_iterator<charT,traits>& a,
        -:  356:                const istreambuf_iterator<charT,traits>& b);
        -:  357:
        -:  358:template <class charT, class traits = char_traits<charT> >
        -:  359:class ostreambuf_iterator
        -:  360:    : public iterator<output_iterator_tag, void, void, void, void>
        -:  361:{
        -:  362:public:
        -:  363:    typedef charT                         char_type;
        -:  364:    typedef traits                        traits_type;
        -:  365:    typedef basic_streambuf<charT,traits> streambuf_type;
        -:  366:    typedef basic_ostream<charT,traits>   ostream_type;
        -:  367:
        -:  368:    ostreambuf_iterator(ostream_type& s) noexcept;
        -:  369:    ostreambuf_iterator(streambuf_type* s) noexcept;
        -:  370:    ostreambuf_iterator& operator=(charT c);
        -:  371:    ostreambuf_iterator& operator*();
        -:  372:    ostreambuf_iterator& operator++();
        -:  373:    ostreambuf_iterator& operator++(int);
        -:  374:    bool failed() const noexcept;
        -:  375:};
        -:  376:
        -:  377:template <class C> constexpr auto begin(C& c) -> decltype(c.begin());
        -:  378:template <class C> constexpr auto begin(const C& c) -> decltype(c.begin());
        -:  379:template <class C> constexpr auto end(C& c) -> decltype(c.end());
        -:  380:template <class C> constexpr auto end(const C& c) -> decltype(c.end());
        -:  381:template <class T, size_t N> constexpr T* begin(T (&array)[N]);
        -:  382:template <class T, size_t N> constexpr T* end(T (&array)[N]);
        -:  383:
        -:  384:template <class C> auto constexpr cbegin(const C& c) -> decltype(std::begin(c));        // C++14
        -:  385:template <class C> auto constexpr cend(const C& c) -> decltype(std::end(c));            // C++14
        -:  386:template <class C> auto constexpr rbegin(C& c) -> decltype(c.rbegin());                 // C++14
        -:  387:template <class C> auto constexpr rbegin(const C& c) -> decltype(c.rbegin());           // C++14
        -:  388:template <class C> auto constexpr rend(C& c) -> decltype(c.rend());                     // C++14
        -:  389:template <class C> constexpr auto rend(const C& c) -> decltype(c.rend());               // C++14
        -:  390:template <class E> reverse_iterator<const E*> constexpr rbegin(initializer_list<E> il); // C++14
        -:  391:template <class E> reverse_iterator<const E*> constexpr rend(initializer_list<E> il);   // C++14
        -:  392:template <class T, size_t N> reverse_iterator<T*> constexpr rbegin(T (&array)[N]);      // C++14
        -:  393:template <class T, size_t N> reverse_iterator<T*> constexpr rend(T (&array)[N]);        // C++14
        -:  394:template <class C> constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));      // C++14
        -:  395:template <class C> constexpr auto crend(const C& c) -> decltype(std::rend(c));          // C++14
        -:  396:
        -:  397:// 24.8, container access:
        -:  398:template <class C> constexpr auto size(const C& c) -> decltype(c.size());         // C++17
        -:  399:template <class T, size_t N> constexpr size_t size(const T (&array)[N]) noexcept; // C++17
        -:  400:
        -:  401:template <class C> constexpr auto ssize(const C& c)
        -:  402:    -> common_type_t<ptrdiff_t, make_signed_t<decltype(c.size())>>;				       // C++20
        -:  403:template <class T, ptrdiff_t> constexpr ptrdiff_t ssize(const T (&array)[N]) noexcept; // C++20
        -:  404:
        -:  405:template <class C> constexpr auto empty(const C& c) -> decltype(c.empty());       // C++17
        -:  406:template <class T, size_t N> constexpr bool empty(const T (&array)[N]) noexcept;  // C++17
        -:  407:template <class E> constexpr bool empty(initializer_list<E> il) noexcept;         // C++17
        -:  408:template <class C> constexpr auto data(C& c) -> decltype(c.data());               // C++17
        -:  409:template <class C> constexpr auto data(const C& c) -> decltype(c.data());         // C++17
        -:  410:template <class T, size_t N> constexpr T* data(T (&array)[N]) noexcept;           // C++17
        -:  411:template <class E> constexpr const E* data(initializer_list<E> il) noexcept;      // C++17
        -:  412:
        -:  413:}  // std
        -:  414:
        -:  415:*/
        -:  416:
        -:  417:#include <__config>
        -:  418:#include <iosfwd> // for forward declarations of vector and string.
        -:  419:#include <__functional_base>
        -:  420:#include <type_traits>
        -:  421:#include <cstddef>
        -:  422:#include <initializer_list>
        -:  423:#include <version>
        -:  424:#ifdef __APPLE__
        -:  425:#include <Availability.h>
        -:  426:#endif
        -:  427:
        -:  428:#include <__debug>
        -:  429:
        -:  430:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  431:#pragma GCC system_header
        -:  432:#endif
        -:  433:
        -:  434:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  435:template <class _Iter>
        -:  436:struct _LIBCPP_TEMPLATE_VIS iterator_traits;
        -:  437:
        -:  438:struct _LIBCPP_TEMPLATE_VIS input_iterator_tag {};
        -:  439:struct _LIBCPP_TEMPLATE_VIS output_iterator_tag {};
        -:  440:struct _LIBCPP_TEMPLATE_VIS forward_iterator_tag       : public input_iterator_tag {};
        -:  441:struct _LIBCPP_TEMPLATE_VIS bidirectional_iterator_tag : public forward_iterator_tag {};
        -:  442:struct _LIBCPP_TEMPLATE_VIS random_access_iterator_tag : public bidirectional_iterator_tag {};
        -:  443:#if _LIBCPP_STD_VER > 17
        -:  444:// TODO(EricWF)  contiguous_iterator_tag is provided as an extension prior to
        -:  445://  C++20 to allow optimizations for users providing wrapped iterator types.
        -:  446:struct _LIBCPP_TEMPLATE_VIS contiguous_iterator_tag: public random_access_iterator_tag { };
        -:  447:#endif
        -:  448:
        -:  449:template <class _Iter>
        -:  450:struct __iter_traits_cache {
        -:  451:  using type = _If<
        -:  452:    __is_primary_template<iterator_traits<_Iter> >::value,
        -:  453:    _Iter,
        -:  454:    iterator_traits<_Iter>
        -:  455:  >;
        -:  456:};
        -:  457:template <class _Iter>
        -:  458:using _ITER_TRAITS = typename __iter_traits_cache<_Iter>::type;
        -:  459:
        -:  460:struct __iter_concept_concept_test {
        -:  461:  template <class _Iter>
        -:  462:  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_concept;
        -:  463:};
        -:  464:struct __iter_concept_category_test {
        -:  465:  template <class _Iter>
        -:  466:  using _Apply = typename _ITER_TRAITS<_Iter>::iterator_category;
        -:  467:};
        -:  468:struct __iter_concept_random_fallback {
        -:  469:  template <class _Iter>
        -:  470:  using _Apply = _EnableIf<
        -:  471:                          __is_primary_template<iterator_traits<_Iter> >::value,
        -:  472:                          random_access_iterator_tag
        -:  473:                        >;
        -:  474:};
        -:  475:
        -:  476:template <class _Iter, class _Tester> struct __test_iter_concept
        -:  477:    : _IsValidExpansion<_Tester::template _Apply, _Iter>,
        -:  478:      _Tester
        -:  479:{
        -:  480:};
        -:  481:
        -:  482:template <class _Iter>
        -:  483:struct __iter_concept_cache {
        -:  484:  using type = _Or<
        -:  485:    __test_iter_concept<_Iter, __iter_concept_concept_test>,
        -:  486:    __test_iter_concept<_Iter, __iter_concept_category_test>,
        -:  487:    __test_iter_concept<_Iter, __iter_concept_random_fallback>
        -:  488:  >;
        -:  489:};
        -:  490:
        -:  491:template <class _Iter>
        -:  492:using _ITER_CONCEPT = typename __iter_concept_cache<_Iter>::type::template _Apply<_Iter>;
        -:  493:
        -:  494:
        -:  495:template <class _Tp>
        -:  496:struct __has_iterator_typedefs
        -:  497:{
        -:  498:private:
        -:  499:    struct __two {char __lx; char __lxx;};
        -:  500:    template <class _Up> static __two __test(...);
        -:  501:    template <class _Up> static char __test(typename std::__void_t<typename _Up::iterator_category>::type* = 0,
        -:  502:    										typename std::__void_t<typename _Up::difference_type>::type* = 0,
        -:  503:    										typename std::__void_t<typename _Up::value_type>::type* = 0,
        -:  504:    										typename std::__void_t<typename _Up::reference>::type* = 0,
        -:  505:    										typename std::__void_t<typename _Up::pointer>::type* = 0
        -:  506:    										);
        -:  507:public:
        -:  508:    static const bool value = sizeof(__test<_Tp>(0,0,0,0,0)) == 1;
        -:  509:};
        -:  510:
        -:  511:
        -:  512:template <class _Tp>
        -:  513:struct __has_iterator_category
        -:  514:{
        -:  515:private:
        -:  516:    struct __two {char __lx; char __lxx;};
        -:  517:    template <class _Up> static __two __test(...);
        -:  518:    template <class _Up> static char __test(typename _Up::iterator_category* = 0);
        -:  519:public:
        -:  520:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  521:};
        -:  522:
        -:  523:template <class _Iter, bool> struct __iterator_traits_impl {};
        -:  524:
        -:  525:template <class _Iter>
        -:  526:struct __iterator_traits_impl<_Iter, true>
        -:  527:{
        -:  528:    typedef typename _Iter::difference_type   difference_type;
        -:  529:    typedef typename _Iter::value_type        value_type;
        -:  530:    typedef typename _Iter::pointer           pointer;
        -:  531:    typedef typename _Iter::reference         reference;
        -:  532:    typedef typename _Iter::iterator_category iterator_category;
        -:  533:};
        -:  534:
        -:  535:template <class _Iter, bool> struct __iterator_traits {};
        -:  536:
        -:  537:template <class _Iter>
        -:  538:struct __iterator_traits<_Iter, true>
        -:  539:    :  __iterator_traits_impl
        -:  540:      <
        -:  541:        _Iter,
        -:  542:        is_convertible<typename _Iter::iterator_category, input_iterator_tag>::value ||
        -:  543:        is_convertible<typename _Iter::iterator_category, output_iterator_tag>::value
        -:  544:      >
        -:  545:{};
        -:  546:
        -:  547:// iterator_traits<Iterator> will only have the nested types if Iterator::iterator_category
        -:  548://    exists.  Else iterator_traits<Iterator> will be an empty class.  This is a
        -:  549://    conforming extension which allows some programs to compile and behave as
        -:  550://    the client expects instead of failing at compile time.
        -:  551:
        -:  552:template <class _Iter>
        -:  553:struct _LIBCPP_TEMPLATE_VIS iterator_traits
        -:  554:    : __iterator_traits<_Iter, __has_iterator_typedefs<_Iter>::value> {
        -:  555:
        -:  556:  using __primary_template = iterator_traits;
        -:  557:};
        -:  558:
        -:  559:template<class _Tp>
        -:  560:struct _LIBCPP_TEMPLATE_VIS iterator_traits<_Tp*>
        -:  561:{
        -:  562:    typedef ptrdiff_t difference_type;
        -:  563:    typedef typename remove_cv<_Tp>::type value_type;
        -:  564:    typedef _Tp* pointer;
        -:  565:    typedef _Tp& reference;
        -:  566:    typedef random_access_iterator_tag iterator_category;
        -:  567:#if _LIBCPP_STD_VER > 17
        -:  568:    typedef contiguous_iterator_tag    iterator_concept;
        -:  569:#endif
        -:  570:};
        -:  571:
        -:  572:template <class _Tp, class _Up, bool = __has_iterator_category<iterator_traits<_Tp> >::value>
        -:  573:struct __has_iterator_category_convertible_to
        -:  574:    : public integral_constant<bool, is_convertible<typename iterator_traits<_Tp>::iterator_category, _Up>::value>
        -:  575:{};
        -:  576:
        -:  577:template <class _Tp, class _Up>
        -:  578:struct __has_iterator_category_convertible_to<_Tp, _Up, false> : public false_type {};
        -:  579:
        -:  580:template <class _Tp>
        -:  581:struct __is_cpp17_input_iterator : public __has_iterator_category_convertible_to<_Tp, input_iterator_tag> {};
        -:  582:
        -:  583:template <class _Tp>
        -:  584:struct __is_cpp17_forward_iterator : public __has_iterator_category_convertible_to<_Tp, forward_iterator_tag> {};
        -:  585:
        -:  586:template <class _Tp>
        -:  587:struct __is_cpp17_bidirectional_iterator : public __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag> {};
        -:  588:
        -:  589:template <class _Tp>
        -:  590:struct __is_cpp17_random_access_iterator : public __has_iterator_category_convertible_to<_Tp, random_access_iterator_tag> {};
        -:  591:
        -:  592:#if _LIBCPP_STD_VER > 17
        -:  593:template <class _Tp>
        -:  594:struct __is_cpp17_contiguous_iterator : public __has_iterator_category_convertible_to<_Tp, contiguous_iterator_tag> {};
        -:  595:#else
        -:  596:template <class _Tp>
        -:  597:struct __is_cpp17_contiguous_iterator : public false_type {};
        -:  598:#endif
        -:  599:
        -:  600:
        -:  601:template <class _Tp>
        -:  602:struct __is_exactly_cpp17_input_iterator
        -:  603:    : public integral_constant<bool,
        -:  604:         __has_iterator_category_convertible_to<_Tp, input_iterator_tag>::value &&
        -:  605:        !__has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value> {};
        -:  606:
        -:  607:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -:  608:template<class _InputIterator>
        -:  609:using __iter_value_type = typename iterator_traits<_InputIterator>::value_type;
        -:  610:
        -:  611:template<class _InputIterator>
        -:  612:using __iter_key_type = remove_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>;
        -:  613:
        -:  614:template<class _InputIterator>
        -:  615:using __iter_mapped_type = typename iterator_traits<_InputIterator>::value_type::second_type;
        -:  616:
        -:  617:template<class _InputIterator>
        -:  618:using __iter_to_alloc_type = pair<
        -:  619:    add_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>,
        -:  620:    typename iterator_traits<_InputIterator>::value_type::second_type>;
        -:  621:#endif
        -:  622:
        -:  623:template<class _Category, class _Tp, class _Distance = ptrdiff_t,
        -:  624:         class _Pointer = _Tp*, class _Reference = _Tp&>
        -:  625:struct _LIBCPP_TEMPLATE_VIS iterator
        -:  626:{
        -:  627:    typedef _Tp        value_type;
        -:  628:    typedef _Distance  difference_type;
        -:  629:    typedef _Pointer   pointer;
        -:  630:    typedef _Reference reference;
        -:  631:    typedef _Category  iterator_category;
        -:  632:};
        -:  633:
        -:  634:template <class _InputIter>
        -:  635:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  636:void __advance(_InputIter& __i,
        -:  637:             typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag)
        -:  638:{
        -:  639:    for (; __n > 0; --__n)
        -:  640:        ++__i;
        -:  641:}
        -:  642:
        -:  643:template <class _BiDirIter>
        -:  644:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  645:void __advance(_BiDirIter& __i,
        -:  646:             typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag)
        -:  647:{
        -:  648:    if (__n >= 0)
        -:  649:        for (; __n > 0; --__n)
        -:  650:            ++__i;
        -:  651:    else
        -:  652:        for (; __n < 0; ++__n)
        -:  653:            --__i;
        -:  654:}
        -:  655:
        -:  656:template <class _RandIter>
        -:  657:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__1L9__advanceINS_11__wrap_iterIPcEEEEvRT_NS_15iterator_traitsIS4_E15difference_typeENS_26random_access_iterator_tagE called 5 returned 100% blocks executed 100%
        5:  658:void __advance(_RandIter& __i,
        5:  658-block  0
        -:  659:             typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag)
        -:  660:{
        5:  661:   __i += __n;
        5:  662:}
        5:  662-block  0
        -:  663:
        -:  664:template <class _InputIter, class _Distance>
        -:  665:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__1L7advanceINS_11__wrap_iterIPcEElEEvRT_T0_ called 5 returned 100% blocks executed 100%
        5:  666:void advance(_InputIter& __i, _Distance __orig_n)
        5:  666-block  0
        -:  667:{
        -:  668:    _LIBCPP_ASSERT(__orig_n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,
        -:  669:                   "Attempt to advance(it, n) with negative n on a non-bidirectional iterator");
        -:  670:    typedef decltype(__convert_to_integral(__orig_n)) _IntegralSize;
        5:  671:    _IntegralSize __n = __orig_n;
        5:  672:    __advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());
        5:  673:}
        5:  673-block  0
        -:  674:
        -:  675:template <class _InputIter>
        -:  676:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  677:typename iterator_traits<_InputIter>::difference_type
        -:  678:__distance(_InputIter __first, _InputIter __last, input_iterator_tag)
        -:  679:{
        -:  680:    typename iterator_traits<_InputIter>::difference_type __r(0);
        -:  681:    for (; __first != __last; ++__first)
        -:  682:        ++__r;
        -:  683:    return __r;
        -:  684:}
        -:  685:
        -:  686:template <class _RandIter>
        -:  687:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  688:typename iterator_traits<_RandIter>::difference_type
function _ZNSt3__1L10__distanceINS_13move_iteratorIPPcEEEENS_15iterator_traitsIT_E15difference_typeES6_S6_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceINS_11__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_NS_26random_access_iterator_tagE called 4 returned 100% blocks executed 100%
function _ZNSt3__1L10__distanceINS_13move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceIPKPKcEENS_15iterator_traitsIT_E15difference_typeES6_S6_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceINS_11__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESC_SC_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__1L10__distanceINS_13move_iteratorIPPN7testing9TestSuiteEEEEENS_15iterator_traitsIT_E15difference_typeES8_S8_NS_26random_access_iterator_tagE called 0 returned 0% blocks executed 0%
        4:  689:__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag)
    $$$$$:  689-block  0
        4:  689-block  1
    $$$$$:  689-block  2
    $$$$$:  689-block  3
    $$$$$:  689-block  4
    $$$$$:  689-block  5
    $$$$$:  689-block  6
    $$$$$:  689-block  7
        -:  690:{
        4:  691:    return __last - __first;
    $$$$$:  691-block  0
        4:  691-block  1
    $$$$$:  691-block  2
    $$$$$:  691-block  3
    $$$$$:  691-block  4
    $$$$$:  691-block  5
    $$$$$:  691-block  6
    $$$$$:  691-block  7
        -:  692:}
        -:  693:
        -:  694:template <class _InputIter>
        -:  695:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  696:typename iterator_traits<_InputIter>::difference_type
function _ZNSt3__1L8distanceINS_13move_iteratorIPPcEEEENS_15iterator_traitsIT_E15difference_typeES6_S6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceINS_11__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_ called 4 returned 100% blocks executed 100%
function _ZNSt3__1L8distanceINS_13move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESB_SB_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceIPKPKcEENS_15iterator_traitsIT_E15difference_typeES6_S6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceIPKcEENS_15iterator_traitsIT_E15difference_typeES4_S4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceIPcEENS_15iterator_traitsIT_E15difference_typeES3_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceINS_11__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEENS_15iterator_traitsIT_E15difference_typeESC_SC_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L8distanceINS_13move_iteratorIPPN7testing9TestSuiteEEEEENS_15iterator_traitsIT_E15difference_typeES8_S8_ called 0 returned 0% blocks executed 0%
        4:  697:distance(_InputIter __first, _InputIter __last)
    $$$$$:  697-block  0
        4:  697-block  1
    $$$$$:  697-block  2
    $$$$$:  697-block  3
    $$$$$:  697-block  4
    $$$$$:  697-block  5
    $$$$$:  697-block  6
    $$$$$:  697-block  7
        -:  698:{
        4:  699:    return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());
    $$$$$:  699-block  0
        4:  699-block  1
    $$$$$:  699-block  2
    $$$$$:  699-block  3
    $$$$$:  699-block  4
    $$$$$:  699-block  5
    $$$$$:  699-block  6
    $$$$$:  699-block  7
        -:  700:}
        -:  701:
        -:  702:template <class _InputIter>
        -:  703:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  704:typename enable_if
        -:  705:<
        -:  706:    __is_cpp17_input_iterator<_InputIter>::value,
        -:  707:    _InputIter
        -:  708:>::type
        -:  709:next(_InputIter __x,
        -:  710:     typename iterator_traits<_InputIter>::difference_type __n = 1)
        -:  711:{
        -:  712:    _LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,
        -:  713:                       "Attempt to next(it, n) with negative n on a non-bidirectional iterator");
        -:  714:
        -:  715:    _VSTD::advance(__x, __n);
        -:  716:    return __x;
        -:  717:}
        -:  718:
        -:  719:template <class _InputIter>
        -:  720:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  721:typename enable_if
        -:  722:<
        -:  723:    __is_cpp17_input_iterator<_InputIter>::value,
        -:  724:    _InputIter
        -:  725:>::type
function _ZNSt3__1L4prevINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr25__is_cpp17_input_iteratorIT_EE5valueES5_E4typeES5_NS_15iterator_traitsIS5_E15difference_typeE called 5 returned 100% blocks executed 100%
        5:  726:prev(_InputIter __x,
        5:  726-block  0
        -:  727:     typename iterator_traits<_InputIter>::difference_type __n = 1)
        -:  728:{
        -:  729:    _LIBCPP_ASSERT(__n <= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value,
        -:  730:                       "Attempt to prev(it, n) with a positive n on a non-bidirectional iterator");
        5:  731:    _VSTD::advance(__x, -__n);
        5:  732:    return __x;
        5:  732-block  0
        -:  733:}
        -:  734:
        -:  735:
        -:  736:template <class _Tp, class = void>
        -:  737:struct __is_stashing_iterator : false_type {};
        -:  738:
        -:  739:template <class _Tp>
        -:  740:struct __is_stashing_iterator<_Tp, typename __void_t<typename _Tp::__stashing_iterator_tag>::type>
        -:  741:  : true_type {};
        -:  742:
        -:  743:template <class _Iter>
        -:  744:class _LIBCPP_TEMPLATE_VIS reverse_iterator
        -:  745:    : public iterator<typename iterator_traits<_Iter>::iterator_category,
        -:  746:                      typename iterator_traits<_Iter>::value_type,
        -:  747:                      typename iterator_traits<_Iter>::difference_type,
        -:  748:                      typename iterator_traits<_Iter>::pointer,
        -:  749:                      typename iterator_traits<_Iter>::reference>
        -:  750:{
        -:  751:private:
        -:  752:    /*mutable*/ _Iter __t;  // no longer used as of LWG #2360, not removed due to ABI break
        -:  753:
        -:  754:    static_assert(!__is_stashing_iterator<_Iter>::value,
        -:  755:      "The specified iterator type cannot be used with reverse_iterator; "
        -:  756:      "Using stashing iterators with reverse_iterator causes undefined behavior");
        -:  757:
        -:  758:protected:
        -:  759:    _Iter current;
        -:  760:public:
        -:  761:    typedef _Iter                                            iterator_type;
        -:  762:    typedef typename iterator_traits<_Iter>::difference_type difference_type;
        -:  763:    typedef typename iterator_traits<_Iter>::reference       reference;
        -:  764:    typedef typename iterator_traits<_Iter>::pointer         pointer;
        -:  765:
        -:  766:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  767:    reverse_iterator() : __t(), current() {}
        -:  768:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEC1ES6_ called 30 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEC2ES6_ called 30 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEC1ES6_ called 2 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEC2ES6_ called 2 returned 100% blocks executed 100%
       64:  769:    explicit reverse_iterator(_Iter __x) : __t(__x), current(__x) {}
       30:  769-block  0
       30:  769-block  1
       30:  769-block  2
       30:  769-block  3
        2:  769-block  4
        2:  769-block  5
        2:  769-block  6
        2:  769-block  7
        -:  770:    template <class _Up>
        -:  771:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  772:        reverse_iterator(const reverse_iterator<_Up>& __u) : __t(__u.base()), current(__u.base()) {}
        -:  773:    template <class _Up>
        -:  774:        _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  775:        reverse_iterator& operator=(const reverse_iterator<_Up>& __u)
        -:  776:            { __t = current = __u.base(); return *this; }
        -:  777:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEE4baseEv called 42 returned 100% blocks executed 100%
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEE4baseEv called 2 returned 100% blocks executed 100%
       44:  778:    _Iter base() const {return current;}
       42:  778-block  0
       42:  778-block  1
        2:  778-block  2
        2:  778-block  3
        -:  779:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEdeEv called 17 returned 100% blocks executed 100%
function _ZNKSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEdeEv called 0 returned 0% blocks executed 0%
       17:  780:    reference operator*() const {_Iter __tmp = current; return *--__tmp;}
       17:  780-block  0
       17:  780-block  1
    $$$$$:  780-block  2
    $$$$$:  780-block  3
        -:  781:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  782:    pointer  operator->() const {return _VSTD::addressof(operator*());}
        -:  783:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing9TestSuiteEEEEppEv called 1 returned 100% blocks executed 100%
function _ZNSt3__116reverse_iteratorINS_11__wrap_iterIPPN7testing11EnvironmentEEEEppEv called 0 returned 0% blocks executed 0%
        1:  784:    reverse_iterator& operator++() {--current; return *this;}
        1:  784-block  0
        1:  784-block  1
    $$$$$:  784-block  2
    $$$$$:  784-block  3
        -:  785:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  786:    reverse_iterator  operator++(int) {reverse_iterator __tmp(*this); --current; return __tmp;}
        -:  787:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  788:    reverse_iterator& operator--() {++current; return *this;}
        -:  789:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  790:    reverse_iterator  operator--(int) {reverse_iterator __tmp(*this); ++current; return __tmp;}
        -:  791:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  792:    reverse_iterator  operator+ (difference_type __n) const {return reverse_iterator(current - __n);}
        -:  793:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  794:    reverse_iterator& operator+=(difference_type __n) {current -= __n; return *this;}
        -:  795:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  796:    reverse_iterator  operator- (difference_type __n) const {return reverse_iterator(current + __n);}
        -:  797:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  798:    reverse_iterator& operator-=(difference_type __n) {current += __n; return *this;}
        -:  799:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  800:    reference         operator[](difference_type __n) const {return *(*this + __n);}
        -:  801:};
        -:  802:
        -:  803:template <class _Iter1, class _Iter2>
        -:  804:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  805:bool
        -:  806:operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  807:{
        -:  808:    return __x.base() == __y.base();
        -:  809:}
        -:  810:
        -:  811:template <class _Iter1, class _Iter2>
        -:  812:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  813:bool
        -:  814:operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  815:{
        -:  816:    return __x.base() > __y.base();
        -:  817:}
        -:  818:
        -:  819:template <class _Iter1, class _Iter2>
        -:  820:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  821:bool
function _ZNSt3__1neINS_11__wrap_iterIPPN7testing9TestSuiteEEES6_EEbRKNS_16reverse_iteratorIT_EERKNS7_IT0_EE called 21 returned 100% blocks executed 100%
function _ZNSt3__1neINS_11__wrap_iterIPPN7testing11EnvironmentEEES6_EEbRKNS_16reverse_iteratorIT_EERKNS7_IT0_EE called 1 returned 100% blocks executed 100%
       22:  822:operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
       21:  822-block  0
        1:  822-block  1
        -:  823:{
       22:  824:    return __x.base() != __y.base();
       21:  824-block  0
        1:  824-block  1
        -:  825:}
        -:  826:
        -:  827:template <class _Iter1, class _Iter2>
        -:  828:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  829:bool
        -:  830:operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  831:{
        -:  832:    return __x.base() < __y.base();
        -:  833:}
        -:  834:
        -:  835:template <class _Iter1, class _Iter2>
        -:  836:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  837:bool
        -:  838:operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  839:{
        -:  840:    return __x.base() <= __y.base();
        -:  841:}
        -:  842:
        -:  843:template <class _Iter1, class _Iter2>
        -:  844:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  845:bool
        -:  846:operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  847:{
        -:  848:    return __x.base() >= __y.base();
        -:  849:}
        -:  850:
        -:  851:#ifndef _LIBCPP_CXX03_LANG
        -:  852:template <class _Iter1, class _Iter2>
        -:  853:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  854:auto
        -:  855:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  856:-> decltype(__y.base() - __x.base())
        -:  857:{
        -:  858:    return __y.base() - __x.base();
        -:  859:}
        -:  860:#else
        -:  861:template <class _Iter1, class _Iter2>
        -:  862:inline _LIBCPP_INLINE_VISIBILITY
        -:  863:typename reverse_iterator<_Iter1>::difference_type
        -:  864:operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
        -:  865:{
        -:  866:    return __y.base() - __x.base();
        -:  867:}
        -:  868:#endif
        -:  869:
        -:  870:template <class _Iter>
        -:  871:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  872:reverse_iterator<_Iter>
        -:  873:operator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x)
        -:  874:{
        -:  875:    return reverse_iterator<_Iter>(__x.base() - __n);
        -:  876:}
        -:  877:
        -:  878:#if _LIBCPP_STD_VER > 11
        -:  879:template <class _Iter>
        -:  880:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  881:reverse_iterator<_Iter> make_reverse_iterator(_Iter __i)
        -:  882:{
        -:  883:    return reverse_iterator<_Iter>(__i);
        -:  884:}
        -:  885:#endif
        -:  886:
        -:  887:template <class _Container>
        -:  888:class _LIBCPP_TEMPLATE_VIS back_insert_iterator
        -:  889:    : public iterator<output_iterator_tag,
        -:  890:                      void,
        -:  891:                      void,
        -:  892:                      void,
        -:  893:                      void>
        -:  894:{
        -:  895:protected:
        -:  896:    _Container* container;
        -:  897:public:
        -:  898:    typedef _Container container_type;
        -:  899:
        -:  900:    _LIBCPP_INLINE_VISIBILITY explicit back_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}
        -:  901:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  902:        {container->push_back(__value_); return *this;}
        -:  903:#ifndef _LIBCPP_CXX03_LANG
        -:  904:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator=(typename _Container::value_type&& __value_)
        -:  905:        {container->push_back(_VSTD::move(__value_)); return *this;}
        -:  906:#endif  // _LIBCPP_CXX03_LANG
        -:  907:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator*()     {return *this;}
        -:  908:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator& operator++()    {return *this;}
        -:  909:    _LIBCPP_INLINE_VISIBILITY back_insert_iterator  operator++(int) {return *this;}
        -:  910:};
        -:  911:
        -:  912:template <class _Container>
        -:  913:inline _LIBCPP_INLINE_VISIBILITY
        -:  914:back_insert_iterator<_Container>
        -:  915:back_inserter(_Container& __x)
        -:  916:{
        -:  917:    return back_insert_iterator<_Container>(__x);
        -:  918:}
        -:  919:
        -:  920:template <class _Container>
        -:  921:class _LIBCPP_TEMPLATE_VIS front_insert_iterator
        -:  922:    : public iterator<output_iterator_tag,
        -:  923:                      void,
        -:  924:                      void,
        -:  925:                      void,
        -:  926:                      void>
        -:  927:{
        -:  928:protected:
        -:  929:    _Container* container;
        -:  930:public:
        -:  931:    typedef _Container container_type;
        -:  932:
        -:  933:    _LIBCPP_INLINE_VISIBILITY explicit front_insert_iterator(_Container& __x) : container(_VSTD::addressof(__x)) {}
        -:  934:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  935:        {container->push_front(__value_); return *this;}
        -:  936:#ifndef _LIBCPP_CXX03_LANG
        -:  937:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator=(typename _Container::value_type&& __value_)
        -:  938:        {container->push_front(_VSTD::move(__value_)); return *this;}
        -:  939:#endif  // _LIBCPP_CXX03_LANG
        -:  940:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator*()     {return *this;}
        -:  941:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator& operator++()    {return *this;}
        -:  942:    _LIBCPP_INLINE_VISIBILITY front_insert_iterator  operator++(int) {return *this;}
        -:  943:};
        -:  944:
        -:  945:template <class _Container>
        -:  946:inline _LIBCPP_INLINE_VISIBILITY
        -:  947:front_insert_iterator<_Container>
        -:  948:front_inserter(_Container& __x)
        -:  949:{
        -:  950:    return front_insert_iterator<_Container>(__x);
        -:  951:}
        -:  952:
        -:  953:template <class _Container>
        -:  954:class _LIBCPP_TEMPLATE_VIS insert_iterator
        -:  955:    : public iterator<output_iterator_tag,
        -:  956:                      void,
        -:  957:                      void,
        -:  958:                      void,
        -:  959:                      void>
        -:  960:{
        -:  961:protected:
        -:  962:    _Container* container;
        -:  963:    typename _Container::iterator iter;
        -:  964:public:
        -:  965:    typedef _Container container_type;
        -:  966:
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEC1ERS9_NS_11__wrap_iterIPS7_EE called 4 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEC2ERS9_NS_11__wrap_iterIPS7_EE called 4 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEC1ERSD_NS_21__hash_const_iteratorIPNS_11__hash_nodeIS7_PvEEEE called 4 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEC2ERSD_NS_21__hash_const_iteratorIPNS_11__hash_nodeIS7_PvEEEE called 4 returned 100% blocks executed 100%
       16:  967:    _LIBCPP_INLINE_VISIBILITY insert_iterator(_Container& __x, typename _Container::iterator __i)
        4:  967-block  0
        4:  967-block  1
        4:  967-block  2
        4:  967-block  3
       16:  968:        : container(_VSTD::addressof(__x)), iter(__i) {}
        4:  968-block  0
        4:  968-block  1
        4:  968-block  2
        4:  968-block  3
        -:  969:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(const typename _Container::value_type& __value_)
        -:  970:        {iter = container->insert(iter, __value_); ++iter; return *this;}
        -:  971:#ifndef _LIBCPP_CXX03_LANG
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEaSEOS7_ called 7 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEaSEOS7_ called 0 returned 0% blocks executed 0%
        7:  972:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator=(typename _Container::value_type&& __value_)
        7:  972-block  0
    $$$$$:  972-block  1
        7:  973:        {iter = container->insert(iter, _VSTD::move(__value_)); ++iter; return *this;}
        7:  973-block  0
    $$$$$:  973-block  1
        -:  974:#endif  // _LIBCPP_CXX03_LANG
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEdeEv called 7 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEdeEv called 0 returned 0% blocks executed 0%
        7:  975:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator*()        {return *this;}
        7:  975-block  0
        7:  975-block  1
    $$$$$:  975-block  2
    $$$$$:  975-block  3
function _ZNSt3__115insert_iteratorINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEppEv called 7 returned 100% blocks executed 100%
function _ZNSt3__115insert_iteratorINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEppEv called 0 returned 0% blocks executed 0%
        7:  976:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++()       {return *this;}
        7:  976-block  0
        7:  976-block  1
    $$$$$:  976-block  2
    $$$$$:  976-block  3
        -:  977:    _LIBCPP_INLINE_VISIBILITY insert_iterator& operator++(int)    {return *this;}
        -:  978:};
        -:  979:
        -:  980:template <class _Container>
        -:  981:inline _LIBCPP_INLINE_VISIBILITY
        -:  982:insert_iterator<_Container>
function _ZNSt3__1L8inserterINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEENS_15insert_iteratorIT_EERSB_NSB_8iteratorE called 4 returned 100% blocks executed 100%
function _ZNSt3__1L8inserterINS_13unordered_setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS7_EENS_8equal_toIS7_EENS5_IS7_EEEEEENS_15insert_iteratorIT_EERSF_NSF_8iteratorE called 4 returned 100% blocks executed 100%
        8:  983:inserter(_Container& __x, typename _Container::iterator __i)
        4:  983-block  0
        4:  983-block  1
        -:  984:{
        8:  985:    return insert_iterator<_Container>(__x, __i);
        4:  985-block  0
        4:  985-block  1
        -:  986:}
        -:  987:
        -:  988:template <class _Tp, class _CharT = char,
        -:  989:          class _Traits = char_traits<_CharT>, class _Distance = ptrdiff_t>
        -:  990:class _LIBCPP_TEMPLATE_VIS istream_iterator
        -:  991:    : public iterator<input_iterator_tag, _Tp, _Distance, const _Tp*, const _Tp&>
        -:  992:{
        -:  993:public:
        -:  994:    typedef _CharT char_type;
        -:  995:    typedef _Traits traits_type;
        -:  996:    typedef basic_istream<_CharT,_Traits> istream_type;
        -:  997:private:
        -:  998:    istream_type* __in_stream_;
        -:  999:    _Tp __value_;
        -: 1000:public:
        -: 1001:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istream_iterator() : __in_stream_(0), __value_() {}
        -: 1002:    _LIBCPP_INLINE_VISIBILITY istream_iterator(istream_type& __s) : __in_stream_(_VSTD::addressof(__s))
        -: 1003:        {
        -: 1004:            if (!(*__in_stream_ >> __value_))
        -: 1005:                __in_stream_ = 0;
        -: 1006:        }
        -: 1007:
        -: 1008:    _LIBCPP_INLINE_VISIBILITY const _Tp& operator*() const {return __value_;}
        -: 1009:    _LIBCPP_INLINE_VISIBILITY const _Tp* operator->() const {return _VSTD::addressof((operator*()));}
        -: 1010:    _LIBCPP_INLINE_VISIBILITY istream_iterator& operator++()
        -: 1011:        {
        -: 1012:            if (!(*__in_stream_ >> __value_))
        -: 1013:                __in_stream_ = 0;
        -: 1014:            return *this;
        -: 1015:        }
        -: 1016:    _LIBCPP_INLINE_VISIBILITY istream_iterator  operator++(int)
        -: 1017:        {istream_iterator __t(*this); ++(*this); return __t;}
        -: 1018:
        -: 1019:    template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
        -: 1020:    friend _LIBCPP_INLINE_VISIBILITY
        -: 1021:    bool
        -: 1022:    operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
        -: 1023:               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);
        -: 1024:
        -: 1025:    template <class _Up, class _CharU, class _TraitsU, class _DistanceU>
        -: 1026:    friend _LIBCPP_INLINE_VISIBILITY
        -: 1027:    bool
        -: 1028:    operator==(const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __x,
        -: 1029:               const istream_iterator<_Up, _CharU, _TraitsU, _DistanceU>& __y);
        -: 1030:};
        -: 1031:
        -: 1032:template <class _Tp, class _CharT, class _Traits, class _Distance>
        -: 1033:inline _LIBCPP_INLINE_VISIBILITY
        -: 1034:bool
        -: 1035:operator==(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
        -: 1036:           const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y)
        -: 1037:{
        -: 1038:    return __x.__in_stream_ == __y.__in_stream_;
        -: 1039:}
        -: 1040:
        -: 1041:template <class _Tp, class _CharT, class _Traits, class _Distance>
        -: 1042:inline _LIBCPP_INLINE_VISIBILITY
        -: 1043:bool
        -: 1044:operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __x,
        -: 1045:           const istream_iterator<_Tp, _CharT, _Traits, _Distance>& __y)
        -: 1046:{
        -: 1047:    return !(__x == __y);
        -: 1048:}
        -: 1049:
        -: 1050:template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> >
        -: 1051:class _LIBCPP_TEMPLATE_VIS ostream_iterator
        -: 1052:    : public iterator<output_iterator_tag, void, void, void, void>
        -: 1053:{
        -: 1054:public:
        -: 1055:    typedef output_iterator_tag             iterator_category;
        -: 1056:    typedef void                            value_type;
        -: 1057:#if _LIBCPP_STD_VER > 17
        -: 1058:    typedef std::ptrdiff_t                  difference_type;
        -: 1059:#else
        -: 1060:    typedef void                            difference_type;
        -: 1061:#endif
        -: 1062:    typedef void                            pointer;
        -: 1063:    typedef void                            reference;
        -: 1064:    typedef _CharT                          char_type;
        -: 1065:    typedef _Traits                         traits_type;
        -: 1066:    typedef basic_ostream<_CharT, _Traits>  ostream_type;
        -: 1067:
        -: 1068:private:
        -: 1069:    ostream_type* __out_stream_;
        -: 1070:    const char_type* __delim_;
        -: 1071:public:
        -: 1072:    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s) _NOEXCEPT
        -: 1073:        : __out_stream_(_VSTD::addressof(__s)), __delim_(0) {}
        -: 1074:    _LIBCPP_INLINE_VISIBILITY ostream_iterator(ostream_type& __s, const _CharT* __delimiter) _NOEXCEPT
        -: 1075:        : __out_stream_(_VSTD::addressof(__s)), __delim_(__delimiter) {}
        -: 1076:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator=(const _Tp& __value_)
        -: 1077:        {
        -: 1078:            *__out_stream_ << __value_;
        -: 1079:            if (__delim_)
        -: 1080:                *__out_stream_ << __delim_;
        -: 1081:            return *this;
        -: 1082:        }
        -: 1083:
        -: 1084:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator*()     {return *this;}
        -: 1085:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++()    {return *this;}
        -: 1086:    _LIBCPP_INLINE_VISIBILITY ostream_iterator& operator++(int) {return *this;}
        -: 1087:};
        -: 1088:
        -: 1089:template<class _CharT, class _Traits>
        -: 1090:class _LIBCPP_TEMPLATE_VIS istreambuf_iterator
        -: 1091:    : public iterator<input_iterator_tag, _CharT,
        -: 1092:                      typename _Traits::off_type, _CharT*,
        -: 1093:                      _CharT>
        -: 1094:{
        -: 1095:public:
        -: 1096:    typedef _CharT                          char_type;
        -: 1097:    typedef _Traits                         traits_type;
        -: 1098:    typedef typename _Traits::int_type      int_type;
        -: 1099:    typedef basic_streambuf<_CharT,_Traits> streambuf_type;
        -: 1100:    typedef basic_istream<_CharT,_Traits>   istream_type;
        -: 1101:private:
        -: 1102:    mutable streambuf_type* __sbuf_;
        -: 1103:
        -: 1104:    class __proxy
        -: 1105:    {
        -: 1106:        char_type __keep_;
        -: 1107:        streambuf_type* __sbuf_;
        -: 1108:        _LIBCPP_INLINE_VISIBILITY __proxy(char_type __c, streambuf_type* __s)
        -: 1109:            : __keep_(__c), __sbuf_(__s) {}
        -: 1110:        friend class istreambuf_iterator;
        -: 1111:    public:
        -: 1112:        _LIBCPP_INLINE_VISIBILITY char_type operator*() const {return __keep_;}
        -: 1113:    };
        -: 1114:
        -: 1115:    _LIBCPP_INLINE_VISIBILITY
        -: 1116:    bool __test_for_eof() const
        -: 1117:    {
        -: 1118:        if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sgetc(), traits_type::eof()))
        -: 1119:            __sbuf_ = 0;
        -: 1120:        return __sbuf_ == 0;
        -: 1121:    }
        -: 1122:public:
        -: 1123:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR istreambuf_iterator() _NOEXCEPT : __sbuf_(0) {}
        -: 1124:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(istream_type& __s) _NOEXCEPT
        -: 1125:        : __sbuf_(__s.rdbuf()) {}
        -: 1126:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(streambuf_type* __s) _NOEXCEPT
        -: 1127:        : __sbuf_(__s) {}
        -: 1128:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator(const __proxy& __p) _NOEXCEPT
        -: 1129:        : __sbuf_(__p.__sbuf_) {}
        -: 1130:
        -: 1131:    _LIBCPP_INLINE_VISIBILITY char_type  operator*() const
        -: 1132:        {return static_cast<char_type>(__sbuf_->sgetc());}
        -: 1133:    _LIBCPP_INLINE_VISIBILITY istreambuf_iterator& operator++()
        -: 1134:        {
        -: 1135:            __sbuf_->sbumpc();
        -: 1136:            return *this;
        -: 1137:        }
        -: 1138:    _LIBCPP_INLINE_VISIBILITY __proxy              operator++(int)
        -: 1139:        {
        -: 1140:            return __proxy(__sbuf_->sbumpc(), __sbuf_);
        -: 1141:        }
        -: 1142:
        -: 1143:    _LIBCPP_INLINE_VISIBILITY bool equal(const istreambuf_iterator& __b) const
        -: 1144:        {return __test_for_eof() == __b.__test_for_eof();}
        -: 1145:};
        -: 1146:
        -: 1147:template <class _CharT, class _Traits>
        -: 1148:inline _LIBCPP_INLINE_VISIBILITY
        -: 1149:bool operator==(const istreambuf_iterator<_CharT,_Traits>& __a,
        -: 1150:                const istreambuf_iterator<_CharT,_Traits>& __b)
        -: 1151:                {return __a.equal(__b);}
        -: 1152:
        -: 1153:template <class _CharT, class _Traits>
        -: 1154:inline _LIBCPP_INLINE_VISIBILITY
        -: 1155:bool operator!=(const istreambuf_iterator<_CharT,_Traits>& __a,
        -: 1156:                const istreambuf_iterator<_CharT,_Traits>& __b)
        -: 1157:                {return !__a.equal(__b);}
        -: 1158:
        -: 1159:template <class _CharT, class _Traits>
        -: 1160:class _LIBCPP_TEMPLATE_VIS ostreambuf_iterator
        -: 1161:    : public iterator<output_iterator_tag, void, void, void, void>
        -: 1162:{
        -: 1163:public:
        -: 1164:    typedef output_iterator_tag                 iterator_category;
        -: 1165:    typedef void                                value_type;
        -: 1166:#if _LIBCPP_STD_VER > 17
        -: 1167:    typedef std::ptrdiff_t                      difference_type;
        -: 1168:#else
        -: 1169:    typedef void                                difference_type;
        -: 1170:#endif
        -: 1171:    typedef void                                pointer;
        -: 1172:    typedef void                                reference;
        -: 1173:    typedef _CharT                              char_type;
        -: 1174:    typedef _Traits                             traits_type;
        -: 1175:    typedef basic_streambuf<_CharT, _Traits>    streambuf_type;
        -: 1176:    typedef basic_ostream<_CharT, _Traits>      ostream_type;
        -: 1177:
        -: 1178:private:
        -: 1179:    streambuf_type* __sbuf_;
        -: 1180:public:
function _ZNSt3__119ostreambuf_iteratorIcNS_11char_traitsIcEEEC1ERNS_13basic_ostreamIcS2_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__119ostreambuf_iteratorIcNS_11char_traitsIcEEEC2ERNS_13basic_ostreamIcS2_EE called 0 returned 0% blocks executed 0%
    #####: 1181:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(ostream_type& __s) _NOEXCEPT
    $$$$$: 1181-block  0
    $$$$$: 1181-block  1
    #####: 1182:        : __sbuf_(__s.rdbuf()) {}
    $$$$$: 1182-block  0
    $$$$$: 1182-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1182-block  2
    $$$$$: 1182-block  3
        -: 1183:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator(streambuf_type* __s) _NOEXCEPT
        -: 1184:        : __sbuf_(__s) {}
        -: 1185:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator=(_CharT __c)
        -: 1186:        {
        -: 1187:            if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))
        -: 1188:                __sbuf_ = 0;
        -: 1189:            return *this;
        -: 1190:        }
        -: 1191:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator*()     {return *this;}
        -: 1192:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++()    {return *this;}
        -: 1193:    _LIBCPP_INLINE_VISIBILITY ostreambuf_iterator& operator++(int) {return *this;}
function _ZNKSt3__119ostreambuf_iteratorIcNS_11char_traitsIcEEE6failedEv called 0 returned 0% blocks executed 0%
    #####: 1194:    _LIBCPP_INLINE_VISIBILITY bool failed() const _NOEXCEPT {return __sbuf_ == 0;}
    $$$$$: 1194-block  0
    $$$$$: 1194-block  1
        -: 1195:
        -: 1196:    template <class _Ch, class _Tr>
        -: 1197:    friend
        -: 1198:    _LIBCPP_HIDDEN
        -: 1199:    ostreambuf_iterator<_Ch, _Tr>
        -: 1200:    __pad_and_output(ostreambuf_iterator<_Ch, _Tr> __s,
        -: 1201:                     const _Ch* __ob, const _Ch* __op, const _Ch* __oe,
        -: 1202:                     ios_base& __iob, _Ch __fl);
        -: 1203:};
        -: 1204:
        -: 1205:template <class _Iter>
        -: 1206:class _LIBCPP_TEMPLATE_VIS move_iterator
        -: 1207:{
        -: 1208:private:
        -: 1209:    _Iter __i;
        -: 1210:public:
        -: 1211:    typedef _Iter                                            iterator_type;
        -: 1212:    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
        -: 1213:    typedef typename iterator_traits<iterator_type>::value_type value_type;
        -: 1214:    typedef typename iterator_traits<iterator_type>::difference_type difference_type;
        -: 1215:    typedef iterator_type pointer;
        -: 1216:#ifndef _LIBCPP_CXX03_LANG
        -: 1217:    typedef typename iterator_traits<iterator_type>::reference __reference;
        -: 1218:    typedef typename conditional<
        -: 1219:            is_reference<__reference>::value,
        -: 1220:            typename remove_reference<__reference>::type&&,
        -: 1221:            __reference
        -: 1222:        >::type reference;
        -: 1223:#else
        -: 1224:    typedef typename iterator_traits<iterator_type>::reference reference;
        -: 1225:#endif
        -: 1226:
        -: 1227:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1228:    move_iterator() : __i() {}
        -: 1229:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__113move_iteratorIPPcEC1ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPcEC2ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ES7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ES7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPN7testing9TestSuiteEEC1ES4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPN7testing9TestSuiteEEC2ES4_ called 0 returned 0% blocks executed 0%
    #####: 1230:    explicit move_iterator(_Iter __x) : __i(__x) {}
    $$$$$: 1230-block  0
    $$$$$: 1230-block  1
    $$$$$: 1230-block  2
    $$$$$: 1230-block  3
    $$$$$: 1230-block  4
    $$$$$: 1230-block  5
    $$$$$: 1230-block  6
    $$$$$: 1230-block  7
    $$$$$: 1230-block  8
    $$$$$: 1230-block  9
    $$$$$: 1230-block 10
    $$$$$: 1230-block 11
        -: 1231:    template <class _Up>
        -: 1232:      _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1233:      move_iterator(const move_iterator<_Up>& __u) : __i(__u.base()) {}
function _ZNKSt3__113move_iteratorIPPcE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPPN7testing9TestSuiteEE4baseEv called 0 returned 0% blocks executed 0%
    #####: 1234:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 _Iter base() const {return __i;}
    $$$$$: 1234-block  0
    $$$$$: 1234-block  1
    $$$$$: 1234-block  2
    $$$$$: 1234-block  3
    $$$$$: 1234-block  4
    $$$$$: 1234-block  5
        -: 1235:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNKSt3__113move_iteratorIPPcEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113move_iteratorIPPN7testing9TestSuiteEEdeEv called 0 returned 0% blocks executed 0%
    #####: 1236:    reference operator*() const { return static_cast<reference>(*__i); }
    $$$$$: 1236-block  0
    $$$$$: 1236-block  1
    $$$$$: 1236-block  2
    $$$$$: 1236-block  3
    $$$$$: 1236-block  4
    $$$$$: 1236-block  5
        -: 1237:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1238:    pointer  operator->() const { return __i;}
        -: 1239:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
function _ZNSt3__113move_iteratorIPPcEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_iteratorIPPN7testing9TestSuiteEEppEv called 0 returned 0% blocks executed 0%
    #####: 1240:    move_iterator& operator++() {++__i; return *this;}
    $$$$$: 1240-block  0
    $$$$$: 1240-block  1
    $$$$$: 1240-block  2
    $$$$$: 1240-block  3
    $$$$$: 1240-block  4
    $$$$$: 1240-block  5
        -: 1241:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1242:    move_iterator  operator++(int) {move_iterator __tmp(*this); ++__i; return __tmp;}
        -: 1243:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1244:    move_iterator& operator--() {--__i; return *this;}
        -: 1245:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1246:    move_iterator  operator--(int) {move_iterator __tmp(*this); --__i; return __tmp;}
        -: 1247:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1248:    move_iterator  operator+ (difference_type __n) const {return move_iterator(__i + __n);}
        -: 1249:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1250:    move_iterator& operator+=(difference_type __n) {__i += __n; return *this;}
        -: 1251:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1252:    move_iterator  operator- (difference_type __n) const {return move_iterator(__i - __n);}
        -: 1253:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1254:    move_iterator& operator-=(difference_type __n) {__i -= __n; return *this;}
        -: 1255:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1256:    reference operator[](difference_type __n) const { return static_cast<reference>(__i[__n]); }
        -: 1257:};
        -: 1258:
        -: 1259:template <class _Iter1, class _Iter2>
        -: 1260:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1261:bool
        -: 1262:operator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1263:{
        -: 1264:    return __x.base() == __y.base();
        -: 1265:}
        -: 1266:
        -: 1267:template <class _Iter1, class _Iter2>
        -: 1268:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1269:bool
        -: 1270:operator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1271:{
        -: 1272:    return __x.base() < __y.base();
        -: 1273:}
        -: 1274:
        -: 1275:template <class _Iter1, class _Iter2>
        -: 1276:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1277:bool
        -: 1278:operator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1279:{
        -: 1280:    return __x.base() != __y.base();
        -: 1281:}
        -: 1282:
        -: 1283:template <class _Iter1, class _Iter2>
        -: 1284:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1285:bool
        -: 1286:operator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1287:{
        -: 1288:    return __x.base() > __y.base();
        -: 1289:}
        -: 1290:
        -: 1291:template <class _Iter1, class _Iter2>
        -: 1292:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1293:bool
        -: 1294:operator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1295:{
        -: 1296:    return __x.base() >= __y.base();
        -: 1297:}
        -: 1298:
        -: 1299:template <class _Iter1, class _Iter2>
        -: 1300:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1301:bool
        -: 1302:operator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1303:{
        -: 1304:    return __x.base() <= __y.base();
        -: 1305:}
        -: 1306:
        -: 1307:#ifndef _LIBCPP_CXX03_LANG
        -: 1308:template <class _Iter1, class _Iter2>
        -: 1309:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1310:auto
function _ZNSt3__1miIPPcS2_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS4_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS9_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPPN7testing9TestSuiteES4_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_13move_iteratorIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
    #####: 1311:operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
    $$$$$: 1311-block  0
    $$$$$: 1311-block  1
    $$$$$: 1311-block  2
        -: 1312:-> decltype(__x.base() - __y.base())
        -: 1313:{
    #####: 1314:    return __x.base() - __y.base();
    $$$$$: 1314-block  0
    $$$$$: 1314-block  1
    $$$$$: 1314-block  2
        -: 1315:}
        -: 1316:#else
        -: 1317:template <class _Iter1, class _Iter2>
        -: 1318:inline _LIBCPP_INLINE_VISIBILITY
        -: 1319:typename move_iterator<_Iter1>::difference_type
        -: 1320:operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
        -: 1321:{
        -: 1322:    return __x.base() - __y.base();
        -: 1323:}
        -: 1324:#endif
        -: 1325:
        -: 1326:template <class _Iter>
        -: 1327:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1328:move_iterator<_Iter>
        -: 1329:operator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x)
        -: 1330:{
        -: 1331:    return move_iterator<_Iter>(__x.base() + __n);
        -: 1332:}
        -: 1333:
        -: 1334:template <class _Iter>
        -: 1335:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1336:move_iterator<_Iter>
        -: 1337:make_move_iterator(_Iter __i)
        -: 1338:{
        -: 1339:    return move_iterator<_Iter>(__i);
        -: 1340:}
        -: 1341:
        -: 1342:// __wrap_iter
        -: 1343:
        -: 1344:template <class _Iter> class __wrap_iter;
        -: 1345:
        -: 1346:template <class _Iter1, class _Iter2>
        -: 1347:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1348:bool
        -: 1349:operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1350:
        -: 1351:template <class _Iter1, class _Iter2>
        -: 1352:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1353:bool
        -: 1354:operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1355:
        -: 1356:template <class _Iter1, class _Iter2>
        -: 1357:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1358:bool
        -: 1359:operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1360:
        -: 1361:template <class _Iter1, class _Iter2>
        -: 1362:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1363:bool
        -: 1364:operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1365:
        -: 1366:template <class _Iter1, class _Iter2>
        -: 1367:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1368:bool
        -: 1369:operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1370:
        -: 1371:template <class _Iter1, class _Iter2>
        -: 1372:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1373:bool
        -: 1374:operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1375:
        -: 1376:#ifndef _LIBCPP_CXX03_LANG
        -: 1377:template <class _Iter1, class _Iter2>
        -: 1378:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1379:auto
        -: 1380:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1381:-> decltype(__x.base() - __y.base());
        -: 1382:#else
        -: 1383:template <class _Iter1, class _Iter2>
        -: 1384:_LIBCPP_INLINE_VISIBILITY
        -: 1385:typename __wrap_iter<_Iter1>::difference_type
        -: 1386:operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1387:#endif
        -: 1388:
        -: 1389:template <class _Iter>
        -: 1390:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1391:__wrap_iter<_Iter>
        -: 1392:operator+(typename __wrap_iter<_Iter>::difference_type, __wrap_iter<_Iter>) _NOEXCEPT;
        -: 1393:
        -: 1394:template <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 copy(_Ip, _Ip, _Op);
        -: 1395:template <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 copy_backward(_B1, _B1, _B2);
        -: 1396:template <class _Ip, class _Op> _Op _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 move(_Ip, _Ip, _Op);
        -: 1397:template <class _B1, class _B2> _B2 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 move_backward(_B1, _B1, _B2);
        -: 1398:
        -: 1399:#if _LIBCPP_DEBUG_LEVEL < 2
        -: 1400:
        -: 1401:template <class _Tp>
        -: 1402:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1403:typename enable_if
        -: 1404:<
        -: 1405:    is_trivially_copy_assignable<_Tp>::value,
        -: 1406:    _Tp*
        -: 1407:>::type
        -: 1408:__unwrap_iter(__wrap_iter<_Tp*>);
        -: 1409:
        -: 1410:#else
        -: 1411:
        -: 1412:template <class _Tp>
        -: 1413:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1414:typename enable_if
        -: 1415:<
        -: 1416:    is_trivially_copy_assignable<_Tp>::value,
        -: 1417:    __wrap_iter<_Tp*>
        -: 1418:>::type
        -: 1419:__unwrap_iter(__wrap_iter<_Tp*> __i);
        -: 1420:
        -: 1421:#endif
        -: 1422:
        -: 1423:template <class _Iter>
        -: 1424:class __wrap_iter
        -: 1425:{
        -: 1426:public:
        -: 1427:    typedef _Iter                                                      iterator_type;
        -: 1428:    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
        -: 1429:    typedef typename iterator_traits<iterator_type>::value_type        value_type;
        -: 1430:    typedef typename iterator_traits<iterator_type>::difference_type   difference_type;
        -: 1431:    typedef typename iterator_traits<iterator_type>::pointer           pointer;
        -: 1432:    typedef typename iterator_traits<iterator_type>::reference         reference;
        -: 1433:private:
        -: 1434:    iterator_type __i;
        -: 1435:public:
        -: 1436:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter() _NOEXCEPT
        -: 1437:#if _LIBCPP_STD_VER > 11
        -: 1438:                : __i{}
        -: 1439:#endif
        -: 1440:    {
        -: 1441:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1442:        __get_db()->__insert_i(this);
        -: 1443:#endif
        -: 1444:    }
        -: 1445:    template <class _Up> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
function _ZNSt3__111__wrap_iterIPKcEC1IPcEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1IPS6_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleISC_S8_EE5valueEvE4typeE called 7 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC1IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC1IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPcEC1IPS1_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS7_S3_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPcEC2IPS1_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS7_S3_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKcEC2IPcEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2IPS6_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleISC_S8_EE5valueEvE4typeE called 7 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC2IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC2IPS3_EERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS9_S5_EE5valueEvE4typeE called 0 returned 0% blocks executed 0%
       18: 1446:        __wrap_iter(const __wrap_iter<_Up>& __u,
        2: 1446-block  0
        7: 1446-block  1
    $$$$$: 1446-block  2
    $$$$$: 1446-block  3
    $$$$$: 1446-block  4
    $$$$$: 1446-block  5
        2: 1446-block  6
        7: 1446-block  7
    $$$$$: 1446-block  8
    $$$$$: 1446-block  9
        -: 1447:            typename enable_if<is_convertible<_Up, iterator_type>::value>::type* = 0) _NOEXCEPT
        9: 1448:            : __i(__u.base())
        9: 1449:    {
        -: 1450:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1451:        __get_db()->__iterator_copy(this, &__u);
        -: 1452:#endif
       18: 1453:    }
        2: 1453-block  0
        7: 1453-block  1
    $$$$$: 1453-block  2
    $$$$$: 1453-block  3
    $$$$$: 1453-block  4
    $$$$$: 1453-block  5
        2: 1453-block  6
        7: 1453-block  7
    $$$$$: 1453-block  8
    $$$$$: 1453-block  9
        -: 1454:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1455:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1456:    __wrap_iter(const __wrap_iter& __x)
        -: 1457:        : __i(__x.base())
        -: 1458:    {
        -: 1459:        __get_db()->__iterator_copy(this, &__x);
        -: 1460:    }
        -: 1461:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1462:    __wrap_iter& operator=(const __wrap_iter& __x)
        -: 1463:    {
        -: 1464:        if (this != &__x)
        -: 1465:        {
        -: 1466:            __get_db()->__iterator_copy(this, &__x);
        -: 1467:            __i = __x.__i;
        -: 1468:        }
        -: 1469:        return *this;
        -: 1470:    }
        -: 1471:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1472:    ~__wrap_iter()
        -: 1473:    {
        -: 1474:        __get_db()->__erase_i(this);
        -: 1475:    }
        -: 1476:#endif
function _ZNKSt3__111__wrap_iterIPcEdeEv called 165 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv called 54 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKcEdeEv called 16 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing9TestSuiteEEdeEv called 12 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing9TestSuiteEEdeEv called 19 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPcEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEdeEv called 14 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPN7testing12TestPropertyEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing11EnvironmentEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKN7testing14TestPartResultEEdeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKPN7testing8TestInfoEEdeEv called 110 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEdeEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing11EnvironmentEEdeEv called 0 returned 0% blocks executed 0%
      391: 1477:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference operator*() const _NOEXCEPT
      165: 1477-block  0
       54: 1477-block  1
    $$$$$: 1477-block  2
       16: 1477-block  3
       12: 1477-block  4
       19: 1477-block  5
    $$$$$: 1477-block  6
       14: 1477-block  7
    $$$$$: 1477-block  8
    $$$$$: 1477-block  9
    $$$$$: 1477-block 10
    $$$$$: 1477-block 11
    $$$$$: 1477-block 12
      110: 1477-block 13
        1: 1477-block 14
    $$$$$: 1477-block 15
        -: 1478:    {
        -: 1479:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1480:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1481:                       "Attempted to dereference a non-dereferenceable iterator");
        -: 1482:#endif
      391: 1483:        return *__i;
      165: 1483-block  0
       54: 1483-block  1
    $$$$$: 1483-block  2
       16: 1483-block  3
       12: 1483-block  4
       19: 1483-block  5
    $$$$$: 1483-block  6
       14: 1483-block  7
    $$$$$: 1483-block  8
    $$$$$: 1483-block  9
    $$$$$: 1483-block 10
    $$$$$: 1483-block 11
    $$$$$: 1483-block 12
      110: 1483-block 13
        1: 1483-block 14
    $$$$$: 1483-block 15
        -: 1484:    }
function _ZNKSt3__111__wrap_iterIPN7testing12TestPropertyEEptEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEptEv called 0 returned 0% blocks executed 0%
    #####: 1485:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG pointer  operator->() const _NOEXCEPT
    $$$$$: 1485-block  0
    $$$$$: 1485-block  1
        -: 1486:    {
        -: 1487:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1488:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1489:                       "Attempted to dereference a non-dereferenceable iterator");
        -: 1490:#endif
    #####: 1491:        return (pointer)_VSTD::addressof(*__i);
    $$$$$: 1491-block  0
    $$$$$: 1491-block  1
        -: 1492:    }
function _ZNSt3__111__wrap_iterIPcEppEv called 160 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv called 44 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKcEppEv called 9 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEppEv called 12 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEppEv called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPcEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEppEv called 21 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPN7testing12TestPropertyEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing14TestPartResultEEppEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing8TestInfoEEppEv called 110 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEppEv called 1 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing11EnvironmentEEppEv called 0 returned 0% blocks executed 0%
      359: 1493:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator++() _NOEXCEPT
      160: 1493-block  0
       44: 1493-block  1
    $$$$$: 1493-block  2
        9: 1493-block  3
       12: 1493-block  4
        2: 1493-block  5
    $$$$$: 1493-block  6
       21: 1493-block  7
    $$$$$: 1493-block  8
    $$$$$: 1493-block  9
    $$$$$: 1493-block 10
    $$$$$: 1493-block 11
      110: 1493-block 12
        1: 1493-block 13
    $$$$$: 1493-block 14
        -: 1494:    {
        -: 1495:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1496:        _LIBCPP_ASSERT(__get_const_db()->__dereferenceable(this),
        -: 1497:                       "Attempted to increment non-incrementable iterator");
        -: 1498:#endif
      359: 1499:        ++__i;
      359: 1500:        return *this;
      160: 1500-block  0
       44: 1500-block  1
    $$$$$: 1500-block  2
        9: 1500-block  3
       12: 1500-block  4
        2: 1500-block  5
    $$$$$: 1500-block  6
       21: 1500-block  7
    $$$$$: 1500-block  8
    $$$$$: 1500-block  9
    $$$$$: 1500-block 10
    $$$$$: 1500-block 11
      110: 1500-block 12
        1: 1500-block 13
    $$$$$: 1500-block 14
        -: 1501:    }
function _ZNSt3__111__wrap_iterIPcEppEi called 80 returned 100% blocks executed 100%
       80: 1502:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator++(int) _NOEXCEPT
       80: 1502-block  0
       80: 1503:        {__wrap_iter __tmp(*this); ++(*this); return __tmp;}
       80: 1503-block  0
        -: 1504:
function _ZNSt3__111__wrap_iterIPcEmmEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEmmEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEmmEv called 18 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing11EnvironmentEEmmEv called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEmmEv called 0 returned 0% blocks executed 0%
       18: 1505:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator--() _NOEXCEPT
    $$$$$: 1505-block  0
    $$$$$: 1505-block  1
       18: 1505-block  2
    $$$$$: 1505-block  3
    $$$$$: 1505-block  4
        -: 1506:    {
        -: 1507:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1508:        _LIBCPP_ASSERT(__get_const_db()->__decrementable(this),
        -: 1509:                       "Attempted to decrement non-decrementable iterator");
        -: 1510:#endif
       18: 1511:        --__i;
       18: 1512:        return *this;
    $$$$$: 1512-block  0
    $$$$$: 1512-block  1
       18: 1512-block  2
    $$$$$: 1512-block  3
    $$$$$: 1512-block  4
        -: 1513:    }
        -: 1514:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator--(int) _NOEXCEPT
        -: 1515:        {__wrap_iter __tmp(*this); --(*this); return __tmp;}
function _ZNKSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing17TestEventListenerEEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing9TestSuiteEEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPcEplEl called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPcEplEl called 1 returned 100% blocks executed 100%
        1: 1516:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator+ (difference_type __n) const _NOEXCEPT
    $$$$$: 1516-block  0
    $$$$$: 1516-block  1
    $$$$$: 1516-block  2
    $$$$$: 1516-block  3
        1: 1516-block  4
        1: 1517:        {__wrap_iter __w(*this); __w += __n; return __w;}
    $$$$$: 1517-block  0
    $$$$$: 1517-block  1
    $$$$$: 1517-block  2
    $$$$$: 1517-block  3
        1: 1517-block  4
function _ZNSt3__111__wrap_iterIPPcEpLEl called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPcEpLEl called 6 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEpLEl called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing17TestEventListenerEEpLEl called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEpLEl called 0 returned 0% blocks executed 0%
        6: 1518:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator+=(difference_type __n) _NOEXCEPT
    $$$$$: 1518-block  0
        6: 1518-block  1
    $$$$$: 1518-block  2
    $$$$$: 1518-block  3
    $$$$$: 1518-block  4
        -: 1519:    {
        -: 1520:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1521:        _LIBCPP_ASSERT(__get_const_db()->__addable(this, __n),
        -: 1522:                   "Attempted to add/subtract iterator outside of valid range");
        -: 1523:#endif
        6: 1524:        __i += __n;
        6: 1525:        return *this;
    $$$$$: 1525-block  0
        6: 1525-block  1
    $$$$$: 1525-block  2
    $$$$$: 1525-block  3
    $$$$$: 1525-block  4
        -: 1526:    }
function _ZNKSt3__111__wrap_iterIPPcEmiEl called 0 returned 0% blocks executed 0%
    #####: 1527:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter  operator- (difference_type __n) const _NOEXCEPT
    $$$$$: 1527-block  0
    #####: 1528:        {return *this + (-__n);}
    $$$$$: 1528-block  0
        -: 1529:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter& operator-=(difference_type __n) _NOEXCEPT
        -: 1530:        {*this += -__n; return *this;}
        -: 1531:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG reference    operator[](difference_type __n) const _NOEXCEPT
        -: 1532:    {
        -: 1533:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1534:        _LIBCPP_ASSERT(__get_const_db()->__subscriptable(this, __n),
        -: 1535:                   "Attempted to subscript iterator outside of valid range");
        -: 1536:#endif
        -: 1537:        return __i[__n];
        -: 1538:    }
        -: 1539:
function _ZNKSt3__111__wrap_iterIPKPcE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPcE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPcE4baseEv called 177 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKcE4baseEv called 35 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE4baseEv called 74 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE4baseEv called 179 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPN7testing12TestPropertyEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEE4baseEv called 4 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing17TestEventListenerEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKPN7testing9TestSuiteEE4baseEv called 36 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing9TestSuiteEE4baseEv called 48 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPPN7testing11EnvironmentEE4baseEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEE4baseEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__111__wrap_iterIPKN7testing14TestPartResultEE4baseEv called 144 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing8TestInfoEE4baseEv called 264 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing17TestEventListenerEE4baseEv called 4 returned 100% blocks executed 100%
function _ZNKSt3__111__wrap_iterIPKPN7testing11EnvironmentEE4baseEv called 4 returned 100% blocks executed 100%
      971: 1540:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG iterator_type base() const _NOEXCEPT {return __i;}
    $$$$$: 1540-block  0
    $$$$$: 1540-block  1
    $$$$$: 1540-block  2
    $$$$$: 1540-block  3
      177: 1540-block  4
      177: 1540-block  5
       35: 1540-block  6
       35: 1540-block  7
       74: 1540-block  8
       74: 1540-block  9
      179: 1540-block 10
      179: 1540-block 11
    $$$$$: 1540-block 12
    $$$$$: 1540-block 13
    $$$$$: 1540-block 14
    $$$$$: 1540-block 15
        4: 1540-block 16
        4: 1540-block 17
    $$$$$: 1540-block 18
    $$$$$: 1540-block 19
       36: 1540-block 20
       36: 1540-block 21
       48: 1540-block 22
       48: 1540-block 23
        2: 1540-block 24
        2: 1540-block 25
    $$$$$: 1540-block 26
    $$$$$: 1540-block 27
      144: 1540-block 28
      144: 1540-block 29
      264: 1540-block 30
      264: 1540-block 31
        4: 1540-block 32
        4: 1540-block 33
        4: 1540-block 34
        4: 1540-block 35
        -: 1541:
        -: 1542:private:
        -: 1543:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1544:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(const void* __p, iterator_type __x) : __i(__x)
        -: 1545:    {
        -: 1546:        __get_db()->__insert_ic(this, __p);
        -: 1547:    }
        -: 1548:#else
function _ZNSt3__111__wrap_iterIPPcEC1ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPcEC2ES2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ES7_ called 38 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ES7_ called 38 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC1ES5_ called 4 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC2ES5_ called 4 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPcEC1ES1_ called 11 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPcEC2ES1_ called 11 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC1ES8_ called 84 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEC2ES8_ called 84 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKcEC1ES2_ called 14 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKcEC2ES2_ called 14 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEC1ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing8internal13edit_distance8EditTypeEEC2ES5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEC1ES6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing8internal13edit_distance8EditTypeEEC2ES6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing12TestPropertyEEC1ES3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPN7testing12TestPropertyEEC2ES3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKN7testing14TestPartResultEEC1ES4_ called 144 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKN7testing14TestPartResultEEC2ES4_ called 144 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing8TestInfoEEC1ES5_ called 134 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing8TestInfoEEC2ES5_ called 134 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC1ES5_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing17TestEventListenerEEC2ES5_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing17TestEventListenerEEC1ES4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPPN7testing17TestEventListenerEEC2ES4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC1ES5_ called 20 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing9TestSuiteEEC2ES5_ called 20 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing11EnvironmentEEC1ES5_ called 4 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPKPN7testing11EnvironmentEEC2ES5_ called 4 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEC1ES4_ called 32 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing9TestSuiteEEC2ES4_ called 32 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing11EnvironmentEEC1ES4_ called 2 returned 100% blocks executed 100%
function _ZNSt3__111__wrap_iterIPPN7testing11EnvironmentEEC2ES4_ called 2 returned 100% blocks executed 100%
      978: 1549:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG __wrap_iter(iterator_type __x) _NOEXCEPT : __i(__x) {}
    $$$$$: 1549-block  0
    $$$$$: 1549-block  1
    $$$$$: 1549-block  2
    $$$$$: 1549-block  3
       38: 1549-block  4
       38: 1549-block  5
       38: 1549-block  6
       38: 1549-block  7
        4: 1549-block  8
        4: 1549-block  9
        4: 1549-block 10
        4: 1549-block 11
       11: 1549-block 12
       11: 1549-block 13
       11: 1549-block 14
       11: 1549-block 15
       84: 1549-block 16
       84: 1549-block 17
       84: 1549-block 18
       84: 1549-block 19
       14: 1549-block 20
       14: 1549-block 21
       14: 1549-block 22
       14: 1549-block 23
    $$$$$: 1549-block 24
    $$$$$: 1549-block 25
    $$$$$: 1549-block 26
    $$$$$: 1549-block 27
    $$$$$: 1549-block 28
    $$$$$: 1549-block 29
    $$$$$: 1549-block 30
    $$$$$: 1549-block 31
    $$$$$: 1549-block 32
    $$$$$: 1549-block 33
    $$$$$: 1549-block 34
    $$$$$: 1549-block 35
      144: 1549-block 36
      144: 1549-block 37
      144: 1549-block 38
      144: 1549-block 39
      134: 1549-block 40
      134: 1549-block 41
      134: 1549-block 42
      134: 1549-block 43
        2: 1549-block 44
        2: 1549-block 45
        2: 1549-block 46
        2: 1549-block 47
    $$$$$: 1549-block 48
    $$$$$: 1549-block 49
    $$$$$: 1549-block 50
    $$$$$: 1549-block 51
       20: 1549-block 52
       20: 1549-block 53
       20: 1549-block 54
       20: 1549-block 55
        4: 1549-block 56
        4: 1549-block 57
        4: 1549-block 58
        4: 1549-block 59
       32: 1549-block 60
       32: 1549-block 61
       32: 1549-block 62
       32: 1549-block 63
        2: 1549-block 64
        2: 1549-block 65
        2: 1549-block 66
        2: 1549-block 67
        -: 1550:#endif
        -: 1551:
        -: 1552:    template <class _Up> friend class __wrap_iter;
        -: 1553:    template <class _CharT, class _Traits, class _Alloc> friend class basic_string;
        -: 1554:    template <class _Tp, class _Alloc> friend class _LIBCPP_TEMPLATE_VIS vector;
        -: 1555:    template <class _Tp, size_t> friend class _LIBCPP_TEMPLATE_VIS span;
        -: 1556:
        -: 1557:    template <class _Iter1, class _Iter2>
        -: 1558:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1559:    bool
        -: 1560:    operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1561:
        -: 1562:    template <class _Iter1, class _Iter2>
        -: 1563:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1564:    bool
        -: 1565:    operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1566:
        -: 1567:    template <class _Iter1, class _Iter2>
        -: 1568:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1569:    bool
        -: 1570:    operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1571:
        -: 1572:    template <class _Iter1, class _Iter2>
        -: 1573:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1574:    bool
        -: 1575:    operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1576:
        -: 1577:    template <class _Iter1, class _Iter2>
        -: 1578:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1579:    bool
        -: 1580:    operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1581:
        -: 1582:    template <class _Iter1, class _Iter2>
        -: 1583:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1584:    bool
        -: 1585:    operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1586:
        -: 1587:#ifndef _LIBCPP_CXX03_LANG
        -: 1588:    template <class _Iter1, class _Iter2>
        -: 1589:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1590:    auto
        -: 1591:    operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1592:    -> decltype(__x.base() - __y.base());
        -: 1593:#else
        -: 1594:    template <class _Iter1, class _Iter2>
        -: 1595:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1596:    typename __wrap_iter<_Iter1>::difference_type
        -: 1597:    operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) _NOEXCEPT;
        -: 1598:#endif
        -: 1599:
        -: 1600:    template <class _Iter1>
        -: 1601:    _LIBCPP_CONSTEXPR_IF_NODEBUG friend
        -: 1602:    __wrap_iter<_Iter1>
        -: 1603:    operator+(typename __wrap_iter<_Iter1>::difference_type, __wrap_iter<_Iter1>) _NOEXCEPT;
        -: 1604:
        -: 1605:    template <class _Ip, class _Op> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _Op copy(_Ip, _Ip, _Op);
        -: 1606:    template <class _B1, class _B2> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _B2 copy_backward(_B1, _B1, _B2);
        -: 1607:    template <class _Ip, class _Op> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _Op move(_Ip, _Ip, _Op);
        -: 1608:    template <class _B1, class _B2> friend _LIBCPP_CONSTEXPR_AFTER_CXX17 _B2 move_backward(_B1, _B1, _B2);
        -: 1609:
        -: 1610:#if _LIBCPP_DEBUG_LEVEL < 2
        -: 1611:    template <class _Tp>
        -: 1612:    _LIBCPP_CONSTEXPR friend
        -: 1613:    typename enable_if
        -: 1614:    <
        -: 1615:        is_trivially_copy_assignable<_Tp>::value,
        -: 1616:        _Tp*
        -: 1617:    >::type
        -: 1618:    __unwrap_iter(__wrap_iter<_Tp*>);
        -: 1619:#else
        -: 1620:  template <class _Tp>
        -: 1621:  inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR friend
        -: 1622:  typename enable_if
        -: 1623:  <
        -: 1624:      is_trivially_copy_assignable<_Tp>::value,
        -: 1625:      __wrap_iter<_Tp*>
        -: 1626:  >::type
        -: 1627:  __unwrap_iter(__wrap_iter<_Tp*> __i);
        -: 1628:#endif
        -: 1629:};
        -: 1630:
        -: 1631:template <class _Iter1, class _Iter2>
        -: 1632:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1633:bool
function _ZNSt3__1eqIPcS1_EEbRKNS_11__wrap_iterIT_EERKNS2_IT0_EE called 87 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKN7testing8internal13edit_distance8EditTypeES6_EEbRKNS_11__wrap_iterIT_EERKNS7_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPN7testing12TestPropertyES3_EEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPPcS2_EEbRKNS_11__wrap_iterIT_EERKNS3_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS6_EEbRKNS_11__wrap_iterIT_EERKNSA_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EEbRKNS_11__wrap_iterIT_EERKNS8_IT0_EE called 26 returned 100% blocks executed 100%
function _ZNSt3__1eqIPPN7testing8internal30ParameterizedTestSuiteInfoBaseES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 2 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKcS2_EEbRKNS_11__wrap_iterIT_EERKNS3_IT0_EE called 16 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEbRKNS_11__wrap_iterIT_EERKNS9_IT0_EE called 86 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKPN7testing9TestSuiteES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 18 returned 100% blocks executed 100%
function _ZNSt3__1eqIPPN7testing11EnvironmentES4_EEbRKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__1eqIPPN7testing9TestSuiteES4_EEbRKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 24 returned 100% blocks executed 100%
function _ZNSt3__1eqIPN7testing8internal13edit_distance8EditTypeES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqIPKN7testing14TestPartResultES4_EEbRKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 72 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKPN7testing8TestInfoES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 132 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKPN7testing17TestEventListenerES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 2 returned 100% blocks executed 100%
function _ZNSt3__1eqIPKPN7testing11EnvironmentES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 2 returned 100% blocks executed 100%
      468: 1634:operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
       87: 1634-block  0
    $$$$$: 1634-block  1
    $$$$$: 1634-block  2
    $$$$$: 1634-block  3
    $$$$$: 1634-block  4
       26: 1634-block  5
        2: 1634-block  6
       16: 1634-block  7
       86: 1634-block  8
       18: 1634-block  9
        1: 1634-block 10
       24: 1634-block 11
    $$$$$: 1634-block 12
       72: 1634-block 13
      132: 1634-block 14
        2: 1634-block 15
        2: 1634-block 16
        -: 1635:{
      468: 1636:    return __x.base() == __y.base();
       87: 1636-block  0
    $$$$$: 1636-block  1
    $$$$$: 1636-block  2
    $$$$$: 1636-block  3
    $$$$$: 1636-block  4
       26: 1636-block  5
        2: 1636-block  6
       16: 1636-block  7
       86: 1636-block  8
       18: 1636-block  9
        1: 1636-block 10
       24: 1636-block 11
    $$$$$: 1636-block 12
       72: 1636-block 13
      132: 1636-block 14
        2: 1636-block 15
        2: 1636-block 16
        -: 1637:}
        -: 1638:
        -: 1639:template <class _Iter1, class _Iter2>
        -: 1640:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1641:bool
function _ZNSt3__1ltIPN7testing8internal13edit_distance8EditTypeES5_EEbRKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
    #####: 1642:operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
    $$$$$: 1642-block  0
        -: 1643:{
        -: 1644:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1645:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1646:                   "Attempted to compare incomparable iterators");
        -: 1647:#endif
    #####: 1648:    return __x.base() < __y.base();
    $$$$$: 1648-block  0
        -: 1649:}
        -: 1650:
        -: 1651:template <class _Iter1, class _Iter2>
        -: 1652:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1653:bool
function _ZNSt3__1neIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS6_EEbRKNS_11__wrap_iterIT_EERKNSA_IT0_EE called 0 returned 0% blocks executed 0%
    #####: 1654:operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
    $$$$$: 1654-block  0
        -: 1655:{
    #####: 1656:    return !(__x == __y);
    $$$$$: 1656-block  0
        -: 1657:}
        -: 1658:
        -: 1659:template <class _Iter1, class _Iter2>
        -: 1660:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1661:bool
        -: 1662:operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1663:{
        -: 1664:    return __y < __x;
        -: 1665:}
        -: 1666:
        -: 1667:template <class _Iter1, class _Iter2>
        -: 1668:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1669:bool
        -: 1670:operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1671:{
        -: 1672:    return !(__x < __y);
        -: 1673:}
        -: 1674:
        -: 1675:template <class _Iter1, class _Iter2>
        -: 1676:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1677:bool
        -: 1678:operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1679:{
        -: 1680:    return !(__y < __x);
        -: 1681:}
        -: 1682:
        -: 1683:template <class _Iter1>
        -: 1684:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1685:bool
function _ZNSt3__1neIPcEEbRKNS_11__wrap_iterIT_EES6_ called 81 returned 100% blocks executed 100%
function _ZNSt3__1neIPKN7testing8internal13edit_distance8EditTypeEEEbRKNS_11__wrap_iterIT_EESB_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPKcEEbRKNS_11__wrap_iterIT_EES7_ called 16 returned 100% blocks executed 100%
function _ZNSt3__1neIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEbRKNS_11__wrap_iterIT_EESD_ called 86 returned 100% blocks executed 100%
function _ZNSt3__1neIPKPN7testing9TestSuiteEEEbRKNS_11__wrap_iterIT_EESA_ called 18 returned 100% blocks executed 100%
function _ZNSt3__1neIPPN7testing9TestSuiteEEEbRKNS_11__wrap_iterIT_EES9_ called 24 returned 100% blocks executed 100%
function _ZNSt3__1neIPPcEEbRKNS_11__wrap_iterIT_EES7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEbRKNS_11__wrap_iterIT_EESC_ called 15 returned 100% blocks executed 100%
function _ZNSt3__1neIPN7testing12TestPropertyEEEbRKNS_11__wrap_iterIT_EES8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPPN7testing8internal30ParameterizedTestSuiteInfoBaseEEEbRKNS_11__wrap_iterIT_EESA_ called 2 returned 100% blocks executed 100%
function _ZNSt3__1neIPPN7testing11EnvironmentEEEbRKNS_11__wrap_iterIT_EES9_ called 1 returned 100% blocks executed 100%
function _ZNSt3__1neIPN7testing8internal13edit_distance8EditTypeEEEbRKNS_11__wrap_iterIT_EESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1neIPKN7testing14TestPartResultEEEbRKNS_11__wrap_iterIT_EES9_ called 72 returned 100% blocks executed 100%
function _ZNSt3__1neIPKPN7testing8TestInfoEEEbRKNS_11__wrap_iterIT_EESA_ called 132 returned 100% blocks executed 100%
function _ZNSt3__1neIPKPN7testing17TestEventListenerEEEbRKNS_11__wrap_iterIT_EESA_ called 2 returned 100% blocks executed 100%
function _ZNSt3__1neIPKPN7testing11EnvironmentEEEbRKNS_11__wrap_iterIT_EESA_ called 2 returned 100% blocks executed 100%
      451: 1686:operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
       81: 1686-block  0
    $$$$$: 1686-block  1
       16: 1686-block  2
       86: 1686-block  3
       18: 1686-block  4
       24: 1686-block  5
    $$$$$: 1686-block  6
       15: 1686-block  7
    $$$$$: 1686-block  8
        2: 1686-block  9
        1: 1686-block 10
    $$$$$: 1686-block 11
       72: 1686-block 12
      132: 1686-block 13
        2: 1686-block 14
        2: 1686-block 15
        -: 1687:{
      451: 1688:    return !(__x == __y);
       81: 1688-block  0
    $$$$$: 1688-block  1
       16: 1688-block  2
       86: 1688-block  3
       18: 1688-block  4
       24: 1688-block  5
    $$$$$: 1688-block  6
       15: 1688-block  7
    $$$$$: 1688-block  8
        2: 1688-block  9
        1: 1688-block 10
    $$$$$: 1688-block 11
       72: 1688-block 12
      132: 1688-block 13
        2: 1688-block 14
        2: 1688-block 15
        -: 1689:}
        -: 1690:
        -: 1691:template <class _Iter1>
        -: 1692:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1693:bool
        -: 1694:operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1695:{
        -: 1696:    return __y < __x;
        -: 1697:}
        -: 1698:
        -: 1699:template <class _Iter1>
        -: 1700:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1701:bool
        -: 1702:operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1703:{
        -: 1704:    return !(__x < __y);
        -: 1705:}
        -: 1706:
        -: 1707:template <class _Iter1>
        -: 1708:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1709:bool
        -: 1710:operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) _NOEXCEPT
        -: 1711:{
        -: 1712:    return !(__y < __x);
        -: 1713:}
        -: 1714:
        -: 1715:#ifndef _LIBCPP_CXX03_LANG
        -: 1716:template <class _Iter1, class _Iter2>
        -: 1717:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1718:auto
function _ZNSt3__1miIPKN7testing8internal13edit_distance8EditTypeES6_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS8_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPKPcPS1_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS6_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPKcPcEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS5_IT0_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__1miIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS9_IT0_EE called 4 returned 100% blocks executed 100%
function _ZNSt3__1miIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS6_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNSB_IT0_EE called 7 returned 100% blocks executed 100%
function _ZNSt3__1miIPKcS2_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS4_IT0_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__1miIPKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNSA_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPKPN7testing17TestEventListenerES5_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS7_IT0_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__1miIPKPN7testing9TestSuiteEPS3_EEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_11__wrap_iterIT_EERKNS8_IT0_EE called 0 returned 0% blocks executed 0%
       13: 1719:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
    $$$$$: 1719-block  0
    $$$$$: 1719-block  1
        1: 1719-block  2
        4: 1719-block  3
        7: 1719-block  4
        1: 1719-block  5
    $$$$$: 1719-block  6
    $$$$$: 1719-block  7
    $$$$$: 1719-block  8
        -: 1720:-> decltype(__x.base() - __y.base())
        -: 1721:{
        -: 1722:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1723:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1724:                   "Attempted to subtract incompatible iterators");
        -: 1725:#endif
       13: 1726:    return __x.base() - __y.base();
    $$$$$: 1726-block  0
    $$$$$: 1726-block  1
        1: 1726-block  2
        4: 1726-block  3
        7: 1726-block  4
        1: 1726-block  5
    $$$$$: 1726-block  6
    $$$$$: 1726-block  7
    $$$$$: 1726-block  8
        -: 1727:}
        -: 1728:#else
        -: 1729:template <class _Iter1, class _Iter2>
        -: 1730:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1731:typename __wrap_iter<_Iter1>::difference_type
        -: 1732:operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT
        -: 1733:{
        -: 1734:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1735:    _LIBCPP_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y),
        -: 1736:                   "Attempted to subtract incompatible iterators");
        -: 1737:#endif
        -: 1738:    return __x.base() - __y.base();
        -: 1739:}
        -: 1740:#endif
        -: 1741:
        -: 1742:template <class _Iter>
        -: 1743:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_IF_NODEBUG
        -: 1744:__wrap_iter<_Iter>
        -: 1745:operator+(typename __wrap_iter<_Iter>::difference_type __n,
        -: 1746:          __wrap_iter<_Iter> __x) _NOEXCEPT
        -: 1747:{
        -: 1748:    __x += __n;
        -: 1749:    return __x;
        -: 1750:}
        -: 1751:
        -: 1752:template <class _Iter>
        -: 1753:struct __libcpp_is_trivial_iterator
        -: 1754:    : public _LIBCPP_BOOL_CONSTANT(is_pointer<_Iter>::value) {};
        -: 1755:
        -: 1756:template <class _Iter>
        -: 1757:struct __libcpp_is_trivial_iterator<move_iterator<_Iter> >
        -: 1758:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1759:
        -: 1760:template <class _Iter>
        -: 1761:struct __libcpp_is_trivial_iterator<reverse_iterator<_Iter> >
        -: 1762:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1763:
        -: 1764:template <class _Iter>
        -: 1765:struct __libcpp_is_trivial_iterator<__wrap_iter<_Iter> >
        -: 1766:    : public _LIBCPP_BOOL_CONSTANT(__libcpp_is_trivial_iterator<_Iter>::value) {};
        -: 1767:
        -: 1768:
        -: 1769:template <class _Tp, size_t _Np>
        -: 1770:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1771:_Tp*
        -: 1772:begin(_Tp (&__array)[_Np])
        -: 1773:{
        -: 1774:    return __array;
        -: 1775:}
        -: 1776:
        -: 1777:template <class _Tp, size_t _Np>
        -: 1778:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1779:_Tp*
        -: 1780:end(_Tp (&__array)[_Np])
        -: 1781:{
        -: 1782:    return __array + _Np;
        -: 1783:}
        -: 1784:
        -: 1785:#if !defined(_LIBCPP_CXX03_LANG)
        -: 1786:
        -: 1787:template <class _Cp>
        -: 1788:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1789:auto
        -: 1790:begin(_Cp& __c) -> decltype(__c.begin())
        -: 1791:{
        -: 1792:    return __c.begin();
        -: 1793:}
        -: 1794:
        -: 1795:template <class _Cp>
        -: 1796:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1797:auto
        -: 1798:begin(const _Cp& __c) -> decltype(__c.begin())
        -: 1799:{
        -: 1800:    return __c.begin();
        -: 1801:}
        -: 1802:
        -: 1803:template <class _Cp>
        -: 1804:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1805:auto
        -: 1806:end(_Cp& __c) -> decltype(__c.end())
        -: 1807:{
        -: 1808:    return __c.end();
        -: 1809:}
        -: 1810:
        -: 1811:template <class _Cp>
        -: 1812:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1813:auto
        -: 1814:end(const _Cp& __c) -> decltype(__c.end())
        -: 1815:{
        -: 1816:    return __c.end();
        -: 1817:}
        -: 1818:
        -: 1819:#if _LIBCPP_STD_VER > 11
        -: 1820:
        -: 1821:template <class _Tp, size_t _Np>
        -: 1822:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1823:reverse_iterator<_Tp*> rbegin(_Tp (&__array)[_Np])
        -: 1824:{
        -: 1825:    return reverse_iterator<_Tp*>(__array + _Np);
        -: 1826:}
        -: 1827:
        -: 1828:template <class _Tp, size_t _Np>
        -: 1829:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1830:reverse_iterator<_Tp*> rend(_Tp (&__array)[_Np])
        -: 1831:{
        -: 1832:    return reverse_iterator<_Tp*>(__array);
        -: 1833:}
        -: 1834:
        -: 1835:template <class _Ep>
        -: 1836:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1837:reverse_iterator<const _Ep*> rbegin(initializer_list<_Ep> __il)
        -: 1838:{
        -: 1839:    return reverse_iterator<const _Ep*>(__il.end());
        -: 1840:}
        -: 1841:
        -: 1842:template <class _Ep>
        -: 1843:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1844:reverse_iterator<const _Ep*> rend(initializer_list<_Ep> __il)
        -: 1845:{
        -: 1846:    return reverse_iterator<const _Ep*>(__il.begin());
        -: 1847:}
        -: 1848:
        -: 1849:template <class _Cp>
        -: 1850:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1851:auto cbegin(const _Cp& __c) -> decltype(_VSTD::begin(__c))
        -: 1852:{
        -: 1853:    return _VSTD::begin(__c);
        -: 1854:}
        -: 1855:
        -: 1856:template <class _Cp>
        -: 1857:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11
        -: 1858:auto cend(const _Cp& __c) -> decltype(_VSTD::end(__c))
        -: 1859:{
        -: 1860:    return _VSTD::end(__c);
        -: 1861:}
        -: 1862:
        -: 1863:template <class _Cp>
        -: 1864:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1865:auto rbegin(_Cp& __c) -> decltype(__c.rbegin())
        -: 1866:{
        -: 1867:    return __c.rbegin();
        -: 1868:}
        -: 1869:
        -: 1870:template <class _Cp>
        -: 1871:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1872:auto rbegin(const _Cp& __c) -> decltype(__c.rbegin())
        -: 1873:{
        -: 1874:    return __c.rbegin();
        -: 1875:}
        -: 1876:
        -: 1877:template <class _Cp>
        -: 1878:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1879:auto rend(_Cp& __c) -> decltype(__c.rend())
        -: 1880:{
        -: 1881:    return __c.rend();
        -: 1882:}
        -: 1883:
        -: 1884:template <class _Cp>
        -: 1885:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1886:auto rend(const _Cp& __c) -> decltype(__c.rend())
        -: 1887:{
        -: 1888:    return __c.rend();
        -: 1889:}
        -: 1890:
        -: 1891:template <class _Cp>
        -: 1892:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1893:auto crbegin(const _Cp& __c) -> decltype(_VSTD::rbegin(__c))
        -: 1894:{
        -: 1895:    return _VSTD::rbegin(__c);
        -: 1896:}
        -: 1897:
        -: 1898:template <class _Cp>
        -: 1899:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1900:auto crend(const _Cp& __c) -> decltype(_VSTD::rend(__c))
        -: 1901:{
        -: 1902:    return _VSTD::rend(__c);
        -: 1903:}
        -: 1904:
        -: 1905:#endif
        -: 1906:
        -: 1907:
        -: 1908:#else  // defined(_LIBCPP_CXX03_LANG)
        -: 1909:
        -: 1910:template <class _Cp>
        -: 1911:_LIBCPP_INLINE_VISIBILITY
        -: 1912:typename _Cp::iterator
        -: 1913:begin(_Cp& __c)
        -: 1914:{
        -: 1915:    return __c.begin();
        -: 1916:}
        -: 1917:
        -: 1918:template <class _Cp>
        -: 1919:_LIBCPP_INLINE_VISIBILITY
        -: 1920:typename _Cp::const_iterator
        -: 1921:begin(const _Cp& __c)
        -: 1922:{
        -: 1923:    return __c.begin();
        -: 1924:}
        -: 1925:
        -: 1926:template <class _Cp>
        -: 1927:_LIBCPP_INLINE_VISIBILITY
        -: 1928:typename _Cp::iterator
        -: 1929:end(_Cp& __c)
        -: 1930:{
        -: 1931:    return __c.end();
        -: 1932:}
        -: 1933:
        -: 1934:template <class _Cp>
        -: 1935:_LIBCPP_INLINE_VISIBILITY
        -: 1936:typename _Cp::const_iterator
        -: 1937:end(const _Cp& __c)
        -: 1938:{
        -: 1939:    return __c.end();
        -: 1940:}
        -: 1941:
        -: 1942:#endif  // !defined(_LIBCPP_CXX03_LANG)
        -: 1943:
        -: 1944:#if _LIBCPP_STD_VER > 14
        -: 1945:
        -: 1946:// #if _LIBCPP_STD_VER > 11
        -: 1947:// template <>
        -: 1948:// struct _LIBCPP_TEMPLATE_VIS plus<void>
        -: 1949:// {
        -: 1950://     template <class _T1, class _T2>
        -: 1951://     _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
        -: 1952://     auto operator()(_T1&& __t, _T2&& __u) const
        -: 1953://     _NOEXCEPT_(noexcept(_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u)))
        -: 1954://     -> decltype        (_VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u))
        -: 1955://         { return        _VSTD::forward<_T1>(__t) + _VSTD::forward<_T2>(__u); }
        -: 1956://     typedef void is_transparent;
        -: 1957:// };
        -: 1958:// #endif
        -: 1959:
        -: 1960:template <class _Cont>
        -: 1961:_LIBCPP_INLINE_VISIBILITY
        -: 1962:constexpr auto size(const _Cont& __c)
        -: 1963:_NOEXCEPT_(noexcept(__c.size()))
        -: 1964:-> decltype        (__c.size())
        -: 1965:{ return            __c.size(); }
        -: 1966:
        -: 1967:template <class _Tp, size_t _Sz>
        -: 1968:_LIBCPP_INLINE_VISIBILITY
        -: 1969:constexpr size_t size(const _Tp (&)[_Sz]) noexcept { return _Sz; }
        -: 1970:
        -: 1971:#if _LIBCPP_STD_VER > 17
        -: 1972:template <class _Cont>
        -: 1973:_LIBCPP_INLINE_VISIBILITY
        -: 1974:constexpr auto ssize(const _Cont& __c)
        -: 1975:_NOEXCEPT_(noexcept(static_cast<common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>>(__c.size())))
        -: 1976:->                              common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>
        -: 1977:{ return            static_cast<common_type_t<ptrdiff_t, make_signed_t<decltype(__c.size())>>>(__c.size()); }
        -: 1978:
        -: 1979:template <class _Tp, ptrdiff_t _Sz>
        -: 1980:_LIBCPP_INLINE_VISIBILITY
        -: 1981:constexpr ptrdiff_t ssize(const _Tp (&)[_Sz]) noexcept { return _Sz; }
        -: 1982:#endif
        -: 1983:
        -: 1984:template <class _Cont>
        -: 1985:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1986:constexpr auto empty(const _Cont& __c)
        -: 1987:_NOEXCEPT_(noexcept(__c.empty()))
        -: 1988:-> decltype        (__c.empty())
        -: 1989:{ return            __c.empty(); }
        -: 1990:
        -: 1991:template <class _Tp, size_t _Sz>
        -: 1992:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1993:constexpr bool empty(const _Tp (&)[_Sz]) noexcept { return false; }
        -: 1994:
        -: 1995:template <class _Ep>
        -: 1996:_LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1997:constexpr bool empty(initializer_list<_Ep> __il) noexcept { return __il.size() == 0; }
        -: 1998:
        -: 1999:template <class _Cont> constexpr
        -: 2000:_LIBCPP_INLINE_VISIBILITY
        -: 2001:auto data(_Cont& __c)
        -: 2002:_NOEXCEPT_(noexcept(__c.data()))
        -: 2003:-> decltype        (__c.data())
        -: 2004:{ return            __c.data(); }
        -: 2005:
        -: 2006:template <class _Cont> constexpr
        -: 2007:_LIBCPP_INLINE_VISIBILITY
        -: 2008:auto data(const _Cont& __c)
        -: 2009:_NOEXCEPT_(noexcept(__c.data()))
        -: 2010:-> decltype        (__c.data())
        -: 2011:{ return            __c.data(); }
        -: 2012:
        -: 2013:template <class _Tp, size_t _Sz>
        -: 2014:_LIBCPP_INLINE_VISIBILITY
        -: 2015:constexpr _Tp* data(_Tp (&__array)[_Sz]) noexcept { return __array; }
        -: 2016:
        -: 2017:template <class _Ep>
        -: 2018:_LIBCPP_INLINE_VISIBILITY
        -: 2019:constexpr const _Ep* data(initializer_list<_Ep> __il) noexcept { return __il.begin(); }
        -: 2020:#endif
        -: 2021:
        -: 2022:
        -: 2023:_LIBCPP_END_NAMESPACE_STD
        -: 2024:
        -: 2025:#endif  // _LIBCPP_ITERATOR
