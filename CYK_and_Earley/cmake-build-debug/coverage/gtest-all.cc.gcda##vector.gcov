        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX11.3.sdk/usr/include/c++/v1/vector
        -:    0:Graph:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===------------------------------ vector --------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_VECTOR
        -:   11:#define _LIBCPP_VECTOR
        -:   12:
        -:   13:/*
        -:   14:    vector synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:template <class T, class Allocator = allocator<T> >
        -:   20:class vector
        -:   21:{
        -:   22:public:
        -:   23:    typedef T                                        value_type;
        -:   24:    typedef Allocator                                allocator_type;
        -:   25:    typedef typename allocator_type::reference       reference;
        -:   26:    typedef typename allocator_type::const_reference const_reference;
        -:   27:    typedef implementation-defined                   iterator;
        -:   28:    typedef implementation-defined                   const_iterator;
        -:   29:    typedef typename allocator_type::size_type       size_type;
        -:   30:    typedef typename allocator_type::difference_type difference_type;
        -:   31:    typedef typename allocator_type::pointer         pointer;
        -:   32:    typedef typename allocator_type::const_pointer   const_pointer;
        -:   33:    typedef std::reverse_iterator<iterator>          reverse_iterator;
        -:   34:    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;
        -:   35:
        -:   36:    vector()
        -:   37:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:   38:    explicit vector(const allocator_type&);
        -:   39:    explicit vector(size_type n);
        -:   40:    explicit vector(size_type n, const allocator_type&); // C++14
        -:   41:    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());
        -:   42:    template <class InputIterator>
        -:   43:        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());
        -:   44:    vector(const vector& x);
        -:   45:    vector(vector&& x)
        -:   46:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:   47:    vector(initializer_list<value_type> il);
        -:   48:    vector(initializer_list<value_type> il, const allocator_type& a);
        -:   49:    ~vector();
        -:   50:    vector& operator=(const vector& x);
        -:   51:    vector& operator=(vector&& x)
        -:   52:        noexcept(
        -:   53:             allocator_type::propagate_on_container_move_assignment::value ||
        -:   54:             allocator_type::is_always_equal::value); // C++17
        -:   55:    vector& operator=(initializer_list<value_type> il);
        -:   56:    template <class InputIterator>
        -:   57:        void assign(InputIterator first, InputIterator last);
        -:   58:    void assign(size_type n, const value_type& u);
        -:   59:    void assign(initializer_list<value_type> il);
        -:   60:
        -:   61:    allocator_type get_allocator() const noexcept;
        -:   62:
        -:   63:    iterator               begin() noexcept;
        -:   64:    const_iterator         begin()   const noexcept;
        -:   65:    iterator               end() noexcept;
        -:   66:    const_iterator         end()     const noexcept;
        -:   67:
        -:   68:    reverse_iterator       rbegin() noexcept;
        -:   69:    const_reverse_iterator rbegin()  const noexcept;
        -:   70:    reverse_iterator       rend() noexcept;
        -:   71:    const_reverse_iterator rend()    const noexcept;
        -:   72:
        -:   73:    const_iterator         cbegin()  const noexcept;
        -:   74:    const_iterator         cend()    const noexcept;
        -:   75:    const_reverse_iterator crbegin() const noexcept;
        -:   76:    const_reverse_iterator crend()   const noexcept;
        -:   77:
        -:   78:    size_type size() const noexcept;
        -:   79:    size_type max_size() const noexcept;
        -:   80:    size_type capacity() const noexcept;
        -:   81:    bool empty() const noexcept;
        -:   82:    void reserve(size_type n);
        -:   83:    void shrink_to_fit() noexcept;
        -:   84:
        -:   85:    reference       operator[](size_type n);
        -:   86:    const_reference operator[](size_type n) const;
        -:   87:    reference       at(size_type n);
        -:   88:    const_reference at(size_type n) const;
        -:   89:
        -:   90:    reference       front();
        -:   91:    const_reference front() const;
        -:   92:    reference       back();
        -:   93:    const_reference back() const;
        -:   94:
        -:   95:    value_type*       data() noexcept;
        -:   96:    const value_type* data() const noexcept;
        -:   97:
        -:   98:    void push_back(const value_type& x);
        -:   99:    void push_back(value_type&& x);
        -:  100:    template <class... Args>
        -:  101:        reference emplace_back(Args&&... args); // reference in C++17
        -:  102:    void pop_back();
        -:  103:
        -:  104:    template <class... Args> iterator emplace(const_iterator position, Args&&... args);
        -:  105:    iterator insert(const_iterator position, const value_type& x);
        -:  106:    iterator insert(const_iterator position, value_type&& x);
        -:  107:    iterator insert(const_iterator position, size_type n, const value_type& x);
        -:  108:    template <class InputIterator>
        -:  109:        iterator insert(const_iterator position, InputIterator first, InputIterator last);
        -:  110:    iterator insert(const_iterator position, initializer_list<value_type> il);
        -:  111:
        -:  112:    iterator erase(const_iterator position);
        -:  113:    iterator erase(const_iterator first, const_iterator last);
        -:  114:
        -:  115:    void clear() noexcept;
        -:  116:
        -:  117:    void resize(size_type sz);
        -:  118:    void resize(size_type sz, const value_type& c);
        -:  119:
        -:  120:    void swap(vector&)
        -:  121:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  122:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  123:
        -:  124:    bool __invariants() const;
        -:  125:};
        -:  126:
        -:  127:template <class Allocator = allocator<T> >
        -:  128:class vector<bool, Allocator>
        -:  129:{
        -:  130:public:
        -:  131:    typedef bool                                     value_type;
        -:  132:    typedef Allocator                                allocator_type;
        -:  133:    typedef implementation-defined                   iterator;
        -:  134:    typedef implementation-defined                   const_iterator;
        -:  135:    typedef typename allocator_type::size_type       size_type;
        -:  136:    typedef typename allocator_type::difference_type difference_type;
        -:  137:    typedef iterator                                 pointer;
        -:  138:    typedef const_iterator                           const_pointer;
        -:  139:    typedef std::reverse_iterator<iterator>          reverse_iterator;
        -:  140:    typedef std::reverse_iterator<const_iterator>    const_reverse_iterator;
        -:  141:
        -:  142:    class reference
        -:  143:    {
        -:  144:    public:
        -:  145:        reference(const reference&) noexcept;
        -:  146:        operator bool() const noexcept;
        -:  147:        reference& operator=(const bool x) noexcept;
        -:  148:        reference& operator=(const reference& x) noexcept;
        -:  149:        iterator operator&() const noexcept;
        -:  150:        void flip() noexcept;
        -:  151:    };
        -:  152:
        -:  153:    class const_reference
        -:  154:    {
        -:  155:    public:
        -:  156:        const_reference(const reference&) noexcept;
        -:  157:        operator bool() const noexcept;
        -:  158:        const_iterator operator&() const noexcept;
        -:  159:    };
        -:  160:
        -:  161:    vector()
        -:  162:        noexcept(is_nothrow_default_constructible<allocator_type>::value);
        -:  163:    explicit vector(const allocator_type&);
        -:  164:    explicit vector(size_type n, const allocator_type& a = allocator_type()); // C++14
        -:  165:    vector(size_type n, const value_type& value, const allocator_type& = allocator_type());
        -:  166:    template <class InputIterator>
        -:  167:        vector(InputIterator first, InputIterator last, const allocator_type& = allocator_type());
        -:  168:    vector(const vector& x);
        -:  169:    vector(vector&& x)
        -:  170:        noexcept(is_nothrow_move_constructible<allocator_type>::value);
        -:  171:    vector(initializer_list<value_type> il);
        -:  172:    vector(initializer_list<value_type> il, const allocator_type& a);
        -:  173:    ~vector();
        -:  174:    vector& operator=(const vector& x);
        -:  175:    vector& operator=(vector&& x)
        -:  176:        noexcept(
        -:  177:             allocator_type::propagate_on_container_move_assignment::value ||
        -:  178:             allocator_type::is_always_equal::value); // C++17
        -:  179:    vector& operator=(initializer_list<value_type> il);
        -:  180:    template <class InputIterator>
        -:  181:        void assign(InputIterator first, InputIterator last);
        -:  182:    void assign(size_type n, const value_type& u);
        -:  183:    void assign(initializer_list<value_type> il);
        -:  184:
        -:  185:    allocator_type get_allocator() const noexcept;
        -:  186:
        -:  187:    iterator               begin() noexcept;
        -:  188:    const_iterator         begin()   const noexcept;
        -:  189:    iterator               end() noexcept;
        -:  190:    const_iterator         end()     const noexcept;
        -:  191:
        -:  192:    reverse_iterator       rbegin() noexcept;
        -:  193:    const_reverse_iterator rbegin()  const noexcept;
        -:  194:    reverse_iterator       rend() noexcept;
        -:  195:    const_reverse_iterator rend()    const noexcept;
        -:  196:
        -:  197:    const_iterator         cbegin()  const noexcept;
        -:  198:    const_iterator         cend()    const noexcept;
        -:  199:    const_reverse_iterator crbegin() const noexcept;
        -:  200:    const_reverse_iterator crend()   const noexcept;
        -:  201:
        -:  202:    size_type size() const noexcept;
        -:  203:    size_type max_size() const noexcept;
        -:  204:    size_type capacity() const noexcept;
        -:  205:    bool empty() const noexcept;
        -:  206:    void reserve(size_type n);
        -:  207:    void shrink_to_fit() noexcept;
        -:  208:
        -:  209:    reference       operator[](size_type n);
        -:  210:    const_reference operator[](size_type n) const;
        -:  211:    reference       at(size_type n);
        -:  212:    const_reference at(size_type n) const;
        -:  213:
        -:  214:    reference       front();
        -:  215:    const_reference front() const;
        -:  216:    reference       back();
        -:  217:    const_reference back() const;
        -:  218:
        -:  219:    void push_back(const value_type& x);
        -:  220:    template <class... Args> reference emplace_back(Args&&... args);  // C++14; reference in C++17
        -:  221:    void pop_back();
        -:  222:
        -:  223:    template <class... Args> iterator emplace(const_iterator position, Args&&... args);  // C++14
        -:  224:    iterator insert(const_iterator position, const value_type& x);
        -:  225:    iterator insert(const_iterator position, size_type n, const value_type& x);
        -:  226:    template <class InputIterator>
        -:  227:        iterator insert(const_iterator position, InputIterator first, InputIterator last);
        -:  228:    iterator insert(const_iterator position, initializer_list<value_type> il);
        -:  229:
        -:  230:    iterator erase(const_iterator position);
        -:  231:    iterator erase(const_iterator first, const_iterator last);
        -:  232:
        -:  233:    void clear() noexcept;
        -:  234:
        -:  235:    void resize(size_type sz);
        -:  236:    void resize(size_type sz, value_type x);
        -:  237:
        -:  238:    void swap(vector&)
        -:  239:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  240:                 allocator_traits<allocator_type>::is_always_equal::value);  // C++17
        -:  241:    void flip() noexcept;
        -:  242:
        -:  243:    bool __invariants() const;
        -:  244:};
        -:  245:
        -:  246:template <class InputIterator, class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
        -:  247:   vector(InputIterator, InputIterator, Allocator = Allocator())
        -:  248:   -> vector<typename iterator_traits<InputIterator>::value_type, Allocator>;
        -:  249:
        -:  250:template <class Allocator> struct hash<std::vector<bool, Allocator>>;
        -:  251:
        -:  252:template <class T, class Allocator> bool operator==(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  253:template <class T, class Allocator> bool operator< (const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  254:template <class T, class Allocator> bool operator!=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  255:template <class T, class Allocator> bool operator> (const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  256:template <class T, class Allocator> bool operator>=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  257:template <class T, class Allocator> bool operator<=(const vector<T,Allocator>& x, const vector<T,Allocator>& y);
        -:  258:
        -:  259:template <class T, class Allocator>
        -:  260:void swap(vector<T,Allocator>& x, vector<T,Allocator>& y)
        -:  261:    noexcept(noexcept(x.swap(y)));
        -:  262:
        -:  263:template <class T, class Allocator, class U>
        -:  264:typename vector<T, Allocator>::size_type
        -:  265:erase(vector<T, Allocator>& c, const U& value);       // C++20
        -:  266:template <class T, class Allocator, class Predicate>
        -:  267:typename vector<T, Allocator>::size_type
        -:  268:erase_if(vector<T, Allocator>& c, Predicate pred);    // C++20
        -:  269:
        -:  270:}  // std
        -:  271:
        -:  272:*/
        -:  273:
        -:  274:#include <__config>
        -:  275:#include <iosfwd> // for forward declaration of vector
        -:  276:#include <__bit_reference>
        -:  277:#include <type_traits>
        -:  278:#include <climits>
        -:  279:#include <limits>
        -:  280:#include <initializer_list>
        -:  281:#include <memory>
        -:  282:#include <stdexcept>
        -:  283:#include <algorithm>
        -:  284:#include <cstring>
        -:  285:#include <version>
        -:  286:#include <__split_buffer>
        -:  287:#include <__functional_base>
        -:  288:
        -:  289:#include <__debug>
        -:  290:
        -:  291:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  292:#pragma GCC system_header
        -:  293:#endif
        -:  294:
        -:  295:_LIBCPP_PUSH_MACROS
        -:  296:#include <__undef_macros>
        -:  297:
        -:  298:
        -:  299:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  300:
        -:  301:template <bool>
        -:  302:class _LIBCPP_TEMPLATE_VIS __vector_base_common
        -:  303:{
        -:  304:protected:
function _ZNSt3__120__vector_base_commonILb1EEC2Ev called 54 returned 100% blocks executed 100%
       54:  305:    _LIBCPP_INLINE_VISIBILITY __vector_base_common() {}
       54:  305-block  0
       54:  305-block  1
        -:  306:    _LIBCPP_NORETURN void __throw_length_error() const;
        -:  307:    _LIBCPP_NORETURN void __throw_out_of_range() const;
        -:  308:};
        -:  309:
        -:  310:template <bool __b>
        -:  311:void
        -:  312:__vector_base_common<__b>::__throw_length_error() const
        -:  313:{
        -:  314:    _VSTD::__throw_length_error("vector");
        -:  315:}
        -:  316:
        -:  317:template <bool __b>
        -:  318:void
        -:  319:__vector_base_common<__b>::__throw_out_of_range() const
        -:  320:{
        -:  321:    _VSTD::__throw_out_of_range("vector");
        -:  322:}
        -:  323:
        -:  324:_LIBCPP_EXTERN_TEMPLATE(class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __vector_base_common<true>)
        -:  325:
        -:  326:template <class _Tp, class _Allocator>
        -:  327:class __vector_base
        -:  328:    : protected __vector_base_common<true>
        -:  329:{
        -:  330:public:
        -:  331:    typedef _Allocator                               allocator_type;
        -:  332:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -:  333:    typedef typename __alloc_traits::size_type       size_type;
        -:  334:protected:
        -:  335:    typedef _Tp                                      value_type;
        -:  336:    typedef value_type&                              reference;
        -:  337:    typedef const value_type&                        const_reference;
        -:  338:    typedef typename __alloc_traits::difference_type difference_type;
        -:  339:    typedef typename __alloc_traits::pointer         pointer;
        -:  340:    typedef typename __alloc_traits::const_pointer   const_pointer;
        -:  341:    typedef pointer                                  iterator;
        -:  342:    typedef const_pointer                            const_iterator;
        -:  343:
        -:  344:    pointer                                         __begin_;
        -:  345:    pointer                                         __end_;
        -:  346:    __compressed_pair<pointer, allocator_type> __end_cap_;
        -:  347:
        -:  348:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE7__allocEv called 75 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE7__allocEv called 30 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE7__allocEv called 12 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE7__allocEv called 4 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE7__allocEv called 7 returned 100% blocks executed 100%
      128:  349:    allocator_type& __alloc() _NOEXCEPT
    $$$$$:  349-block  0
       75:  349-block  1
    $$$$$:  349-block  2
    $$$$$:  349-block  3
    $$$$$:  349-block  4
    $$$$$:  349-block  5
    $$$$$:  349-block  6
    $$$$$:  349-block  7
    $$$$$:  349-block  8
    $$$$$:  349-block  9
       30:  349-block 10
       12:  349-block 11
        4:  349-block 12
    $$$$$:  349-block 13
    $$$$$:  349-block 14
        7:  349-block 15
      128:  350:        {return __end_cap_.second();}
    $$$$$:  350-block  0
       75:  350-block  1
    $$$$$:  350-block  2
    $$$$$:  350-block  3
    $$$$$:  350-block  4
    $$$$$:  350-block  5
    $$$$$:  350-block  6
    $$$$$:  350-block  7
    $$$$$:  350-block  8
    $$$$$:  350-block  9
       30:  350-block 10
       12:  350-block 11
        4:  350-block 12
    $$$$$:  350-block 13
    $$$$$:  350-block 14
        7:  350-block 15
        -:  351:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__113__vector_baseIPcNS_9allocatorIS1_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE7__allocEv called 12 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIdNS_9allocatorIdEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseImNS_9allocatorImEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE7__allocEv called 8 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIiNS_9allocatorIiEEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE7__allocEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE7__allocEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE7__allocEv called 2 returned 100% blocks executed 100%
       23:  352:    const allocator_type& __alloc() const _NOEXCEPT
    $$$$$:  352-block  0
       12:  352-block  1
    $$$$$:  352-block  2
    $$$$$:  352-block  3
    $$$$$:  352-block  4
    $$$$$:  352-block  5
    $$$$$:  352-block  6
    $$$$$:  352-block  7
    $$$$$:  352-block  8
        8:  352-block  9
    $$$$$:  352-block 10
        1:  352-block 11
    $$$$$:  352-block 12
    $$$$$:  352-block 13
        2:  352-block 14
       23:  353:        {return __end_cap_.second();}
    $$$$$:  353-block  0
       12:  353-block  1
    $$$$$:  353-block  2
    $$$$$:  353-block  3
    $$$$$:  353-block  4
    $$$$$:  353-block  5
    $$$$$:  353-block  6
    $$$$$:  353-block  7
    $$$$$:  353-block  8
        8:  353-block  9
    $$$$$:  353-block 10
        1:  353-block 11
    $$$$$:  353-block 12
    $$$$$:  353-block 13
        2:  353-block 14
        -:  354:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9__end_capEv called 43 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE9__end_capEv called 18 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE9__end_capEv called 12 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE9__end_capEv called 2 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE9__end_capEv called 4 returned 100% blocks executed 100%
       79:  355:    pointer& __end_cap() _NOEXCEPT
    $$$$$:  355-block  0
       43:  355-block  1
    $$$$$:  355-block  2
    $$$$$:  355-block  3
    $$$$$:  355-block  4
    $$$$$:  355-block  5
    $$$$$:  355-block  6
    $$$$$:  355-block  7
    $$$$$:  355-block  8
       18:  355-block  9
       12:  355-block 10
        2:  355-block 11
    $$$$$:  355-block 12
    $$$$$:  355-block 13
        4:  355-block 14
       79:  356:        {return __end_cap_.first();}
    $$$$$:  356-block  0
       43:  356-block  1
    $$$$$:  356-block  2
    $$$$$:  356-block  3
    $$$$$:  356-block  4
    $$$$$:  356-block  5
    $$$$$:  356-block  6
    $$$$$:  356-block  7
    $$$$$:  356-block  8
       18:  356-block  9
       12:  356-block 10
        2:  356-block 11
    $$$$$:  356-block 12
    $$$$$:  356-block 13
        4:  356-block 14
        -:  357:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__113__vector_baseIPcNS_9allocatorIS1_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9__end_capEv called 117 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE9__end_capEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE9__end_capEv called 38 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIdNS_9allocatorIdEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseImNS_9allocatorImEEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE9__end_capEv called 38 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE9__end_capEv called 46 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIiNS_9allocatorIiEEE9__end_capEv called 16 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE9__end_capEv called 8 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE9__end_capEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE9__end_capEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE9__end_capEv called 13 returned 100% blocks executed 100%
      280:  358:    const pointer& __end_cap() const _NOEXCEPT
    $$$$$:  358-block  0
      117:  358-block  1
        2:  358-block  2
       38:  358-block  3
    $$$$$:  358-block  4
    $$$$$:  358-block  5
    $$$$$:  358-block  6
    $$$$$:  358-block  7
    $$$$$:  358-block  8
       38:  358-block  9
       46:  358-block 10
       16:  358-block 11
        8:  358-block 12
        2:  358-block 13
    $$$$$:  358-block 14
       13:  358-block 15
      280:  359:        {return __end_cap_.first();}
    $$$$$:  359-block  0
      117:  359-block  1
        2:  359-block  2
       38:  359-block  3
    $$$$$:  359-block  4
    $$$$$:  359-block  5
    $$$$$:  359-block  6
    $$$$$:  359-block  7
    $$$$$:  359-block  8
       38:  359-block  9
       46:  359-block 10
       16:  359-block 11
        8:  359-block 12
        2:  359-block 13
    $$$$$:  359-block 14
       13:  359-block 15
        -:  360:
        -:  361:    _LIBCPP_INLINE_VISIBILITY
       52:  362:    __vector_base()
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  362-block  1
        -:  363:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -:  364:    _LIBCPP_INLINE_VISIBILITY __vector_base(const allocator_type& __a);
        -:  365:#ifndef _LIBCPP_CXX03_LANG
        2:  366:    _LIBCPP_INLINE_VISIBILITY __vector_base(allocator_type&& __a) _NOEXCEPT;
        -:  367:#endif
        -:  368:    ~__vector_base();
        -:  369:
        -:  370:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5clearEv called 12 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE5clearEv called 12 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE5clearEv called 12 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE5clearEv called 2 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5clearEv called 1 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE5clearEv called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE5clearEv called 1 returned 100% blocks executed 100%
       40:  371:    void clear() _NOEXCEPT {__destruct_at_end(__begin_);}
    $$$$$:  371-block  0
    $$$$$:  371-block  1
       12:  371-block  2
       12:  371-block  3
    $$$$$:  371-block  4
    $$$$$:  371-block  5
       12:  371-block  6
       12:  371-block  7
    $$$$$:  371-block  8
    $$$$$:  371-block  9
    $$$$$:  371-block 10
    $$$$$:  371-block 11
    $$$$$:  371-block 12
    $$$$$:  371-block 13
    $$$$$:  371-block 14
    $$$$$:  371-block 15
    $$$$$:  371-block 16
    $$$$$:  371-block 17
       12:  371-block 18
       12:  371-block 19
        2:  371-block 20
        2:  371-block 21
    $$$$$:  371-block 22
    $$$$$:  371-block 23
        1:  371-block 24
        1:  371-block 25
    $$$$$:  371-block 26
    $$$$$:  371-block 27
    $$$$$:  371-block 28
    $$$$$:  371-block 29
        1:  371-block 30
        1:  371-block 31
        -:  372:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__113__vector_baseIPcNS_9allocatorIS1_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8capacityEv called 117 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE8capacityEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE8capacityEv called 38 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIdNS_9allocatorIdEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseImNS_9allocatorImEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE8capacityEv called 38 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE8capacityEv called 46 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIiNS_9allocatorIiEEE8capacityEv called 16 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE8capacityEv called 8 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE8capacityEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE8capacityEv called 13 returned 100% blocks executed 100%
      280:  373:    size_type capacity() const _NOEXCEPT
    $$$$$:  373-block  0
      117:  373-block  1
        2:  373-block  2
       38:  373-block  3
    $$$$$:  373-block  4
    $$$$$:  373-block  5
    $$$$$:  373-block  6
    $$$$$:  373-block  7
    $$$$$:  373-block  8
       38:  373-block  9
       46:  373-block 10
       16:  373-block 11
        8:  373-block 12
        2:  373-block 13
    $$$$$:  373-block 14
       13:  373-block 15
      280:  374:        {return static_cast<size_type>(__end_cap() - __begin_);}
    $$$$$:  374-block  0
      117:  374-block  1
        2:  374-block  2
       38:  374-block  3
    $$$$$:  374-block  4
    $$$$$:  374-block  5
    $$$$$:  374-block  6
    $$$$$:  374-block  7
    $$$$$:  374-block  8
       38:  374-block  9
       46:  374-block 10
       16:  374-block 11
        8:  374-block 12
        2:  374-block 13
    $$$$$:  374-block 14
       13:  374-block 15
        -:  375:
        -:  376:    _LIBCPP_INLINE_VISIBILITY
        -:  377:    void __destruct_at_end(pointer __new_last) _NOEXCEPT;
        -:  378:
        -:  379:    _LIBCPP_INLINE_VISIBILITY
        -:  380:    void __copy_assign_alloc(const __vector_base& __c)
        -:  381:        {__copy_assign_alloc(__c, integral_constant<bool,
        -:  382:                      __alloc_traits::propagate_on_container_copy_assignment::value>());}
        -:  383:
        -:  384:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE19__move_assign_allocERS8_ called 1 returned 100% blocks executed 100%
        1:  385:    void __move_assign_alloc(__vector_base& __c)
        1:  385-block  0
        -:  386:        _NOEXCEPT_(
        -:  387:            !__alloc_traits::propagate_on_container_move_assignment::value ||
        -:  388:            is_nothrow_move_assignable<allocator_type>::value)
        1:  389:        {__move_assign_alloc(__c, integral_constant<bool,
        1:  390:                      __alloc_traits::propagate_on_container_move_assignment::value>());}
        1:  390-block  0
        -:  391:private:
        -:  392:    _LIBCPP_INLINE_VISIBILITY
        -:  393:    void __copy_assign_alloc(const __vector_base& __c, true_type)
        -:  394:        {
        -:  395:            if (__alloc() != __c.__alloc())
        -:  396:            {
        -:  397:                clear();
        -:  398:                __alloc_traits::deallocate(__alloc(), __begin_, capacity());
        -:  399:                __begin_ = __end_ = __end_cap() = nullptr;
        -:  400:            }
        -:  401:            __alloc() = __c.__alloc();
        -:  402:        }
        -:  403:
        -:  404:    _LIBCPP_INLINE_VISIBILITY
        -:  405:    void __copy_assign_alloc(const __vector_base&, false_type)
        -:  406:        {}
        -:  407:
        -:  408:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE19__move_assign_allocERS8_NS_17integral_constantIbLb1EEE called 1 returned 100% blocks executed 100%
        1:  409:    void __move_assign_alloc(__vector_base& __c, true_type)
        1:  409-block  0
        -:  410:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -:  411:        {
        1:  412:            __alloc() = _VSTD::move(__c.__alloc());
        1:  413:        }
        1:  413-block  0
        -:  414:
        -:  415:    _LIBCPP_INLINE_VISIBILITY
        -:  416:    void __move_assign_alloc(__vector_base&, false_type)
        -:  417:        _NOEXCEPT
        -:  418:        {}
        -:  419:};
        -:  420:
        -:  421:template <class _Tp, class _Allocator>
        -:  422:inline _LIBCPP_INLINE_VISIBILITY
        -:  423:void
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEE17__destruct_at_endEPS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__destruct_at_endEPS6_ called 12 returned 0% blocks executed 85%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE17__destruct_at_endEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEE17__destruct_at_endEPS2_ called 12 returned 0% blocks executed 57%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEE17__destruct_at_endEPd called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEE17__destruct_at_endEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE17__destruct_at_endEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEE17__destruct_at_endEPS8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEE17__destruct_at_endEPm called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEE17__destruct_at_endEPS2_ called 12 returned 0% blocks executed 57%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 2 returned 0% blocks executed 85%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEE17__destruct_at_endEPi called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 1 returned 0% blocks executed 85%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 1 returned 0% blocks executed 85%
       40:  424:__vector_base<_Tp, _Allocator>::__destruct_at_end(pointer __new_last) _NOEXCEPT
    $$$$$:  424-block  0
       12:  424-block  1
    $$$$$:  424-block  2
       12:  424-block  3
    $$$$$:  424-block  4
    $$$$$:  424-block  5
    $$$$$:  424-block  6
    $$$$$:  424-block  7
    $$$$$:  424-block  8
       12:  424-block  9
        2:  424-block 10
    $$$$$:  424-block 11
        1:  424-block 12
    $$$$$:  424-block 13
    $$$$$:  424-block 14
        1:  424-block 15
        -:  425:{
       40:  426:    pointer __soon_to_be_end = __end_;
       70:  427:    while (__new_last != __soon_to_be_end)
    $$$$$:  427-block  0
    $$$$$:  427-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  2
       12:  427-block  3
       29:  427-block  4
branch  2 taken 17
branch  3 taken 12
       17:  427-block  5
    $$$$$:  427-block  6
    $$$$$:  427-block  7
branch  4 never executed
branch  5 never executed
    $$$$$:  427-block  8
       12:  427-block  9
       12:  427-block 10
branch  6 taken 0
branch  7 taken 12
    $$$$$:  427-block 11
    $$$$$:  427-block 12
    $$$$$:  427-block 13
branch  8 never executed
branch  9 never executed
    $$$$$:  427-block 14
    $$$$$:  427-block 15
    $$$$$:  427-block 16
branch 10 never executed
branch 11 never executed
    $$$$$:  427-block 17
    $$$$$:  427-block 18
    $$$$$:  427-block 19
branch 12 never executed
branch 13 never executed
    $$$$$:  427-block 20
    $$$$$:  427-block 21
    $$$$$:  427-block 22
branch 14 never executed
branch 15 never executed
    $$$$$:  427-block 23
    $$$$$:  427-block 24
    $$$$$:  427-block 25
branch 16 never executed
branch 17 never executed
    $$$$$:  427-block 26
       12:  427-block 27
       12:  427-block 28
branch 18 taken 0
branch 19 taken 12
    $$$$$:  427-block 29
        2:  427-block 30
       12:  427-block 31
branch 20 taken 10
branch 21 taken 2
       10:  427-block 32
    $$$$$:  427-block 33
    $$$$$:  427-block 34
branch 22 never executed
branch 23 never executed
    $$$$$:  427-block 35
        1:  427-block 36
        2:  427-block 37
branch 24 taken 1
branch 25 taken 1
        1:  427-block 38
    $$$$$:  427-block 39
    $$$$$:  427-block 40
branch 26 never executed
branch 27 never executed
    $$$$$:  427-block 41
    $$$$$:  427-block 42
    $$$$$:  427-block 43
branch 28 never executed
branch 29 never executed
    $$$$$:  427-block 44
        1:  427-block 45
        3:  427-block 46
branch 30 taken 2
branch 31 taken 1
        2:  427-block 47
       30:  428:        __alloc_traits::destroy(__alloc(), _VSTD::__to_address(--__soon_to_be_end));
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
       17:  428-block  2
branch  2 taken 17
branch  3 taken 0
    $$$$$:  428-block  3
    $$$$$:  428-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  428-block  5
    $$$$$:  428-block  6
branch  6 never executed
branch  7 never executed
    $$$$$:  428-block  7
    $$$$$:  428-block  8
branch  8 never executed
branch  9 never executed
    $$$$$:  428-block  9
    $$$$$:  428-block 10
branch 10 never executed
branch 11 never executed
    $$$$$:  428-block 11
    $$$$$:  428-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:  428-block 13
    $$$$$:  428-block 14
branch 14 never executed
branch 15 never executed
    $$$$$:  428-block 15
    $$$$$:  428-block 16
branch 16 never executed
branch 17 never executed
    $$$$$:  428-block 17
    $$$$$:  428-block 18
branch 18 never executed
branch 19 never executed
    $$$$$:  428-block 19
       10:  428-block 20
branch 20 taken 10
branch 21 taken 0
    $$$$$:  428-block 21
    $$$$$:  428-block 22
branch 22 never executed
branch 23 never executed
    $$$$$:  428-block 23
        1:  428-block 24
branch 24 taken 1
branch 25 taken 0
    $$$$$:  428-block 25
    $$$$$:  428-block 26
branch 26 never executed
branch 27 never executed
    $$$$$:  428-block 27
    $$$$$:  428-block 28
branch 28 never executed
branch 29 never executed
    $$$$$:  428-block 29
        2:  428-block 30
branch 30 taken 2
branch 31 taken 0
    $$$$$:  428-block 31
       40:  429:    __end_ = __new_last;
       40:  430:}
    $$$$$:  430-block  0
       12:  430-block  1
    $$$$$:  430-block  2
       12:  430-block  3
    $$$$$:  430-block  4
    $$$$$:  430-block  5
    $$$$$:  430-block  6
    $$$$$:  430-block  7
    $$$$$:  430-block  8
       12:  430-block  9
        2:  430-block 10
    $$$$$:  430-block 11
        1:  430-block 12
    $$$$$:  430-block 13
    $$$$$:  430-block 14
        1:  430-block 15
        -:  431:
        -:  432:template <class _Tp, class _Allocator>
        -:  433:inline _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2Ev called 17 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEEC2Ev called 1 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEEC2Ev called 1 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEEC2Ev called 13 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEEC2Ev called 13 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEEC2Ev called 2 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEEC2Ev called 3 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEEC2Ev called 1 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEEC2Ev called 1 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEC2Ev called 0 returned 0% blocks executed 0%
       52:  434:__vector_base<_Tp, _Allocator>::__vector_base()
    $$$$$:  434-block  0
       17:  434-block  1
        1:  434-block  2
        1:  434-block  3
       13:  434-block  4
    $$$$$:  434-block  5
    $$$$$:  434-block  6
    $$$$$:  434-block  7
    $$$$$:  434-block  8
    $$$$$:  434-block  9
       13:  434-block 10
        2:  434-block 11
        3:  434-block 12
        1:  434-block 13
        1:  434-block 14
    $$$$$:  434-block 15
        -:  435:        _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
       52:  436:    : __begin_(nullptr),
       52:  437:      __end_(nullptr),
       52:  438:      __end_cap_(nullptr, __default_init_tag())
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
       17:  438-block  1
branch  2 taken 17
branch  3 taken 0
    $$$$$:  438-block  2
        1:  438-block  3
branch  4 taken 1
branch  5 taken 0
    $$$$$:  438-block  4
        1:  438-block  5
branch  6 taken 1
branch  7 taken 0
    $$$$$:  438-block  6
       13:  438-block  7
branch  8 taken 13
branch  9 taken 0
    $$$$$:  438-block  8
    $$$$$:  438-block  9
branch 10 never executed
branch 11 never executed
    $$$$$:  438-block 10
    $$$$$:  438-block 11
branch 12 never executed
branch 13 never executed
    $$$$$:  438-block 12
    $$$$$:  438-block 13
branch 14 never executed
branch 15 never executed
    $$$$$:  438-block 14
    $$$$$:  438-block 15
branch 16 never executed
branch 17 never executed
    $$$$$:  438-block 16
    $$$$$:  438-block 17
branch 18 never executed
branch 19 never executed
    $$$$$:  438-block 18
       13:  438-block 19
branch 20 taken 13
branch 21 taken 0
    $$$$$:  438-block 20
        2:  438-block 21
branch 22 taken 2
branch 23 taken 0
    $$$$$:  438-block 22
        3:  438-block 23
branch 24 taken 3
branch 25 taken 0
    $$$$$:  438-block 24
        1:  438-block 25
branch 26 taken 1
branch 27 taken 0
    $$$$$:  438-block 26
        1:  438-block 27
branch 28 taken 1
branch 29 taken 0
    $$$$$:  438-block 28
    $$$$$:  438-block 29
branch 30 never executed
branch 31 never executed
    $$$$$:  438-block 30
       52:  439:{
       52:  440:}
    $$$$$:  440-block  0
       17:  440-block  1
        1:  440-block  2
        1:  440-block  3
       13:  440-block  4
    $$$$$:  440-block  5
    $$$$$:  440-block  6
    $$$$$:  440-block  7
    $$$$$:  440-block  8
    $$$$$:  440-block  9
       13:  440-block 10
        2:  440-block 11
        3:  440-block 12
        1:  440-block 13
        1:  440-block 14
    $$$$$:  440-block 15
        -:  441:
        -:  442:template <class _Tp, class _Allocator>
        -:  443:inline _LIBCPP_INLINE_VISIBILITY
        -:  444:__vector_base<_Tp, _Allocator>::__vector_base(const allocator_type& __a)
        -:  445:    : __begin_(nullptr),
        -:  446:      __end_(nullptr),
        -:  447:      __end_cap_(nullptr, __a)
        -:  448:{
        -:  449:}
        -:  450:
        -:  451:#ifndef _LIBCPP_CXX03_LANG
        -:  452:template <class _Tp, class _Allocator>
        -:  453:inline _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2EOS7_ called 2 returned 0% blocks executed 75%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEEC2EOS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2EOS6_ called 0 returned 0% blocks executed 0%
        2:  454:__vector_base<_Tp, _Allocator>::__vector_base(allocator_type&& __a) _NOEXCEPT
        2:  454-block  0
    $$$$$:  454-block  1
    $$$$$:  454-block  2
        2:  455:    : __begin_(nullptr),
        2:  456:      __end_(nullptr),
        4:  457:      __end_cap_(nullptr, std::move(__a)) {}
        2:  457-block  0
branch  0 taken 2
branch  1 taken 0
        2:  457-block  1
branch  2 taken 2
branch  3 taken 0
        2:  457-block  2
    $$$$$:  457-block  3
    $$$$$:  457-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  457-block  5
branch  6 never executed
branch  7 never executed
    $$$$$:  457-block  6
    $$$$$:  457-block  7
    $$$$$:  457-block  8
branch  8 never executed
branch  9 never executed
    $$$$$:  457-block  9
branch 10 never executed
branch 11 never executed
    $$$$$:  457-block 10
    $$$$$:  457-block 11
        -:  458:#endif
        -:  459:
        -:  460:template <class _Tp, class _Allocator>
function _ZNSt3__113__vector_baseIPcNS_9allocatorIS1_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev called 19 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEED2Ev called 1 returned 100% blocks executed 75%
function _ZNSt3__113__vector_baseIN7testing14TestPartResultENS_9allocatorIS2_EEED2Ev called 13 returned 100% blocks executed 75%
function _ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIdNS_9allocatorIdEEEENS2_IS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseINS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEENS6_IS8_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseImNS_9allocatorImEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIN7testing12TestPropertyENS_9allocatorIS2_EEED2Ev called 13 returned 100% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing8TestInfoENS_9allocatorIS3_EEED2Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing17TestEventListenerENS_9allocatorIS3_EEED2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__113__vector_baseIN7testing8internal9TraceInfoENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__113__vector_baseIPN7testing11EnvironmentENS_9allocatorIS3_EEED2Ev called 1 returned 100% blocks executed 75%
function _ZNSt3__113__vector_baseIPN7testing9TestSuiteENS_9allocatorIS3_EEED2Ev called 1 returned 100% blocks executed 100%
       51:  461:__vector_base<_Tp, _Allocator>::~__vector_base()
    $$$$$:  461-block  0
       19:  461-block  1
        1:  461-block  2
       13:  461-block  3
    $$$$$:  461-block  4
    $$$$$:  461-block  5
    $$$$$:  461-block  6
    $$$$$:  461-block  7
    $$$$$:  461-block  8
       13:  461-block  9
        2:  461-block 10
    $$$$$:  461-block 11
        1:  461-block 12
    $$$$$:  461-block 13
        1:  461-block 14
        1:  461-block 15
        -:  462:{
       51:  463:    if (__begin_ != nullptr)
    $$$$$:  463-block  0
branch  0 never executed
branch  1 never executed
       19:  463-block  1
branch  2 taken 11
branch  3 taken 8
        1:  463-block  2
branch  4 taken 0
branch  5 taken 1
       13:  463-block  3
branch  6 taken 0
branch  7 taken 13
    $$$$$:  463-block  4
branch  8 never executed
branch  9 never executed
    $$$$$:  463-block  5
branch 10 never executed
branch 11 never executed
    $$$$$:  463-block  6
branch 12 never executed
branch 13 never executed
    $$$$$:  463-block  7
branch 14 never executed
branch 15 never executed
    $$$$$:  463-block  8
branch 16 never executed
branch 17 never executed
       13:  463-block  9
branch 18 taken 0
branch 19 taken 13
        2:  463-block 10
branch 20 taken 2
branch 21 taken 0
    $$$$$:  463-block 11
branch 22 never executed
branch 23 never executed
        1:  463-block 12
branch 24 taken 1
branch 25 taken 0
    $$$$$:  463-block 13
branch 26 never executed
branch 27 never executed
        1:  463-block 14
branch 28 taken 0
branch 29 taken 1
        1:  463-block 15
branch 30 taken 1
branch 31 taken 0
        -:  464:    {
       15:  465:        clear();
       15:  466:        __alloc_traits::deallocate(__alloc(), __begin_, capacity());
       15:  467:    }
    $$$$$:  467-block  0
       11:  467-block  1
    $$$$$:  467-block  2
    $$$$$:  467-block  3
    $$$$$:  467-block  4
    $$$$$:  467-block  5
    $$$$$:  467-block  6
    $$$$$:  467-block  7
    $$$$$:  467-block  8
    $$$$$:  467-block  9
        2:  467-block 10
    $$$$$:  467-block 11
        1:  467-block 12
    $$$$$:  467-block 13
    $$$$$:  467-block 14
        1:  467-block 15
       51:  468:}
    $$$$$:  468-block  0
       19:  468-block  1
        1:  468-block  2
       13:  468-block  3
    $$$$$:  468-block  4
    $$$$$:  468-block  5
    $$$$$:  468-block  6
    $$$$$:  468-block  7
    $$$$$:  468-block  8
       13:  468-block  9
        2:  468-block 10
    $$$$$:  468-block 11
        1:  468-block 12
    $$$$$:  468-block 13
        1:  468-block 14
        1:  468-block 15
        -:  469:
        -:  470:template <class _Tp, class _Allocator /* = allocator<_Tp> */>
        -:  471:class _LIBCPP_TEMPLATE_VIS vector
        -:  472:    : private __vector_base<_Tp, _Allocator>
        -:  473:{
        -:  474:private:
        -:  475:    typedef __vector_base<_Tp, _Allocator>           __base;
        -:  476:    typedef allocator<_Tp>                           __default_allocator_type;
        -:  477:public:
        -:  478:    typedef vector                                   __self;
        -:  479:    typedef _Tp                                      value_type;
        -:  480:    typedef _Allocator                               allocator_type;
        -:  481:    typedef typename __base::__alloc_traits          __alloc_traits;
        -:  482:    typedef typename __base::reference               reference;
        -:  483:    typedef typename __base::const_reference         const_reference;
        -:  484:    typedef typename __base::size_type               size_type;
        -:  485:    typedef typename __base::difference_type         difference_type;
        -:  486:    typedef typename __base::pointer                 pointer;
        -:  487:    typedef typename __base::const_pointer           const_pointer;
        -:  488:    typedef __wrap_iter<pointer>                     iterator;
        -:  489:    typedef __wrap_iter<const_pointer>               const_iterator;
        -:  490:    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;
        -:  491:    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;
        -:  492:
        -:  493:    static_assert((is_same<typename allocator_type::value_type, value_type>::value),
        -:  494:                  "Allocator::value_type must be same type as value_type");
        -:  495:
        -:  496:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1Ev called 17 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEEC1Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEEC1Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEC1Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEEC1Ev called 3 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEEC1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEEC2Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2Ev called 17 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEEC2Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEC2Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ev called 3 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEC1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEC2Ev called 0 returned 0% blocks executed 0%
      104:  497:    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
       17:  497-block  0
    $$$$$:  497-block  1
    $$$$$:  497-block  2
       13:  497-block  3
       13:  497-block  4
        2:  497-block  5
        3:  497-block  6
        1:  497-block  7
        1:  497-block  8
    $$$$$:  497-block  9
    $$$$$:  497-block 10
        1:  497-block 11
        1:  497-block 12
        1:  497-block 13
        1:  497-block 14
       13:  497-block 15
       17:  497-block 16
    $$$$$:  497-block 17
    $$$$$:  497-block 18
       13:  497-block 19
        2:  497-block 20
        3:  497-block 21
        1:  497-block 22
        1:  497-block 23
    $$$$$:  497-block 24
    $$$$$:  497-block 25
      104:  498:        {
        -:  499:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  500:            __get_db()->__insert_c(this);
        -:  501:#endif
      104:  502:        }
       17:  502-block  0
    $$$$$:  502-block  1
    $$$$$:  502-block  2
       13:  502-block  3
       13:  502-block  4
        2:  502-block  5
        3:  502-block  6
        1:  502-block  7
        1:  502-block  8
    $$$$$:  502-block  9
    $$$$$:  502-block 10
        1:  502-block 11
        1:  502-block 12
        1:  502-block 13
        1:  502-block 14
       13:  502-block 15
       17:  502-block 16
    $$$$$:  502-block 17
    $$$$$:  502-block 18
       13:  502-block 19
        2:  502-block 20
        3:  502-block 21
        1:  502-block 22
        1:  502-block 23
    $$$$$:  502-block 24
    $$$$$:  502-block 25
        -:  503:    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)
        -:  504:#if _LIBCPP_STD_VER <= 14
        -:  505:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -:  506:#else
        -:  507:        _NOEXCEPT
        -:  508:#endif
        -:  509:        : __base(__a)
        -:  510:    {
        -:  511:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  512:        __get_db()->__insert_c(this);
        -:  513:#endif
        -:  514:    }
    #####:  515:    explicit vector(size_type __n);
        -:  516:#if _LIBCPP_STD_VER > 11
        -:  517:    explicit vector(size_type __n, const allocator_type& __a);
        -:  518:#endif
    #####:  519:    vector(size_type __n, const value_type& __x);
        -:  520:    vector(size_type __n, const value_type& __x, const allocator_type& __a);
        -:  521:    template <class _InputIterator>
        -:  522:        vector(_InputIterator __first,
        -:  523:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  524:                                 !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  525:                                 is_constructible<
        -:  526:                                    value_type,
        -:  527:                                    typename iterator_traits<_InputIterator>::reference>::value,
        -:  528:                                 _InputIterator>::type __last);
        -:  529:    template <class _InputIterator>
        -:  530:        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -:  531:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  532:                                 !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  533:                                 is_constructible<
        -:  534:                                    value_type,
        -:  535:                                    typename iterator_traits<_InputIterator>::reference>::value>::type* = 0);
        -:  536:    template <class _ForwardIterator>
    #####:  537:        vector(_ForwardIterator __first,
        -:  538:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  539:                                 is_constructible<
        -:  540:                                    value_type,
        -:  541:                                    typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  542:                                 _ForwardIterator>::type __last);
        -:  543:    template <class _ForwardIterator>
        -:  544:        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -:  545:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  546:                                 is_constructible<
        -:  547:                                    value_type,
        -:  548:                                    typename iterator_traits<_ForwardIterator>::reference>::value>::type* = 0);
        -:  549:
        -:  550:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED1Ev called 19 returned 100% blocks executed 100%
function _ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEED1Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEED1Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEED1Ev called 3 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEED1Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEED1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEED1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEED1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEED1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEED2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEED2Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev called 19 returned 100% blocks executed 100%
function _ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEED2Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEED2Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev called 3 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEED2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEED2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEED2Ev called 1 returned 100% blocks executed 100%
      108:  551:    ~vector()
       19:  551-block  0
    $$$$$:  551-block  1
    $$$$$:  551-block  2
    $$$$$:  551-block  3
    $$$$$:  551-block  4
    $$$$$:  551-block  5
       13:  551-block  6
       13:  551-block  7
        3:  551-block  8
        2:  551-block  9
        1:  551-block 10
        1:  551-block 11
        1:  551-block 12
    $$$$$:  551-block 13
    $$$$$:  551-block 14
        1:  551-block 15
        1:  551-block 16
       13:  551-block 17
       19:  551-block 18
    $$$$$:  551-block 19
    $$$$$:  551-block 20
    $$$$$:  551-block 21
    $$$$$:  551-block 22
    $$$$$:  551-block 23
       13:  551-block 24
        2:  551-block 25
        3:  551-block 26
        1:  551-block 27
    $$$$$:  551-block 28
    $$$$$:  551-block 29
        1:  551-block 30
        1:  551-block 31
       54:  552:    {
       54:  553:        __annotate_delete();
        -:  554:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  555:        __get_db()->__erase_c(this);
        -:  556:#endif
      108:  557:    }
       19:  557-block  0
    $$$$$:  557-block  1
    $$$$$:  557-block  2
    $$$$$:  557-block  3
    $$$$$:  557-block  4
    $$$$$:  557-block  5
       13:  557-block  6
       13:  557-block  7
        3:  557-block  8
        2:  557-block  9
        1:  557-block 10
        1:  557-block 11
        1:  557-block 12
    $$$$$:  557-block 13
    $$$$$:  557-block 14
        1:  557-block 15
        1:  557-block 16
       13:  557-block 17
       19:  557-block 18
    $$$$$:  557-block 19
    $$$$$:  557-block 20
    $$$$$:  557-block 21
    $$$$$:  557-block 22
    $$$$$:  557-block 23
       13:  557-block 24
        2:  557-block 25
        3:  557-block 26
        1:  557-block 27
    $$$$$:  557-block 28
    $$$$$:  557-block 29
        1:  557-block 30
        1:  557-block 31
        -:  558:
        -:  559:    vector(const vector& __x);
        -:  560:    vector(const vector& __x, const allocator_type& __a);
        -:  561:    _LIBCPP_INLINE_VISIBILITY
        -:  562:    vector& operator=(const vector& __x);
        -:  563:
        -:  564:#ifndef _LIBCPP_CXX03_LANG
        -:  565:    _LIBCPP_INLINE_VISIBILITY
        -:  566:    vector(initializer_list<value_type> __il);
        -:  567:
        -:  568:    _LIBCPP_INLINE_VISIBILITY
        -:  569:    vector(initializer_list<value_type> __il, const allocator_type& __a);
        -:  570:
        -:  571:    _LIBCPP_INLINE_VISIBILITY
        -:  572:    vector(vector&& __x)
        -:  573:#if _LIBCPP_STD_VER > 14
        -:  574:        _NOEXCEPT;
        -:  575:#else
        -:  576:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -:  577:#endif
        -:  578:
        -:  579:    _LIBCPP_INLINE_VISIBILITY
        -:  580:    vector(vector&& __x, const allocator_type& __a);
        -:  581:    _LIBCPP_INLINE_VISIBILITY
        -:  582:    vector& operator=(vector&& __x)
        -:  583:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));
        -:  584:
        -:  585:    _LIBCPP_INLINE_VISIBILITY
        -:  586:    vector& operator=(initializer_list<value_type> __il)
        -:  587:        {assign(__il.begin(), __il.end()); return *this;}
        -:  588:
        -:  589:#endif  // !_LIBCPP_CXX03_LANG
        -:  590:
        -:  591:    template <class _InputIterator>
        -:  592:        typename enable_if
        -:  593:        <
        -:  594:             __is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  595:            !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  596:            is_constructible<
        -:  597:                 value_type,
        -:  598:                 typename iterator_traits<_InputIterator>::reference>::value,
        -:  599:            void
        -:  600:        >::type
        -:  601:        assign(_InputIterator __first, _InputIterator __last);
        -:  602:    template <class _ForwardIterator>
        -:  603:        typename enable_if
        -:  604:        <
        -:  605:            __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  606:            is_constructible<
        -:  607:                 value_type,
        -:  608:                 typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  609:            void
        -:  610:        >::type
        -:  611:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -:  612:
        -:  613:    void assign(size_type __n, const_reference __u);
        -:  614:
        -:  615:#ifndef _LIBCPP_CXX03_LANG
        -:  616:    _LIBCPP_INLINE_VISIBILITY
        -:  617:    void assign(initializer_list<value_type> __il)
        -:  618:        {assign(__il.begin(), __il.end());}
        -:  619:#endif
        -:  620:
        -:  621:    _LIBCPP_INLINE_VISIBILITY
        -:  622:    allocator_type get_allocator() const _NOEXCEPT
        -:  623:        {return this->__alloc();}
        -:  624:
        -:  625:    _LIBCPP_INLINE_VISIBILITY iterator               begin() _NOEXCEPT;
        -:  626:    _LIBCPP_INLINE_VISIBILITY const_iterator         begin()   const _NOEXCEPT;
        -:  627:    _LIBCPP_INLINE_VISIBILITY iterator               end() _NOEXCEPT;
        -:  628:    _LIBCPP_INLINE_VISIBILITY const_iterator         end()     const _NOEXCEPT;
        -:  629:
        -:  630:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE6rbeginEv called 10 returned 0% blocks executed 75%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE6rbeginEv called 1 returned 0% blocks executed 75%
       11:  631:    reverse_iterator       rbegin() _NOEXCEPT
       10:  631-block  0
        1:  631-block  1
       11:  632:        {return       reverse_iterator(end());}
       10:  632-block  0
branch  0 taken 10
branch  1 taken 0
       10:  632-block  1
    $$$$$:  632-block  2
        1:  632-block  3
branch  2 taken 1
branch  3 taken 0
        1:  632-block  4
    $$$$$:  632-block  5
        -:  633:    _LIBCPP_INLINE_VISIBILITY
        -:  634:    const_reverse_iterator rbegin()  const _NOEXCEPT
        -:  635:        {return const_reverse_iterator(end());}
        -:  636:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE4rendEv called 20 returned 0% blocks executed 75%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE4rendEv called 1 returned 0% blocks executed 75%
       21:  637:    reverse_iterator       rend() _NOEXCEPT
       20:  637-block  0
        1:  637-block  1
       21:  638:        {return       reverse_iterator(begin());}
       20:  638-block  0
branch  0 taken 20
branch  1 taken 0
       20:  638-block  1
    $$$$$:  638-block  2
        1:  638-block  3
branch  2 taken 1
branch  3 taken 0
        1:  638-block  4
    $$$$$:  638-block  5
        -:  639:    _LIBCPP_INLINE_VISIBILITY
        -:  640:    const_reverse_iterator rend()    const _NOEXCEPT
        -:  641:        {return const_reverse_iterator(begin());}
        -:  642:
        -:  643:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE6cbeginEv called 0 returned 0% blocks executed 0%
    #####:  644:    const_iterator         cbegin()  const _NOEXCEPT
    $$$$$:  644-block  0
    #####:  645:        {return begin();}
    $$$$$:  645-block  0
        -:  646:    _LIBCPP_INLINE_VISIBILITY
        -:  647:    const_iterator         cend()    const _NOEXCEPT
        -:  648:        {return end();}
        -:  649:    _LIBCPP_INLINE_VISIBILITY
        -:  650:    const_reverse_iterator crbegin() const _NOEXCEPT
        -:  651:        {return rbegin();}
        -:  652:    _LIBCPP_INLINE_VISIBILITY
        -:  653:    const_reverse_iterator crend()   const _NOEXCEPT
        -:  654:        {return rend();}
        -:  655:
        -:  656:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv called 74 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE4sizeEv called 146 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE4sizeEv called 30 returned 100% blocks executed 100%
function _ZNKSt3__16vectorImNS_9allocatorImEEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE4sizeEv called 37 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE4sizeEv called 58 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE4sizeEv called 59 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE4sizeEv called 60 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE4sizeEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE4sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE4sizeEv called 1 returned 100% blocks executed 100%
      466:  657:    size_type size() const _NOEXCEPT
       74:  657-block  0
      146:  657-block  1
       30:  657-block  2
    $$$$$:  657-block  3
    $$$$$:  657-block  4
    $$$$$:  657-block  5
    $$$$$:  657-block  6
       37:  657-block  7
       58:  657-block  8
       59:  657-block  9
       60:  657-block 10
    $$$$$:  657-block 11
    $$$$$:  657-block 12
        1:  657-block 13
    $$$$$:  657-block 14
        1:  657-block 15
      466:  658:        {return static_cast<size_type>(this->__end_ - this->__begin_);}
       74:  658-block  0
      146:  658-block  1
       30:  658-block  2
    $$$$$:  658-block  3
    $$$$$:  658-block  4
    $$$$$:  658-block  5
    $$$$$:  658-block  6
       37:  658-block  7
       58:  658-block  8
       59:  658-block  9
       60:  658-block 10
    $$$$$:  658-block 11
    $$$$$:  658-block 12
        1:  658-block 13
    $$$$$:  658-block 14
        1:  658-block 15
        -:  659:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8capacityEv called 106 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE8capacityEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE8capacityEv called 38 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE8capacityEv called 38 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE8capacityEv called 44 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE8capacityEv called 16 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE8capacityEv called 7 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE8capacityEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8capacityEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE8capacityEv called 12 returned 100% blocks executed 100%
      265:  660:    size_type capacity() const _NOEXCEPT
    $$$$$:  660-block  0
      106:  660-block  1
        2:  660-block  2
       38:  660-block  3
    $$$$$:  660-block  4
    $$$$$:  660-block  5
    $$$$$:  660-block  6
    $$$$$:  660-block  7
    $$$$$:  660-block  8
       38:  660-block  9
       44:  660-block 10
       16:  660-block 11
        7:  660-block 12
        2:  660-block 13
    $$$$$:  660-block 14
       12:  660-block 15
      265:  661:        {return __base::capacity();}
    $$$$$:  661-block  0
      106:  661-block  1
        2:  661-block  2
       38:  661-block  3
    $$$$$:  661-block  4
    $$$$$:  661-block  5
    $$$$$:  661-block  6
    $$$$$:  661-block  7
    $$$$$:  661-block  8
       38:  661-block  9
       44:  661-block 10
       16:  661-block 11
        7:  661-block 12
        2:  661-block 13
    $$$$$:  661-block 14
       12:  661-block 15
        -:  662:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  663:    bool empty() const _NOEXCEPT
        -:  664:        {return this->__begin_ == this->__end_;}
        -:  665:    size_type max_size() const _NOEXCEPT;
        -:  666:    void reserve(size_type __n);
        -:  667:    void shrink_to_fit() _NOEXCEPT;
        -:  668:
        -:  669:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n) _NOEXCEPT;
        -:  670:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const _NOEXCEPT;
        -:  671:    reference       at(size_type __n);
        -:  672:    const_reference at(size_type __n) const;
        -:  673:
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5frontEv called 1 returned 100% blocks executed 100%
        1:  674:    _LIBCPP_INLINE_VISIBILITY reference       front() _NOEXCEPT
        1:  674-block  0
        -:  675:    {
        -:  676:        _LIBCPP_ASSERT(!empty(), "front() called for empty vector");
        1:  677:        return *this->__begin_;
        1:  677-block  0
        -:  678:    }
        -:  679:    _LIBCPP_INLINE_VISIBILITY const_reference front() const _NOEXCEPT
        -:  680:    {
        -:  681:        _LIBCPP_ASSERT(!empty(), "front() called for empty vector");
        -:  682:        return *this->__begin_;
        -:  683:    }
        -:  684:    _LIBCPP_INLINE_VISIBILITY reference       back() _NOEXCEPT
        -:  685:    {
        -:  686:        _LIBCPP_ASSERT(!empty(), "back() called for empty vector");
        -:  687:        return *(this->__end_ - 1);
        -:  688:    }
        -:  689:    _LIBCPP_INLINE_VISIBILITY const_reference back()  const _NOEXCEPT
        -:  690:    {
        -:  691:        _LIBCPP_ASSERT(!empty(), "back() called for empty vector");
        -:  692:        return *(this->__end_ - 1);
        -:  693:    }
        -:  694:
        -:  695:    _LIBCPP_INLINE_VISIBILITY
        -:  696:    value_type*       data() _NOEXCEPT
        -:  697:        {return _VSTD::__to_address(this->__begin_);}
        -:  698:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4dataEv called 188 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE4dataEv called 4 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE4dataEv called 100 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE4dataEv called 100 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE4dataEv called 72 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE4dataEv called 12 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE4dataEv called 12 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE4dataEv called 4 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE4dataEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE4dataEv called 20 returned 100% blocks executed 100%
      512:  699:    const value_type* data() const _NOEXCEPT
    $$$$$:  699-block  0
      188:  699-block  1
        4:  699-block  2
      100:  699-block  3
    $$$$$:  699-block  4
    $$$$$:  699-block  5
    $$$$$:  699-block  6
    $$$$$:  699-block  7
    $$$$$:  699-block  8
      100:  699-block  9
       72:  699-block 10
       12:  699-block 11
       12:  699-block 12
        4:  699-block 13
    $$$$$:  699-block 14
       20:  699-block 15
      512:  700:        {return _VSTD::__to_address(this->__begin_);}
    $$$$$:  700-block  0
      188:  700-block  1
        4:  700-block  2
      100:  700-block  3
    $$$$$:  700-block  4
    $$$$$:  700-block  5
    $$$$$:  700-block  6
    $$$$$:  700-block  7
    $$$$$:  700-block  8
      100:  700-block  9
       72:  700-block 10
       12:  700-block 11
       12:  700-block 12
        4:  700-block 13
    $$$$$:  700-block 14
       20:  700-block 15
        -:  701:
        -:  702:#ifdef _LIBCPP_CXX03_LANG
        -:  703:    _LIBCPP_INLINE_VISIBILITY
        -:  704:    void __emplace_back(const value_type& __x) { push_back(__x); }
        -:  705:#else
        -:  706:    template <class _Arg>
        -:  707:    _LIBCPP_INLINE_VISIBILITY
        -:  708:    void __emplace_back(_Arg&& __arg) {
        -:  709:      emplace_back(_VSTD::forward<_Arg>(__arg));
        -:  710:    }
        -:  711:#endif
        -:  712:
        -:  713:    _LIBCPP_INLINE_VISIBILITY void push_back(const_reference __x);
        -:  714:
        -:  715:#ifndef _LIBCPP_CXX03_LANG
        -:  716:    _LIBCPP_INLINE_VISIBILITY void push_back(value_type&& __x);
        -:  717:
        -:  718:    template <class... _Args>
        -:  719:        _LIBCPP_INLINE_VISIBILITY
        -:  720:#if _LIBCPP_STD_VER > 14
        -:  721:        reference emplace_back(_Args&&... __args);
        -:  722:#else
        -:  723:        void      emplace_back(_Args&&... __args);
        -:  724:#endif
        -:  725:#endif // !_LIBCPP_CXX03_LANG
        -:  726:
        -:  727:    _LIBCPP_INLINE_VISIBILITY
        -:  728:    void pop_back();
        -:  729:
        -:  730:    iterator insert(const_iterator __position, const_reference __x);
        -:  731:
        -:  732:#ifndef _LIBCPP_CXX03_LANG
        -:  733:    iterator insert(const_iterator __position, value_type&& __x);
        -:  734:    template <class... _Args>
        -:  735:        iterator emplace(const_iterator __position, _Args&&... __args);
        -:  736:#endif  // !_LIBCPP_CXX03_LANG
        -:  737:
        -:  738:    iterator insert(const_iterator __position, size_type __n, const_reference __x);
        -:  739:    template <class _InputIterator>
        -:  740:        typename enable_if
        -:  741:        <
        -:  742:             __is_cpp17_input_iterator  <_InputIterator>::value &&
        -:  743:            !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -:  744:            is_constructible<
        -:  745:                 value_type,
        -:  746:                 typename iterator_traits<_InputIterator>::reference>::value,
        -:  747:            iterator
        -:  748:        >::type
        -:  749:        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
        -:  750:    template <class _ForwardIterator>
        -:  751:        typename enable_if
        -:  752:        <
        -:  753:            __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -:  754:            is_constructible<
        -:  755:                 value_type,
        -:  756:                 typename iterator_traits<_ForwardIterator>::reference>::value,
        -:  757:            iterator
        -:  758:        >::type
        -:  759:        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
        -:  760:
        -:  761:#ifndef _LIBCPP_CXX03_LANG
        -:  762:    _LIBCPP_INLINE_VISIBILITY
        -:  763:    iterator insert(const_iterator __position, initializer_list<value_type> __il)
        -:  764:        {return insert(__position, __il.begin(), __il.end());}
        -:  765:#endif
        -:  766:
        -:  767:    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);
        -:  768:    iterator erase(const_iterator __first, const_iterator __last);
        -:  769:
        -:  770:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE5clearEv called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE5clearEv called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5clearEv called 1 returned 100% blocks executed 100%
       25:  771:    void clear() _NOEXCEPT
       12:  771-block  0
       12:  771-block  1
        1:  771-block  2
        -:  772:    {
       25:  773:        size_type __old_size = size();
       25:  774:        __base::clear();
       25:  775:        __annotate_shrink(__old_size);
       25:  776:        __invalidate_all_iterators();
       25:  777:    }
       12:  777-block  0
       12:  777-block  1
        1:  777-block  2
        -:  778:
        -:  779:    void resize(size_type __sz);
        -:  780:    void resize(size_type __sz, const_reference __x);
        -:  781:
        -:  782:    void swap(vector&)
        -:  783:#if _LIBCPP_STD_VER >= 14
        -:  784:        _NOEXCEPT;
        -:  785:#else
        -:  786:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -:  787:                    __is_nothrow_swappable<allocator_type>::value);
        -:  788:#endif
        -:  789:
        -:  790:    bool __invariants() const;
        -:  791:
        -:  792:#if _LIBCPP_DEBUG_LEVEL >= 2
        -:  793:
        -:  794:    bool __dereferenceable(const const_iterator* __i) const;
        -:  795:    bool __decrementable(const const_iterator* __i) const;
        -:  796:    bool __addable(const const_iterator* __i, ptrdiff_t __n) const;
        -:  797:    bool __subscriptable(const const_iterator* __i, ptrdiff_t __n) const;
        -:  798:
        -:  799:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -:  800:
        -:  801:private:
        -:  802:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -:  803:    _LIBCPP_INLINE_VISIBILITY void __invalidate_iterators_past(pointer __new_last);
        -:  804:    void __vallocate(size_type __n);
        -:  805:    void __vdeallocate() _NOEXCEPT;
        -:  806:    _LIBCPP_INLINE_VISIBILITY size_type __recommend(size_type __new_size) const;
        -:  807:    void __construct_at_end(size_type __n);
        -:  808:    _LIBCPP_INLINE_VISIBILITY
        -:  809:    void __construct_at_end(size_type __n, const_reference __x);
        -:  810:    template <class _ForwardIterator>
        -:  811:        typename enable_if
        -:  812:        <
        -:  813:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -:  814:            void
        -:  815:        >::type
        -:  816:        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n);
        -:  817:    void __append(size_type __n);
        -:  818:    void __append(size_type __n, const_reference __x);
        -:  819:    _LIBCPP_INLINE_VISIBILITY
        -:  820:    iterator       __make_iter(pointer __p) _NOEXCEPT;
        -:  821:    _LIBCPP_INLINE_VISIBILITY
        -:  822:    const_iterator __make_iter(const_pointer __p) const _NOEXCEPT;
        -:  823:    void __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v);
        -:  824:    pointer __swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p);
        -:  825:    void __move_range(pointer __from_s, pointer __from_e, pointer __to);
        -:  826:    void __move_assign(vector& __c, true_type)
        -:  827:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -:  828:    void __move_assign(vector& __c, false_type)
        -:  829:        _NOEXCEPT_(__alloc_traits::is_always_equal::value);
        -:  830:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__destruct_at_endEPS3_ called 0 returned 0% blocks executed 0%
    #####:  831:    void __destruct_at_end(pointer __new_last) _NOEXCEPT
    $$$$$:  831-block  0
    $$$$$:  831-block  1
        -:  832:    {
    #####:  833:        __invalidate_iterators_past(__new_last);
    $$$$$:  833-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  833-block  1
    $$$$$:  833-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:  833-block  3
    #####:  834:        size_type __old_size = size();
    #####:  835:        __base::__destruct_at_end(__new_last);
    #####:  836:        __annotate_shrink(__old_size);
    #####:  837:    }
    $$$$$:  837-block  0
    $$$$$:  837-block  1
        -:  838:
        -:  839:#ifndef _LIBCPP_CXX03_LANG
        -:  840:    template <class _Up>
        -:  841:    _LIBCPP_INLINE_VISIBILITY
        -:  842:    inline void __push_back_slow_path(_Up&& __x);
        -:  843:
        -:  844:    template <class... _Args>
        -:  845:    _LIBCPP_INLINE_VISIBILITY
        -:  846:    inline void __emplace_back_slow_path(_Args&&... __args);
        -:  847:#else
        -:  848:    template <class _Up>
        -:  849:    _LIBCPP_INLINE_VISIBILITY
        -:  850:    inline void __push_back_slow_path(_Up& __x);
        -:  851:#endif
        -:  852:
        -:  853:    // The following functions are no-ops outside of AddressSanitizer mode.
        -:  854:    // We call annotatations only for the default Allocator because other allocators
        -:  855:    // may not meet the AddressSanitizer alignment constraints.
        -:  856:    // See the documentation for __sanitizer_annotate_contiguous_container for more details.
        -:  857:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  858:    void __annotate_contiguous_container(const void *__beg, const void *__end,
        -:  859:                                         const void *__old_mid,
        -:  860:                                         const void *__new_mid) const
        -:  861:    {
        -:  862:
        -:  863:      if (__beg && is_same<allocator_type, __default_allocator_type>::value)
        -:  864:        __sanitizer_annotate_contiguous_container(__beg, __end, __old_mid, __new_mid);
        -:  865:    }
        -:  866:#else
        -:  867:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_ called 47 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_ called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_ called 25 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE31__annotate_contiguous_containerEPKvS5_S5_S5_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_ called 25 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 18 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_ called 3 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 3 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_ called 5 returned 100% blocks executed 100%
      128:  868:    void __annotate_contiguous_container(const void*, const void*, const void*,
    $$$$$:  868-block  0
       47:  868-block  1
        1:  868-block  2
       25:  868-block  3
    $$$$$:  868-block  4
    $$$$$:  868-block  5
    $$$$$:  868-block  6
    $$$$$:  868-block  7
    $$$$$:  868-block  8
       25:  868-block  9
       18:  868-block 10
        3:  868-block 11
        3:  868-block 12
        1:  868-block 13
    $$$$$:  868-block 14
        5:  868-block 15
      128:  869:                                         const void*) const _NOEXCEPT {}
    $$$$$:  869-block  0
       47:  869-block  1
        1:  869-block  2
       25:  869-block  3
    $$$$$:  869-block  4
    $$$$$:  869-block  5
    $$$$$:  869-block  6
    $$$$$:  869-block  7
    $$$$$:  869-block  8
       25:  869-block  9
       18:  869-block 10
        3:  869-block 11
        3:  869-block 12
        1:  869-block 13
    $$$$$:  869-block 14
        5:  869-block 15
        -:  870:#endif
        -:  871:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEm called 14 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE14__annotate_newEm called 8 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE14__annotate_newEm called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE14__annotate_newEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE14__annotate_newEm called 2 returned 100% blocks executed 100%
       25:  872:    void __annotate_new(size_type __current_size) const _NOEXCEPT {
    $$$$$:  872-block  0
       14:  872-block  1
    $$$$$:  872-block  2
    $$$$$:  872-block  3
    $$$$$:  872-block  4
    $$$$$:  872-block  5
    $$$$$:  872-block  6
    $$$$$:  872-block  7
    $$$$$:  872-block  8
        8:  872-block  9
    $$$$$:  872-block 10
        1:  872-block 11
    $$$$$:  872-block 12
    $$$$$:  872-block 13
        2:  872-block 14
       50:  873:      __annotate_contiguous_container(data(), data() + capacity(),
       25:  874:                                      data() + capacity(), data() + __current_size);
       25:  875:    }
    $$$$$:  875-block  0
       14:  875-block  1
    $$$$$:  875-block  2
    $$$$$:  875-block  3
    $$$$$:  875-block  4
    $$$$$:  875-block  5
    $$$$$:  875-block  6
    $$$$$:  875-block  7
    $$$$$:  875-block  8
        8:  875-block  9
    $$$$$:  875-block 10
        1:  875-block 11
    $$$$$:  875-block 12
    $$$$$:  875-block 13
        2:  875-block 14
        -:  876:
        -:  877:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv called 32 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE17__annotate_deleteEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE17__annotate_deleteEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE17__annotate_deleteEv called 13 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE17__annotate_deleteEv called 10 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv called 3 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__annotate_deleteEv called 2 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE17__annotate_deleteEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__annotate_deleteEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE17__annotate_deleteEv called 3 returned 100% blocks executed 100%
       78:  878:    void __annotate_delete() const _NOEXCEPT {
    $$$$$:  878-block  0
       32:  878-block  1
        1:  878-block  2
       13:  878-block  3
    $$$$$:  878-block  4
    $$$$$:  878-block  5
    $$$$$:  878-block  6
    $$$$$:  878-block  7
    $$$$$:  878-block  8
       13:  878-block  9
       10:  878-block 10
        3:  878-block 11
        2:  878-block 12
        1:  878-block 13
    $$$$$:  878-block 14
        3:  878-block 15
      156:  879:      __annotate_contiguous_container(data(), data() + capacity(),
       78:  880:                                      data() + size(), data() + capacity());
       78:  881:    }
    $$$$$:  881-block  0
       32:  881-block  1
        1:  881-block  2
       13:  881-block  3
    $$$$$:  881-block  4
    $$$$$:  881-block  5
    $$$$$:  881-block  6
    $$$$$:  881-block  7
    $$$$$:  881-block  8
       13:  881-block  9
       10:  881-block 10
        3:  881-block 11
        2:  881-block 12
        1:  881-block 13
    $$$$$:  881-block 14
        3:  881-block 15
        -:  882:
        -:  883:    _LIBCPP_INLINE_VISIBILITY
        -:  884:    void __annotate_increase(size_type __n) const _NOEXCEPT
        -:  885:    {
        -:  886:      __annotate_contiguous_container(data(), data() + capacity(),
        -:  887:                                      data() + size(), data() + size() + __n);
        -:  888:    }
        -:  889:
        -:  890:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEm called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE17__annotate_shrinkEm called 12 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE17__annotate_shrinkEm called 12 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE17__annotate_shrinkEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE17__annotate_shrinkEm called 0 returned 0% blocks executed 0%
       25:  891:    void __annotate_shrink(size_type __old_size) const _NOEXCEPT
        1:  891-block  0
       12:  891-block  1
       12:  891-block  2
    $$$$$:  891-block  3
    $$$$$:  891-block  4
        -:  892:    {
       50:  893:      __annotate_contiguous_container(data(), data() + capacity(),
       25:  894:                                      data() + __old_size, data() + size());
       25:  895:    }
        1:  895-block  0
       12:  895-block  1
       12:  895-block  2
    $$$$$:  895-block  3
    $$$$$:  895-block  4
        -:  896:
        -:  897:  struct _ConstructTransaction {
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionC1ERS4_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionC2ERS4_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionC1ERS8_m called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionC2ERS8_m called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionC1ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionC2ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionC1ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionC2ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionC1ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionC2ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionC1ERS7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionC2ERS7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionC1ERS9_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionC2ERS9_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionC1ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionC2ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionC1ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionC2ERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionC1ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionC2ERS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionC1ERS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionC2ERS6_m called 0 returned 0% blocks executed 0%
       20:  898:    explicit _ConstructTransaction(vector &__v, size_type __n)
    $$$$$:  898-block  0
    $$$$$:  898-block  1
        8:  898-block  2
        8:  898-block  3
    $$$$$:  898-block  4
    $$$$$:  898-block  5
    $$$$$:  898-block  6
    $$$$$:  898-block  7
    $$$$$:  898-block  8
    $$$$$:  898-block  9
    $$$$$:  898-block 10
    $$$$$:  898-block 11
    $$$$$:  898-block 12
    $$$$$:  898-block 13
    $$$$$:  898-block 14
    $$$$$:  898-block 15
    $$$$$:  898-block 16
    $$$$$:  898-block 17
        2:  898-block 18
        2:  898-block 19
    $$$$$:  898-block 20
    $$$$$:  898-block 21
    $$$$$:  898-block 22
    $$$$$:  898-block 23
    $$$$$:  898-block 24
    $$$$$:  898-block 25
    $$$$$:  898-block 26
    $$$$$:  898-block 27
    $$$$$:  898-block 28
    $$$$$:  898-block 29
       20:  899:      : __v_(__v),  __pos_(__v.__end_), __new_end_(__v.__end_ + __n) {
        -:  900:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  901:      __v_.__annotate_increase(__n);
        -:  902:#endif
       20:  903:    }
    $$$$$:  903-block  0
    $$$$$:  903-block  1
        8:  903-block  2
        8:  903-block  3
    $$$$$:  903-block  4
    $$$$$:  903-block  5
    $$$$$:  903-block  6
    $$$$$:  903-block  7
    $$$$$:  903-block  8
    $$$$$:  903-block  9
    $$$$$:  903-block 10
    $$$$$:  903-block 11
    $$$$$:  903-block 12
    $$$$$:  903-block 13
    $$$$$:  903-block 14
    $$$$$:  903-block 15
    $$$$$:  903-block 16
    $$$$$:  903-block 17
        2:  903-block 18
        2:  903-block 19
    $$$$$:  903-block 20
    $$$$$:  903-block 21
    $$$$$:  903-block 22
    $$$$$:  903-block 23
    $$$$$:  903-block 24
    $$$$$:  903-block 25
    $$$$$:  903-block 26
    $$$$$:  903-block 27
    $$$$$:  903-block 28
    $$$$$:  903-block 29
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionD1Ev called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21_ConstructTransactionD2Ev called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionD1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21_ConstructTransactionD2Ev called 0 returned 0% blocks executed 0%
       20:  904:    ~_ConstructTransaction() {
    $$$$$:  904-block  0
    $$$$$:  904-block  1
        8:  904-block  2
        8:  904-block  3
    $$$$$:  904-block  4
    $$$$$:  904-block  5
    $$$$$:  904-block  6
    $$$$$:  904-block  7
    $$$$$:  904-block  8
    $$$$$:  904-block  9
    $$$$$:  904-block 10
    $$$$$:  904-block 11
    $$$$$:  904-block 12
    $$$$$:  904-block 13
    $$$$$:  904-block 14
    $$$$$:  904-block 15
    $$$$$:  904-block 16
    $$$$$:  904-block 17
        2:  904-block 18
        2:  904-block 19
    $$$$$:  904-block 20
    $$$$$:  904-block 21
    $$$$$:  904-block 22
    $$$$$:  904-block 23
    $$$$$:  904-block 24
    $$$$$:  904-block 25
    $$$$$:  904-block 26
    $$$$$:  904-block 27
    $$$$$:  904-block 28
    $$$$$:  904-block 29
       10:  905:      __v_.__end_ = __pos_;
        -:  906:#ifndef _LIBCPP_HAS_NO_ASAN
        -:  907:      if (__pos_ != __new_end_) {
        -:  908:        __v_.__annotate_shrink(__new_end_ - __v_.__begin_);
        -:  909:      }
        -:  910:#endif
       20:  911:    }
    $$$$$:  911-block  0
    $$$$$:  911-block  1
        8:  911-block  2
        8:  911-block  3
    $$$$$:  911-block  4
    $$$$$:  911-block  5
    $$$$$:  911-block  6
    $$$$$:  911-block  7
    $$$$$:  911-block  8
    $$$$$:  911-block  9
    $$$$$:  911-block 10
    $$$$$:  911-block 11
    $$$$$:  911-block 12
    $$$$$:  911-block 13
    $$$$$:  911-block 14
    $$$$$:  911-block 15
    $$$$$:  911-block 16
    $$$$$:  911-block 17
        2:  911-block 18
        2:  911-block 19
    $$$$$:  911-block 20
    $$$$$:  911-block 21
    $$$$$:  911-block 22
    $$$$$:  911-block 23
    $$$$$:  911-block 24
    $$$$$:  911-block 25
    $$$$$:  911-block 26
    $$$$$:  911-block 27
    $$$$$:  911-block 28
    $$$$$:  911-block 29
        -:  912:
        -:  913:    vector &__v_;
        -:  914:    pointer __pos_;
        -:  915:    const_pointer const __new_end_;
        -:  916:
        -:  917:  private:
        -:  918:    _ConstructTransaction(_ConstructTransaction const&) = delete;
        -:  919:    _ConstructTransaction& operator=(_ConstructTransaction const&) = delete;
        -:  920:  };
        -:  921:
        -:  922:  template <class ..._Args>
        -:  923:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE22__construct_one_at_endIJS1_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE22__construct_one_at_endIJS6_EEEvDpOT_ called 7 returned 0% blocks executed 60%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE22__construct_one_at_endIJRKS4_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE22__construct_one_at_endIJmEEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 2 returned 0% blocks executed 60%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE22__construct_one_at_endIJiEEEvDpOT_ called 2 returned 0% blocks executed 60%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE22__construct_one_at_endIJRKS3_EEEvDpOT_ called 0 returned 0% blocks executed 0%
       11:  924:  void __construct_one_at_end(_Args&& ...__args) {
    $$$$$:  924-block  0
        7:  924-block  1
    $$$$$:  924-block  2
    $$$$$:  924-block  3
    $$$$$:  924-block  4
    $$$$$:  924-block  5
        2:  924-block  6
        2:  924-block  7
    $$$$$:  924-block  8
    $$$$$:  924-block  9
    $$$$$:  924-block 10
    $$$$$:  924-block 11
       11:  925:    _ConstructTransaction __tx(*this, 1);
       22:  926:    __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__tx.__pos_),
    $$$$$:  926-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  926-block  1
branch  2 never executed
branch  3 never executed
        7:  926-block  2
branch  4 taken 7
branch  5 taken 0
        7:  926-block  3
branch  6 taken 7
branch  7 taken 0
    $$$$$:  926-block  4
branch  8 never executed
branch  9 never executed
    $$$$$:  926-block  5
branch 10 never executed
branch 11 never executed
    $$$$$:  926-block  6
branch 12 never executed
branch 13 never executed
    $$$$$:  926-block  7
branch 14 never executed
branch 15 never executed
    $$$$$:  926-block  8
branch 16 never executed
branch 17 never executed
    $$$$$:  926-block  9
branch 18 never executed
branch 19 never executed
    $$$$$:  926-block 10
branch 20 never executed
branch 21 never executed
    $$$$$:  926-block 11
branch 22 never executed
branch 23 never executed
        2:  926-block 12
branch 24 taken 2
branch 25 taken 0
        2:  926-block 13
branch 26 taken 2
branch 27 taken 0
        2:  926-block 14
branch 28 taken 2
branch 29 taken 0
        2:  926-block 15
branch 30 taken 2
branch 31 taken 0
    $$$$$:  926-block 16
branch 32 never executed
branch 33 never executed
    $$$$$:  926-block 17
branch 34 never executed
branch 35 never executed
    $$$$$:  926-block 18
branch 36 never executed
branch 37 never executed
    $$$$$:  926-block 19
branch 38 never executed
branch 39 never executed
    $$$$$:  926-block 20
branch 40 never executed
branch 41 never executed
    $$$$$:  926-block 21
branch 42 never executed
branch 43 never executed
    $$$$$:  926-block 22
branch 44 never executed
branch 45 never executed
    $$$$$:  926-block 23
branch 46 never executed
branch 47 never executed
       11:  927:        _VSTD::forward<_Args>(__args)...);
       11:  928:    ++__tx.__pos_;
       11:  929:  }
    $$$$$:  929-block  0
    $$$$$:  929-block  1
    $$$$$:  929-block  2
        7:  929-block  3
    $$$$$:  929-block  4
    $$$$$:  929-block  5
    $$$$$:  929-block  6
    $$$$$:  929-block  7
    $$$$$:  929-block  8
    $$$$$:  929-block  9
    $$$$$:  929-block 10
    $$$$$:  929-block 11
    $$$$$:  929-block 12
    $$$$$:  929-block 13
    $$$$$:  929-block 14
    $$$$$:  929-block 15
    $$$$$:  929-block 16
    $$$$$:  929-block 17
        2:  929-block 18
    $$$$$:  929-block 19
    $$$$$:  929-block 20
        2:  929-block 21
    $$$$$:  929-block 22
    $$$$$:  929-block 23
    $$$$$:  929-block 24
    $$$$$:  929-block 25
    $$$$$:  929-block 26
    $$$$$:  929-block 27
    $$$$$:  929-block 28
    $$$$$:  929-block 29
    $$$$$:  929-block 30
    $$$$$:  929-block 31
    $$$$$:  929-block 32
    $$$$$:  929-block 33
    $$$$$:  929-block 34
    $$$$$:  929-block 35
        -:  930:};
        -:  931:
        -:  932:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -:  933:template<class _InputIterator,
        -:  934:         class _Alloc = typename std::allocator<typename iterator_traits<_InputIterator>::value_type>,
        -:  935:         class = typename enable_if<__is_allocator<_Alloc>::value, void>::type
        -:  936:         >
        -:  937:vector(_InputIterator, _InputIterator)
        -:  938:  -> vector<typename iterator_traits<_InputIterator>::value_type, _Alloc>;
        -:  939:
        -:  940:template<class _InputIterator,
        -:  941:         class _Alloc,
        -:  942:         class = typename enable_if<__is_allocator<_Alloc>::value, void>::type
        -:  943:         >
        -:  944:vector(_InputIterator, _InputIterator, _Alloc)
        -:  945:  -> vector<typename iterator_traits<_InputIterator>::value_type, _Alloc>;
        -:  946:#endif
        -:  947:
        -:  948:template <class _Tp, class _Allocator>
        -:  949:void
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE called 13 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE26__swap_out_circular_bufferERNS_14__split_bufferImRS2_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE called 2 returned 100% blocks executed 100%
       24:  950:vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v)
    $$$$$:  950-block  0
       13:  950-block  1
    $$$$$:  950-block  2
    $$$$$:  950-block  3
    $$$$$:  950-block  4
    $$$$$:  950-block  5
        8:  950-block  6
    $$$$$:  950-block  7
        1:  950-block  8
    $$$$$:  950-block  9
    $$$$$:  950-block 10
        2:  950-block 11
        -:  951:{
        -:  952:
       24:  953:    __annotate_delete();
       24:  954:    __alloc_traits::__construct_backward_with_exception_guarantees(
       24:  955:        this->__alloc(), this->__begin_, this->__end_, __v.__begin_);
       24:  956:    _VSTD::swap(this->__begin_, __v.__begin_);
       24:  957:    _VSTD::swap(this->__end_, __v.__end_);
       24:  958:    _VSTD::swap(this->__end_cap(), __v.__end_cap());
       24:  959:    __v.__first_ = __v.__begin_;
       24:  960:    __annotate_new(size());
       24:  961:    __invalidate_all_iterators();
       24:  962:}
    $$$$$:  962-block  0
       13:  962-block  1
    $$$$$:  962-block  2
    $$$$$:  962-block  3
    $$$$$:  962-block  4
    $$$$$:  962-block  5
        8:  962-block  6
    $$$$$:  962-block  7
        1:  962-block  8
    $$$$$:  962-block  9
    $$$$$:  962-block 10
        2:  962-block 11
        -:  963:
        -:  964:template <class _Tp, class _Allocator>
        -:  965:typename vector<_Tp, _Allocator>::pointer
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EEPS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EEPS3_ called 0 returned 0% blocks executed 0%
    #####:  966:vector<_Tp, _Allocator>::__swap_out_circular_buffer(__split_buffer<value_type, allocator_type&>& __v, pointer __p)
    $$$$$:  966-block  0
    $$$$$:  966-block  1
    $$$$$:  966-block  2
        -:  967:{
    #####:  968:    __annotate_delete();
    #####:  969:    pointer __r = __v.__begin_;
    #####:  970:    __alloc_traits::__construct_backward_with_exception_guarantees(
    #####:  971:        this->__alloc(), this->__begin_, __p, __v.__begin_);
    #####:  972:    __alloc_traits::__construct_forward_with_exception_guarantees(
    #####:  973:        this->__alloc(), __p, this->__end_, __v.__end_);
    #####:  974:    _VSTD::swap(this->__begin_, __v.__begin_);
    #####:  975:    _VSTD::swap(this->__end_, __v.__end_);
    #####:  976:    _VSTD::swap(this->__end_cap(), __v.__end_cap());
    #####:  977:    __v.__first_ = __v.__begin_;
    #####:  978:    __annotate_new(size());
    #####:  979:    __invalidate_all_iterators();
    #####:  980:    return __r;
    $$$$$:  980-block  0
    $$$$$:  980-block  1
    $$$$$:  980-block  2
        -:  981:}
        -:  982:
        -:  983://  Allocate space for __n objects
        -:  984://  throws length_error if __n > max_size()
        -:  985://  throws (probably bad_alloc) if memory run out
        -:  986://  Precondition:  __begin_ == __end_ == __end_cap() == 0
        -:  987://  Precondition:  __n > 0
        -:  988://  Postcondition:  capacity() == __n
        -:  989://  Postcondition:  size() == 0
        -:  990:template <class _Tp, class _Allocator>
        -:  991:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__vallocateEm called 1 returned 100% blocks executed 75%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE11__vallocateEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE11__vallocateEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__vallocateEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE11__vallocateEm called 0 returned 0% blocks executed 0%
        1:  992:vector<_Tp, _Allocator>::__vallocate(size_type __n)
        1:  992-block  0
    $$$$$:  992-block  1
    $$$$$:  992-block  2
    $$$$$:  992-block  3
    $$$$$:  992-block  4
        -:  993:{
        1:  994:    if (__n > max_size())
        1:  994-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$:  994-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  994-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  994-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  994-block  4
branch  8 never executed
branch  9 never executed
    #####:  995:        this->__throw_length_error();
    $$$$$:  995-block  0
    $$$$$:  995-block  1
    $$$$$:  995-block  2
    $$$$$:  995-block  3
    $$$$$:  995-block  4
        1:  996:    this->__begin_ = this->__end_ = __alloc_traits::allocate(this->__alloc(), __n);
        1:  997:    this->__end_cap() = this->__begin_ + __n;
        1:  998:    __annotate_new(0);
        1:  999:}
        1:  999-block  0
    $$$$$:  999-block  1
    $$$$$:  999-block  2
    $$$$$:  999-block  3
    $$$$$:  999-block  4
        -: 1000:
        -: 1001:template <class _Tp, class _Allocator>
        -: 1002:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__vdeallocateEv called 1 returned 100% blocks executed 75%
        1: 1003:vector<_Tp, _Allocator>::__vdeallocate() _NOEXCEPT
        1: 1003-block  0
        -: 1004:{
        1: 1005:    if (this->__begin_ != nullptr)
        1: 1005-block  0
branch  0 taken 0
branch  1 taken 1
        -: 1006:    {
    #####: 1007:        clear();
    #####: 1008:        __alloc_traits::deallocate(this->__alloc(), this->__begin_, capacity());
    #####: 1009:        this->__begin_ = this->__end_ = this->__end_cap() = nullptr;
    #####: 1010:    }
    $$$$$: 1010-block  0
        1: 1011:}
        1: 1011-block  0
        -: 1012:
        -: 1013:template <class _Tp, class _Allocator>
        -: 1014:typename vector<_Tp, _Allocator>::size_type
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv called 10 returned 0% blocks executed 75%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE8max_sizeEv called 8 returned 0% blocks executed 75%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE8max_sizeEv called 1 returned 0% blocks executed 75%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE8max_sizeEv called 2 returned 0% blocks executed 75%
       21: 1015:vector<_Tp, _Allocator>::max_size() const _NOEXCEPT
    $$$$$: 1015-block  0
       10: 1015-block  1
    $$$$$: 1015-block  2
    $$$$$: 1015-block  3
    $$$$$: 1015-block  4
    $$$$$: 1015-block  5
    $$$$$: 1015-block  6
    $$$$$: 1015-block  7
    $$$$$: 1015-block  8
        8: 1015-block  9
    $$$$$: 1015-block 10
        1: 1015-block 11
    $$$$$: 1015-block 12
    $$$$$: 1015-block 13
        2: 1015-block 14
        -: 1016:{
       42: 1017:    return _VSTD::min<size_type>(__alloc_traits::max_size(this->__alloc()),
    $$$$$: 1017-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1017-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1017-block  2
    $$$$$: 1017-block  3
       10: 1017-block  4
branch  4 taken 10
branch  5 taken 0
       10: 1017-block  5
branch  6 taken 10
branch  7 taken 0
       10: 1017-block  6
    $$$$$: 1017-block  7
    $$$$$: 1017-block  8
branch  8 never executed
branch  9 never executed
    $$$$$: 1017-block  9
branch 10 never executed
branch 11 never executed
    $$$$$: 1017-block 10
    $$$$$: 1017-block 11
    $$$$$: 1017-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 1017-block 13
branch 14 never executed
branch 15 never executed
    $$$$$: 1017-block 14
    $$$$$: 1017-block 15
    $$$$$: 1017-block 16
branch 16 never executed
branch 17 never executed
    $$$$$: 1017-block 17
branch 18 never executed
branch 19 never executed
    $$$$$: 1017-block 18
    $$$$$: 1017-block 19
    $$$$$: 1017-block 20
branch 20 never executed
branch 21 never executed
    $$$$$: 1017-block 21
branch 22 never executed
branch 23 never executed
    $$$$$: 1017-block 22
    $$$$$: 1017-block 23
    $$$$$: 1017-block 24
branch 24 never executed
branch 25 never executed
    $$$$$: 1017-block 25
branch 26 never executed
branch 27 never executed
    $$$$$: 1017-block 26
    $$$$$: 1017-block 27
    $$$$$: 1017-block 28
branch 28 never executed
branch 29 never executed
    $$$$$: 1017-block 29
branch 30 never executed
branch 31 never executed
    $$$$$: 1017-block 30
    $$$$$: 1017-block 31
    $$$$$: 1017-block 32
branch 32 never executed
branch 33 never executed
    $$$$$: 1017-block 33
branch 34 never executed
branch 35 never executed
    $$$$$: 1017-block 34
    $$$$$: 1017-block 35
        8: 1017-block 36
branch 36 taken 8
branch 37 taken 0
        8: 1017-block 37
branch 38 taken 8
branch 39 taken 0
        8: 1017-block 38
    $$$$$: 1017-block 39
    $$$$$: 1017-block 40
branch 40 never executed
branch 41 never executed
    $$$$$: 1017-block 41
branch 42 never executed
branch 43 never executed
    $$$$$: 1017-block 42
    $$$$$: 1017-block 43
        1: 1017-block 44
branch 44 taken 1
branch 45 taken 0
        1: 1017-block 45
branch 46 taken 1
branch 47 taken 0
        1: 1017-block 46
    $$$$$: 1017-block 47
    $$$$$: 1017-block 48
branch 48 never executed
branch 49 never executed
    $$$$$: 1017-block 49
branch 50 never executed
branch 51 never executed
    $$$$$: 1017-block 50
    $$$$$: 1017-block 51
    $$$$$: 1017-block 52
branch 52 never executed
branch 53 never executed
    $$$$$: 1017-block 53
branch 54 never executed
branch 55 never executed
    $$$$$: 1017-block 54
    $$$$$: 1017-block 55
        2: 1017-block 56
branch 56 taken 2
branch 57 taken 0
        2: 1017-block 57
branch 58 taken 2
branch 59 taken 0
        2: 1017-block 58
    $$$$$: 1017-block 59
       21: 1018:                                 numeric_limits<difference_type>::max());
        -: 1019:}
        -: 1020:
        -: 1021://  Precondition:  __new_size > capacity()
        -: 1022:template <class _Tp, class _Allocator>
        -: 1023:inline _LIBCPP_INLINE_VISIBILITY
        -: 1024:typename vector<_Tp, _Allocator>::size_type
function _ZNKSt3__16vectorIPcNS_9allocatorIS1_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__recommendEm called 9 returned 100% blocks executed 71%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE11__recommendEm called 8 returned 100% blocks executed 71%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEE11__recommendEm called 10 returned 100% blocks executed 71%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE11__recommendEm called 1 returned 100% blocks executed 71%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE11__recommendEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE11__recommendEm called 2 returned 100% blocks executed 71%
       30: 1025:vector<_Tp, _Allocator>::__recommend(size_type __new_size) const
    $$$$$: 1025-block  0
        9: 1025-block  1
    $$$$$: 1025-block  2
    $$$$$: 1025-block  3
    $$$$$: 1025-block  4
    $$$$$: 1025-block  5
        8: 1025-block  6
       10: 1025-block  7
        1: 1025-block  8
    $$$$$: 1025-block  9
    $$$$$: 1025-block 10
        2: 1025-block 11
        -: 1026:{
       30: 1027:    const size_type __ms = max_size();
       30: 1028:    if (__new_size > __ms)
    $$$$$: 1028-block  0
branch  0 never executed
branch  1 never executed
        9: 1028-block  1
branch  2 taken 0
branch  3 taken 9
    $$$$$: 1028-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1028-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1028-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1028-block  5
branch 10 never executed
branch 11 never executed
        8: 1028-block  6
branch 12 taken 0
branch 13 taken 8
       10: 1028-block  7
branch 14 taken 0
branch 15 taken 10
        1: 1028-block  8
branch 16 taken 0
branch 17 taken 1
    $$$$$: 1028-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 1028-block 10
branch 20 never executed
branch 21 never executed
        2: 1028-block 11
branch 22 taken 0
branch 23 taken 2
    #####: 1029:        this->__throw_length_error();
    $$$$$: 1029-block  0
    $$$$$: 1029-block  1
    $$$$$: 1029-block  2
    $$$$$: 1029-block  3
    $$$$$: 1029-block  4
    $$$$$: 1029-block  5
    $$$$$: 1029-block  6
    $$$$$: 1029-block  7
    $$$$$: 1029-block  8
    $$$$$: 1029-block  9
    $$$$$: 1029-block 10
    $$$$$: 1029-block 11
       30: 1030:    const size_type __cap = capacity();
       30: 1031:    if (__cap >= __ms / 2)
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
        9: 1031-block  1
branch  2 taken 0
branch  3 taken 9
    $$$$$: 1031-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1031-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1031-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1031-block  5
branch 10 never executed
branch 11 never executed
        8: 1031-block  6
branch 12 taken 0
branch 13 taken 8
       10: 1031-block  7
branch 14 taken 0
branch 15 taken 10
        1: 1031-block  8
branch 16 taken 0
branch 17 taken 1
    $$$$$: 1031-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 1031-block 10
branch 20 never executed
branch 21 never executed
        2: 1031-block 11
branch 22 taken 0
branch 23 taken 2
    #####: 1032:        return __ms;
    $$$$$: 1032-block  0
    $$$$$: 1032-block  1
    $$$$$: 1032-block  2
    $$$$$: 1032-block  3
    $$$$$: 1032-block  4
    $$$$$: 1032-block  5
    $$$$$: 1032-block  6
    $$$$$: 1032-block  7
    $$$$$: 1032-block  8
    $$$$$: 1032-block  9
    $$$$$: 1032-block 10
    $$$$$: 1032-block 11
       30: 1033:    return _VSTD::max<size_type>(2*__cap, __new_size);
    $$$$$: 1033-block  0
        9: 1033-block  1
    $$$$$: 1033-block  2
    $$$$$: 1033-block  3
    $$$$$: 1033-block  4
    $$$$$: 1033-block  5
        8: 1033-block  6
       10: 1033-block  7
        1: 1033-block  8
    $$$$$: 1033-block  9
    $$$$$: 1033-block 10
        2: 1033-block 11
       30: 1034:}
    $$$$$: 1034-block  0
        9: 1034-block  1
    $$$$$: 1034-block  2
    $$$$$: 1034-block  3
    $$$$$: 1034-block  4
    $$$$$: 1034-block  5
        8: 1034-block  6
       10: 1034-block  7
        1: 1034-block  8
    $$$$$: 1034-block  9
    $$$$$: 1034-block 10
        2: 1034-block 11
        -: 1035:
        -: 1036://  Default constructs __n objects starting at __end_
        -: 1037://  throws if construction throws
        -: 1038://  Precondition:  __n > 0
        -: 1039://  Precondition:  size() + __n <= capacity()
        -: 1040://  Postcondition:  size() == size() + __n
        -: 1041:template <class _Tp, class _Allocator>
        -: 1042:void
function _ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE18__construct_at_endEm called 0 returned 0% blocks executed 0%
    #####: 1043:vector<_Tp, _Allocator>::__construct_at_end(size_type __n)
    $$$$$: 1043-block  0
    $$$$$: 1043-block  1
        -: 1044:{
    #####: 1045:    _ConstructTransaction __tx(*this, __n);
    #####: 1046:    const_pointer __new_end = __tx.__new_end_;
    #####: 1047:    for (pointer __pos = __tx.__pos_; __pos != __new_end; ++__pos, __tx.__pos_ = __pos) {
    $$$$$: 1047-block  0
    $$$$$: 1047-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1047-block  2
    $$$$$: 1047-block  3
    $$$$$: 1047-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 1047-block  5
    #####: 1048:        __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__pos));
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1048-block  1
branch  2 never executed
branch  3 never executed
    #####: 1049:    }
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    #####: 1050:}
    $$$$$: 1050-block  0
    $$$$$: 1050-block  1
    $$$$$: 1050-block  2
    $$$$$: 1050-block  3
    $$$$$: 1050-block  4
    $$$$$: 1050-block  5
        -: 1051:
        -: 1052://  Copy constructs __n objects starting at __end_ from __x
        -: 1053://  throws if construction throws
        -: 1054://  Precondition:  __n > 0
        -: 1055://  Precondition:  size() + __n <= capacity()
        -: 1056://  Postcondition:  size() == old size() + __n
        -: 1057://  Postcondition:  [i] == __x for all i in [size() - __n, __n)
        -: 1058:template <class _Tp, class _Allocator>
        -: 1059:inline
        -: 1060:void
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEE18__construct_at_endEmRKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEE18__construct_at_endEmRKS7_ called 0 returned 0% blocks executed 0%
    #####: 1061:vector<_Tp, _Allocator>::__construct_at_end(size_type __n, const_reference __x)
    $$$$$: 1061-block  0
    $$$$$: 1061-block  1
        -: 1062:{
    #####: 1063:    _ConstructTransaction __tx(*this, __n);
    #####: 1064:    const_pointer __new_end = __tx.__new_end_;
    #####: 1065:    for (pointer __pos = __tx.__pos_; __pos != __new_end; ++__pos, __tx.__pos_ = __pos) {
    $$$$$: 1065-block  0
    $$$$$: 1065-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1065-block  2
    $$$$$: 1065-block  3
    $$$$$: 1065-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 1065-block  5
    #####: 1066:        __alloc_traits::construct(this->__alloc(), _VSTD::__to_address(__pos), __x);
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1066-block  1
branch  2 never executed
branch  3 never executed
    #####: 1067:    }
    $$$$$: 1067-block  0
    $$$$$: 1067-block  1
    #####: 1068:}
    $$$$$: 1068-block  0
    $$$$$: 1068-block  1
    $$$$$: 1068-block  2
    $$$$$: 1068-block  3
    $$$$$: 1068-block  4
    $$$$$: 1068-block  5
        -: 1069:
        -: 1070:template <class _Tp, class _Allocator>
        -: 1071:template <class _ForwardIterator>
        -: 1072:typename enable_if
        -: 1073:<
        -: 1074:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 1075:    void
        -: 1076:>::type
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPKPKcEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESF_SF_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESC_SC_m called 1 returned 0% blocks executed 60%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endINS_11__wrap_iterIPKS6_EEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESF_SF_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES7_S7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeESB_SB_m called 0 returned 0% blocks executed 0%
        1: 1077:vector<_Tp, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last, size_type __n)
    $$$$$: 1077-block  0
        1: 1077-block  1
    $$$$$: 1077-block  2
    $$$$$: 1077-block  3
    $$$$$: 1077-block  4
        -: 1078:{
        1: 1079:    _ConstructTransaction __tx(*this, __n);
        1: 1080:    __alloc_traits::__construct_range_forward(this->__alloc(), __first, __last, __tx.__pos_);
    $$$$$: 1080-block  0
branch  0 never executed
branch  1 never executed
        1: 1080-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$: 1080-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1080-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1080-block  4
branch  8 never executed
branch  9 never executed
        1: 1081:}
    $$$$$: 1081-block  0
    $$$$$: 1081-block  1
    $$$$$: 1081-block  2
        1: 1081-block  3
    $$$$$: 1081-block  4
    $$$$$: 1081-block  5
    $$$$$: 1081-block  6
    $$$$$: 1081-block  7
    $$$$$: 1081-block  8
    $$$$$: 1081-block  9
    $$$$$: 1081-block 10
    $$$$$: 1081-block 11
    $$$$$: 1081-block 12
    $$$$$: 1081-block 13
    $$$$$: 1081-block 14
        -: 1082:
        -: 1083://  Default constructs __n objects starting at __end_
        -: 1084://  throws if construction throws
        -: 1085://  Postcondition:  size() == size() + __n
        -: 1086://  Exception safety: strong.
        -: 1087:template <class _Tp, class _Allocator>
        -: 1088:void
        -: 1089:vector<_Tp, _Allocator>::__append(size_type __n)
        -: 1090:{
        -: 1091:    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
        -: 1092:        this->__construct_at_end(__n);
        -: 1093:    else
        -: 1094:    {
        -: 1095:        allocator_type& __a = this->__alloc();
        -: 1096:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
        -: 1097:        __v.__construct_at_end(__n);
        -: 1098:        __swap_out_circular_buffer(__v);
        -: 1099:    }
        -: 1100:}
        -: 1101:
        -: 1102://  Default constructs __n objects starting at __end_
        -: 1103://  throws if construction throws
        -: 1104://  Postcondition:  size() == size() + __n
        -: 1105://  Exception safety: strong.
        -: 1106:template <class _Tp, class _Allocator>
        -: 1107:void
        -: 1108:vector<_Tp, _Allocator>::__append(size_type __n, const_reference __x)
        -: 1109:{
        -: 1110:    if (static_cast<size_type>(this->__end_cap() - this->__end_) >= __n)
        -: 1111:        this->__construct_at_end(__n, __x);
        -: 1112:    else
        -: 1113:    {
        -: 1114:        allocator_type& __a = this->__alloc();
        -: 1115:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), size(), __a);
        -: 1116:        __v.__construct_at_end(__n, __x);
        -: 1117:        __swap_out_circular_buffer(__v);
        -: 1118:    }
        -: 1119:}
        -: 1120:
        -: 1121:template <class _Tp, class _Allocator>
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC1Em called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC1Em called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC2Em called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2Em called 0 returned 0% blocks executed 0%
    #####: 1122:vector<_Tp, _Allocator>::vector(size_type __n)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
    $$$$$: 1122-block  2
    $$$$$: 1122-block  3
    #####: 1123:{
        -: 1124:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1125:    __get_db()->__insert_c(this);
        -: 1126:#endif
    #####: 1127:    if (__n > 0)
    $$$$$: 1127-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1127-block  1
branch  2 never executed
branch  3 never executed
        -: 1128:    {
    #####: 1129:        __vallocate(__n);
    $$$$$: 1129-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1129-block  1
branch  2 never executed
branch  3 never executed
    #####: 1130:        __construct_at_end(__n);
    $$$$$: 1130-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1130-block  1
branch  2 never executed
branch  3 never executed
    #####: 1131:    }
    $$$$$: 1131-block  0
    $$$$$: 1131-block  1
    #####: 1132:}
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
    $$$$$: 1132-block  2
    $$$$$: 1132-block  3
    $$$$$: 1132-block  4
    $$$$$: 1132-block  5
    $$$$$: 1132-block  6
    $$$$$: 1132-block  7
        -: 1133:
        -: 1134:#if _LIBCPP_STD_VER > 11
        -: 1135:template <class _Tp, class _Allocator>
        -: 1136:vector<_Tp, _Allocator>::vector(size_type __n, const allocator_type& __a)
        -: 1137:    : __base(__a)
        -: 1138:{
        -: 1139:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1140:    __get_db()->__insert_c(this);
        -: 1141:#endif
        -: 1142:    if (__n > 0)
        -: 1143:    {
        -: 1144:        __vallocate(__n);
        -: 1145:        __construct_at_end(__n);
        -: 1146:    }
        -: 1147:}
        -: 1148:#endif
        -: 1149:
        -: 1150:template <class _Tp, class _Allocator>
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEEC1EmRKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEEC1EmRKS7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEEC2EmRKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEEC2EmRKS7_ called 0 returned 0% blocks executed 0%
    #####: 1151:vector<_Tp, _Allocator>::vector(size_type __n, const value_type& __x)
    $$$$$: 1151-block  0
    $$$$$: 1151-block  1
    $$$$$: 1151-block  2
    $$$$$: 1151-block  3
    #####: 1152:{
        -: 1153:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1154:    __get_db()->__insert_c(this);
        -: 1155:#endif
    #####: 1156:    if (__n > 0)
    $$$$$: 1156-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1156-block  1
branch  2 never executed
branch  3 never executed
        -: 1157:    {
    #####: 1158:        __vallocate(__n);
    $$$$$: 1158-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1158-block  1
branch  2 never executed
branch  3 never executed
    #####: 1159:        __construct_at_end(__n, __x);
    $$$$$: 1159-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1159-block  1
branch  2 never executed
branch  3 never executed
    #####: 1160:    }
    $$$$$: 1160-block  0
    $$$$$: 1160-block  1
    #####: 1161:}
    $$$$$: 1161-block  0
    $$$$$: 1161-block  1
    $$$$$: 1161-block  2
    $$$$$: 1161-block  3
    $$$$$: 1161-block  4
    $$$$$: 1161-block  5
    $$$$$: 1161-block  6
    $$$$$: 1161-block  7
        -: 1162:
        -: 1163:template <class _Tp, class _Allocator>
        -: 1164:vector<_Tp, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)
        -: 1165:    : __base(__a)
        -: 1166:{
        -: 1167:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1168:    __get_db()->__insert_c(this);
        -: 1169:#endif
        -: 1170:    if (__n > 0)
        -: 1171:    {
        -: 1172:        __vallocate(__n);
        -: 1173:        __construct_at_end(__n, __x);
        -: 1174:    }
        -: 1175:}
        -: 1176:
        -: 1177:template <class _Tp, class _Allocator>
        -: 1178:template <class _InputIterator>
        -: 1179:vector<_Tp, _Allocator>::vector(_InputIterator __first,
        -: 1180:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1181:                         !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1182:                         is_constructible<
        -: 1183:                            value_type,
        -: 1184:                            typename iterator_traits<_InputIterator>::reference>::value,
        -: 1185:                          _InputIterator>::type __last)
        -: 1186:{
        -: 1187:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1188:    __get_db()->__insert_c(this);
        -: 1189:#endif
        -: 1190:    for (; __first != __last; ++__first)
        -: 1191:        __emplace_back(*__first);
        -: 1192:}
        -: 1193:
        -: 1194:template <class _Tp, class _Allocator>
        -: 1195:template <class _InputIterator>
        -: 1196:vector<_Tp, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 1197:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1198:                         !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1199:                         is_constructible<
        -: 1200:                            value_type,
        -: 1201:                            typename iterator_traits<_InputIterator>::reference>::value>::type*)
        -: 1202:    : __base(__a)
        -: 1203:{
        -: 1204:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1205:    __get_db()->__insert_c(this);
        -: 1206:#endif
        -: 1207:    for (; __first != __last; ++__first)
        -: 1208:        __emplace_back(*__first);
        -: 1209:}
        -: 1210:
        -: 1211:template <class _Tp, class _Allocator>
        -: 1212:template <class _ForwardIterator>
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1INS_11__wrap_iterIPKS6_EEEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1IPKPKcEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2IPKPKcEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2INS_11__wrap_iterIPKS6_EEEET_NS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISE_EE5valuesr16is_constructibleIS6_NS_15iterator_traitsISE_E9referenceEEE5valueESE_E4typeE called 0 returned 0% blocks executed 0%
    #####: 1213:vector<_Tp, _Allocator>::vector(_ForwardIterator __first,
    $$$$$: 1213-block  0
    $$$$$: 1213-block  1
    $$$$$: 1213-block  2
    $$$$$: 1213-block  3
        -: 1214:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1215:                                is_constructible<
        -: 1216:                                   value_type,
        -: 1217:                                   typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1218:                                                   _ForwardIterator>::type __last)
    #####: 1219:{
        -: 1220:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1221:    __get_db()->__insert_c(this);
        -: 1222:#endif
    #####: 1223:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
    $$$$$: 1223-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1223-block  1
branch  2 never executed
branch  3 never executed
    #####: 1224:    if (__n > 0)
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1224-block  1
branch  2 never executed
branch  3 never executed
        -: 1225:    {
    #####: 1226:        __vallocate(__n);
    $$$$$: 1226-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1226-block  1
branch  2 never executed
branch  3 never executed
    #####: 1227:        __construct_at_end(__first, __last, __n);
    $$$$$: 1227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1227-block  1
branch  2 never executed
branch  3 never executed
    #####: 1228:    }
    $$$$$: 1228-block  0
    $$$$$: 1228-block  1
    #####: 1229:}
    $$$$$: 1229-block  0
    $$$$$: 1229-block  1
    $$$$$: 1229-block  2
    $$$$$: 1229-block  3
    $$$$$: 1229-block  4
    $$$$$: 1229-block  5
    $$$$$: 1229-block  6
    $$$$$: 1229-block  7
        -: 1230:
        -: 1231:template <class _Tp, class _Allocator>
        -: 1232:template <class _ForwardIterator>
        -: 1233:vector<_Tp, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 1234:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1235:                                is_constructible<
        -: 1236:                                   value_type,
        -: 1237:                                   typename iterator_traits<_ForwardIterator>::reference>::value>::type*)
        -: 1238:    : __base(__a)
        -: 1239:{
        -: 1240:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1241:    __get_db()->__insert_c(this);
        -: 1242:#endif
        -: 1243:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 1244:    if (__n > 0)
        -: 1245:    {
        -: 1246:        __vallocate(__n);
        -: 1247:        __construct_at_end(__first, __last, __n);
        -: 1248:    }
        -: 1249:}
        -: 1250:
        -: 1251:template <class _Tp, class _Allocator>
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC1ERKS8_ called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_ called 2 returned 0% blocks executed 75%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEC2ERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC1ERKS7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEC2ERKS7_ called 0 returned 0% blocks executed 0%
        4: 1252:vector<_Tp, _Allocator>::vector(const vector& __x)
        2: 1252-block  0
        2: 1252-block  1
    $$$$$: 1252-block  2
    $$$$$: 1252-block  3
    $$$$$: 1252-block  4
    $$$$$: 1252-block  5
        2: 1253:    : __base(__alloc_traits::select_on_container_copy_construction(__x.__alloc()))
        4: 1254:{
        -: 1255:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1256:    __get_db()->__insert_c(this);
        -: 1257:#endif
        2: 1258:    size_type __n = __x.size();
        2: 1259:    if (__n > 0)
        2: 1259-block  0
branch  0 taken 1
branch  1 taken 1
    $$$$$: 1259-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1259-block  2
branch  4 never executed
branch  5 never executed
        -: 1260:    {
        1: 1261:        __vallocate(__n);
        1: 1261-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 1261-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1261-block  2
branch  4 never executed
branch  5 never executed
        1: 1262:        __construct_at_end(__x.__begin_, __x.__end_, __n);
        1: 1262-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 1262-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1262-block  2
branch  4 never executed
branch  5 never executed
        1: 1263:    }
        1: 1263-block  0
    $$$$$: 1263-block  1
    $$$$$: 1263-block  2
        4: 1264:}
        2: 1264-block  0
    $$$$$: 1264-block  1
        2: 1264-block  2
    $$$$$: 1264-block  3
    $$$$$: 1264-block  4
    $$$$$: 1264-block  5
    $$$$$: 1264-block  6
    $$$$$: 1264-block  7
    $$$$$: 1264-block  8
    $$$$$: 1264-block  9
    $$$$$: 1264-block 10
    $$$$$: 1264-block 11
        -: 1265:
        -: 1266:template <class _Tp, class _Allocator>
        -: 1267:vector<_Tp, _Allocator>::vector(const vector& __x, const allocator_type& __a)
        -: 1268:    : __base(__a)
        -: 1269:{
        -: 1270:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1271:    __get_db()->__insert_c(this);
        -: 1272:#endif
        -: 1273:    size_type __n = __x.size();
        -: 1274:    if (__n > 0)
        -: 1275:    {
        -: 1276:        __vallocate(__n);
        -: 1277:        __construct_at_end(__x.__begin_, __x.__end_, __n);
        -: 1278:    }
        -: 1279:}
        -: 1280:
        -: 1281:#ifndef _LIBCPP_CXX03_LANG
        -: 1282:
        -: 1283:template <class _Tp, class _Allocator>
        -: 1284:inline _LIBCPP_INLINE_VISIBILITY
        -: 1285:vector<_Tp, _Allocator>::vector(vector&& __x)
        -: 1286:#if _LIBCPP_STD_VER > 14
        -: 1287:        _NOEXCEPT
        -: 1288:#else
        -: 1289:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 1290:#endif
        -: 1291:    : __base(_VSTD::move(__x.__alloc()))
        -: 1292:{
        -: 1293:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1294:    __get_db()->__insert_c(this);
        -: 1295:    __get_db()->swap(this, &__x);
        -: 1296:#endif
        -: 1297:    this->__begin_ = __x.__begin_;
        -: 1298:    this->__end_ = __x.__end_;
        -: 1299:    this->__end_cap() = __x.__end_cap();
        -: 1300:    __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
        -: 1301:}
        -: 1302:
        -: 1303:template <class _Tp, class _Allocator>
        -: 1304:inline _LIBCPP_INLINE_VISIBILITY
        -: 1305:vector<_Tp, _Allocator>::vector(vector&& __x, const allocator_type& __a)
        -: 1306:    : __base(__a)
        -: 1307:{
        -: 1308:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1309:    __get_db()->__insert_c(this);
        -: 1310:#endif
        -: 1311:    if (__a == __x.__alloc())
        -: 1312:    {
        -: 1313:        this->__begin_ = __x.__begin_;
        -: 1314:        this->__end_ = __x.__end_;
        -: 1315:        this->__end_cap() = __x.__end_cap();
        -: 1316:        __x.__begin_ = __x.__end_ = __x.__end_cap() = nullptr;
        -: 1317:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1318:        __get_db()->swap(this, &__x);
        -: 1319:#endif
        -: 1320:    }
        -: 1321:    else
        -: 1322:    {
        -: 1323:        typedef move_iterator<iterator> _Ip;
        -: 1324:        assign(_Ip(__x.begin()), _Ip(__x.end()));
        -: 1325:    }
        -: 1326:}
        -: 1327:
        -: 1328:template <class _Tp, class _Allocator>
        -: 1329:inline _LIBCPP_INLINE_VISIBILITY
        -: 1330:vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il)
        -: 1331:{
        -: 1332:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1333:    __get_db()->__insert_c(this);
        -: 1334:#endif
        -: 1335:    if (__il.size() > 0)
        -: 1336:    {
        -: 1337:        __vallocate(__il.size());
        -: 1338:        __construct_at_end(__il.begin(), __il.end(), __il.size());
        -: 1339:    }
        -: 1340:}
        -: 1341:
        -: 1342:template <class _Tp, class _Allocator>
        -: 1343:inline _LIBCPP_INLINE_VISIBILITY
        -: 1344:vector<_Tp, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
        -: 1345:    : __base(__a)
        -: 1346:{
        -: 1347:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1348:    __get_db()->__insert_c(this);
        -: 1349:#endif
        -: 1350:    if (__il.size() > 0)
        -: 1351:    {
        -: 1352:        __vallocate(__il.size());
        -: 1353:        __construct_at_end(__il.begin(), __il.end(), __il.size());
        -: 1354:    }
        -: 1355:}
        -: 1356:
        -: 1357:template <class _Tp, class _Allocator>
        -: 1358:inline _LIBCPP_INLINE_VISIBILITY
        -: 1359:vector<_Tp, _Allocator>&
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEaSEOS8_ called 1 returned 100% blocks executed 100%
        1: 1360:vector<_Tp, _Allocator>::operator=(vector&& __x)
        1: 1360-block  0
        -: 1361:    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 1362:{
        1: 1363:    __move_assign(__x, integral_constant<bool,
        -: 1364:          __alloc_traits::propagate_on_container_move_assignment::value>());
        1: 1365:    return *this;
        1: 1365-block  0
        -: 1366:}
        -: 1367:
        -: 1368:template <class _Tp, class _Allocator>
        -: 1369:void
        -: 1370:vector<_Tp, _Allocator>::__move_assign(vector& __c, false_type)
        -: 1371:    _NOEXCEPT_(__alloc_traits::is_always_equal::value)
        -: 1372:{
        -: 1373:    if (__base::__alloc() != __c.__alloc())
        -: 1374:    {
        -: 1375:        typedef move_iterator<iterator> _Ip;
        -: 1376:        assign(_Ip(__c.begin()), _Ip(__c.end()));
        -: 1377:    }
        -: 1378:    else
        -: 1379:        __move_assign(__c, true_type());
        -: 1380:}
        -: 1381:
        -: 1382:template <class _Tp, class _Allocator>
        -: 1383:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE13__move_assignERS8_NS_17integral_constantIbLb1EEE called 1 returned 100% blocks executed 100%
        1: 1384:vector<_Tp, _Allocator>::__move_assign(vector& __c, true_type)
        1: 1384-block  0
        -: 1385:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 1386:{
        1: 1387:    __vdeallocate();
        1: 1388:    __base::__move_assign_alloc(__c); // this can throw
        1: 1389:    this->__begin_ = __c.__begin_;
        1: 1390:    this->__end_ = __c.__end_;
        1: 1391:    this->__end_cap() = __c.__end_cap();
        1: 1392:    __c.__begin_ = __c.__end_ = __c.__end_cap() = nullptr;
        -: 1393:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1394:    __get_db()->swap(this, &__c);
        -: 1395:#endif
        1: 1396:}
        1: 1396-block  0
        -: 1397:
        -: 1398:#endif  // !_LIBCPP_CXX03_LANG
        -: 1399:
        -: 1400:template <class _Tp, class _Allocator>
        -: 1401:inline _LIBCPP_INLINE_VISIBILITY
        -: 1402:vector<_Tp, _Allocator>&
        -: 1403:vector<_Tp, _Allocator>::operator=(const vector& __x)
        -: 1404:{
        -: 1405:    if (this != &__x)
        -: 1406:    {
        -: 1407:        __base::__copy_assign_alloc(__x);
        -: 1408:        assign(__x.__begin_, __x.__end_);
        -: 1409:    }
        -: 1410:    return *this;
        -: 1411:}
        -: 1412:
        -: 1413:template <class _Tp, class _Allocator>
        -: 1414:template <class _InputIterator>
        -: 1415:typename enable_if
        -: 1416:<
        -: 1417:     __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1418:    !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1419:    is_constructible<
        -: 1420:       _Tp,
        -: 1421:       typename iterator_traits<_InputIterator>::reference>::value,
        -: 1422:    void
        -: 1423:>::type
        -: 1424:vector<_Tp, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 1425:{
        -: 1426:    clear();
        -: 1427:    for (; __first != __last; ++__first)
        -: 1428:        __emplace_back(*__first);
        -: 1429:}
        -: 1430:
        -: 1431:template <class _Tp, class _Allocator>
        -: 1432:template <class _ForwardIterator>
        -: 1433:typename enable_if
        -: 1434:<
        -: 1435:    __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1436:    is_constructible<
        -: 1437:       _Tp,
        -: 1438:       typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1439:    void
        -: 1440:>::type
        -: 1441:vector<_Tp, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 1442:{
        -: 1443:    size_type __new_size = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 1444:    if (__new_size <= capacity())
        -: 1445:    {
        -: 1446:        _ForwardIterator __mid = __last;
        -: 1447:        bool __growing = false;
        -: 1448:        if (__new_size > size())
        -: 1449:        {
        -: 1450:            __growing = true;
        -: 1451:            __mid =  __first;
        -: 1452:            _VSTD::advance(__mid, size());
        -: 1453:        }
        -: 1454:        pointer __m = _VSTD::copy(__first, __mid, this->__begin_);
        -: 1455:        if (__growing)
        -: 1456:            __construct_at_end(__mid, __last, __new_size - size());
        -: 1457:        else
        -: 1458:            this->__destruct_at_end(__m);
        -: 1459:    }
        -: 1460:    else
        -: 1461:    {
        -: 1462:        __vdeallocate();
        -: 1463:        __vallocate(__recommend(__new_size));
        -: 1464:        __construct_at_end(__first, __last, __new_size);
        -: 1465:    }
        -: 1466:    __invalidate_all_iterators();
        -: 1467:}
        -: 1468:
        -: 1469:template <class _Tp, class _Allocator>
        -: 1470:void
        -: 1471:vector<_Tp, _Allocator>::assign(size_type __n, const_reference __u)
        -: 1472:{
        -: 1473:    if (__n <= capacity())
        -: 1474:    {
        -: 1475:        size_type __s = size();
        -: 1476:        _VSTD::fill_n(this->__begin_, _VSTD::min(__n, __s), __u);
        -: 1477:        if (__n > __s)
        -: 1478:            __construct_at_end(__n - __s, __u);
        -: 1479:        else
        -: 1480:            this->__destruct_at_end(this->__begin_ + __n);
        -: 1481:    }
        -: 1482:    else
        -: 1483:    {
        -: 1484:        __vdeallocate();
        -: 1485:        __vallocate(__recommend(static_cast<size_type>(__n)));
        -: 1486:        __construct_at_end(__n, __u);
        -: 1487:    }
        -: 1488:    __invalidate_all_iterators();
        -: 1489:}
        -: 1490:
        -: 1491:template <class _Tp, class _Allocator>
        -: 1492:inline _LIBCPP_INLINE_VISIBILITY
        -: 1493:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE11__make_iterEPS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__make_iterEPS6_ called 38 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE11__make_iterEPS4_ called 4 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__make_iterEPS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE11__make_iterEPS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE11__make_iterEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE11__make_iterEPS3_ called 32 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE11__make_iterEPS3_ called 2 returned 100% blocks executed 100%
       76: 1494:vector<_Tp, _Allocator>::__make_iter(pointer __p) _NOEXCEPT
    $$$$$: 1494-block  0
       38: 1494-block  1
        4: 1494-block  2
    $$$$$: 1494-block  3
    $$$$$: 1494-block  4
    $$$$$: 1494-block  5
       32: 1494-block  6
        2: 1494-block  7
        -: 1495:{
        -: 1496:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1497:    return iterator(this, __p);
        -: 1498:#else
       76: 1499:    return iterator(__p);
    $$$$$: 1499-block  0
       38: 1499-block  1
        4: 1499-block  2
    $$$$$: 1499-block  3
    $$$$$: 1499-block  4
    $$$$$: 1499-block  5
       32: 1499-block  6
        2: 1499-block  7
        -: 1500:#endif
        -: 1501:}
        -: 1502:
        -: 1503:template <class _Tp, class _Allocator>
        -: 1504:inline _LIBCPP_INLINE_VISIBILITY
        -: 1505:typename vector<_Tp, _Allocator>::const_iterator
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE11__make_iterEPKS6_ called 84 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE11__make_iterEPKS4_ called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE11__make_iterEPKS2_ called 144 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 134 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 2 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 20 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE11__make_iterEPKS3_ called 4 returned 100% blocks executed 100%
      388: 1506:vector<_Tp, _Allocator>::__make_iter(const_pointer __p) const _NOEXCEPT
       84: 1506-block  0
    $$$$$: 1506-block  1
      144: 1506-block  2
      134: 1506-block  3
        2: 1506-block  4
       20: 1506-block  5
        4: 1506-block  6
        -: 1507:{
        -: 1508:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1509:    return const_iterator(this, __p);
        -: 1510:#else
      388: 1511:    return const_iterator(__p);
       84: 1511-block  0
    $$$$$: 1511-block  1
      144: 1511-block  2
      134: 1511-block  3
        2: 1511-block  4
       20: 1511-block  5
        4: 1511-block  6
        -: 1512:#endif
        -: 1513:}
        -: 1514:
        -: 1515:template <class _Tp, class _Allocator>
        -: 1516:inline _LIBCPP_INLINE_VISIBILITY
        -: 1517:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5beginEv called 23 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE5beginEv called 21 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE5beginEv called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE5beginEv called 1 returned 100% blocks executed 100%
       47: 1518:vector<_Tp, _Allocator>::begin() _NOEXCEPT
       23: 1518-block  0
    $$$$$: 1518-block  1
    $$$$$: 1518-block  2
    $$$$$: 1518-block  3
       21: 1518-block  4
    $$$$$: 1518-block  5
        2: 1518-block  6
        1: 1518-block  7
        -: 1519:{
       47: 1520:    return __make_iter(this->__begin_);
       23: 1520-block  0
    $$$$$: 1520-block  1
    $$$$$: 1520-block  2
    $$$$$: 1520-block  3
       21: 1520-block  4
    $$$$$: 1520-block  5
        2: 1520-block  6
        1: 1520-block  7
        -: 1521:}
        -: 1522:
        -: 1523:template <class _Tp, class _Allocator>
        -: 1524:inline _LIBCPP_INLINE_VISIBILITY
        -: 1525:typename vector<_Tp, _Allocator>::const_iterator
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5beginEv called 42 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE5beginEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE5beginEv called 6 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE5beginEv called 72 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE5beginEv called 22 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5beginEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE5beginEv called 2 returned 100% blocks executed 100%
      145: 1526:vector<_Tp, _Allocator>::begin() const _NOEXCEPT
       42: 1526-block  0
    $$$$$: 1526-block  1
        6: 1526-block  2
       72: 1526-block  3
       22: 1526-block  4
        1: 1526-block  5
        2: 1526-block  6
        -: 1527:{
      145: 1528:    return __make_iter(this->__begin_);
       42: 1528-block  0
    $$$$$: 1528-block  1
        6: 1528-block  2
       72: 1528-block  3
       22: 1528-block  4
        1: 1528-block  5
        2: 1528-block  6
        -: 1529:}
        -: 1530:
        -: 1531:template <class _Tp, class _Allocator>
        -: 1532:inline _LIBCPP_INLINE_VISIBILITY
        -: 1533:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE3endEv called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE3endEv called 11 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8internal30ParameterizedTestSuiteInfoBaseENS_9allocatorIS4_EEE3endEv called 2 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE3endEv called 1 returned 100% blocks executed 100%
       22: 1534:vector<_Tp, _Allocator>::end() _NOEXCEPT
        8: 1534-block  0
    $$$$$: 1534-block  1
    $$$$$: 1534-block  2
       11: 1534-block  3
    $$$$$: 1534-block  4
        2: 1534-block  5
        1: 1534-block  6
        -: 1535:{
       22: 1536:    return __make_iter(this->__end_);
        8: 1536-block  0
    $$$$$: 1536-block  1
    $$$$$: 1536-block  2
       11: 1536-block  3
    $$$$$: 1536-block  4
        2: 1536-block  5
        1: 1536-block  6
        -: 1537:}
        -: 1538:
        -: 1539:template <class _Tp, class _Allocator>
        -: 1540:inline _LIBCPP_INLINE_VISIBILITY
        -: 1541:typename vector<_Tp, _Allocator>::const_iterator
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE3endEv called 42 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE3endEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE3endEv called 14 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE3endEv called 72 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE3endEv called 112 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE3endEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE3endEv called 2 returned 100% blocks executed 100%
      243: 1542:vector<_Tp, _Allocator>::end() const _NOEXCEPT
       42: 1542-block  0
    $$$$$: 1542-block  1
       14: 1542-block  2
       72: 1542-block  3
      112: 1542-block  4
        1: 1542-block  5
        2: 1542-block  6
        -: 1543:{
      243: 1544:    return __make_iter(this->__end_);
       42: 1544-block  0
    $$$$$: 1544-block  1
       14: 1544-block  2
       72: 1544-block  3
      112: 1544-block  4
        1: 1544-block  5
        2: 1544-block  6
        -: 1545:}
        -: 1546:
        -: 1547:template <class _Tp, class _Allocator>
        -: 1548:inline _LIBCPP_INLINE_VISIBILITY
        -: 1549:typename vector<_Tp, _Allocator>::reference
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IdNS_9allocatorIdEEEENS1_IS3_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIdNS_9allocatorIdEEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS0_IN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEENS5_IS7_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEixEm called 20 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEEixEm called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEEixEm called 36 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEixEm called 4 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEEixEm called 0 returned 0% blocks executed 0%
       72: 1550:vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT
    $$$$$: 1550-block  0
    $$$$$: 1550-block  1
    $$$$$: 1550-block  2
    $$$$$: 1550-block  3
    $$$$$: 1550-block  4
       20: 1550-block  5
       12: 1550-block  6
       36: 1550-block  7
    $$$$$: 1550-block  8
        4: 1550-block  9
    $$$$$: 1550-block 10
        -: 1551:{
        -: 1552:    _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds");
       72: 1553:    return this->__begin_[__n];
    $$$$$: 1553-block  0
    $$$$$: 1553-block  1
    $$$$$: 1553-block  2
    $$$$$: 1553-block  3
    $$$$$: 1553-block  4
       20: 1553-block  5
       12: 1553-block  6
       36: 1553-block  7
    $$$$$: 1553-block  8
        4: 1553-block  9
    $$$$$: 1553-block 10
        -: 1554:}
        -: 1555:
        -: 1556:template <class _Tp, class _Allocator>
        -: 1557:inline _LIBCPP_INLINE_VISIBILITY
        -: 1558:typename vector<_Tp, _Allocator>::const_reference
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorImNS_9allocatorImEEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEEixEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEEixEm called 10 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEEixEm called 10 returned 100% blocks executed 100%
function _ZNKSt3__16vectorIiNS_9allocatorIiEEEixEm called 12 returned 100% blocks executed 100%
       32: 1559:vector<_Tp, _Allocator>::operator[](size_type __n) const _NOEXCEPT
    $$$$$: 1559-block  0
    $$$$$: 1559-block  1
    $$$$$: 1559-block  2
    $$$$$: 1559-block  3
       10: 1559-block  4
       10: 1559-block  5
       12: 1559-block  6
        -: 1560:{
        -: 1561:    _LIBCPP_ASSERT(__n < size(), "vector[] index out of bounds");
       32: 1562:    return this->__begin_[__n];
    $$$$$: 1562-block  0
    $$$$$: 1562-block  1
    $$$$$: 1562-block  2
    $$$$$: 1562-block  3
       10: 1562-block  4
       10: 1562-block  5
       12: 1562-block  6
        -: 1563:}
        -: 1564:
        -: 1565:template <class _Tp, class _Allocator>
        -: 1566:typename vector<_Tp, _Allocator>::reference
        -: 1567:vector<_Tp, _Allocator>::at(size_type __n)
        -: 1568:{
        -: 1569:    if (__n >= size())
        -: 1570:        this->__throw_out_of_range();
        -: 1571:    return this->__begin_[__n];
        -: 1572:}
        -: 1573:
        -: 1574:template <class _Tp, class _Allocator>
        -: 1575:typename vector<_Tp, _Allocator>::const_reference
function _ZNKSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE2atEm called 0 returned 0% blocks executed 0%
function _ZNKSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE2atEm called 0 returned 0% blocks executed 0%
    #####: 1576:vector<_Tp, _Allocator>::at(size_type __n) const
    $$$$$: 1576-block  0
    $$$$$: 1576-block  1
        -: 1577:{
    #####: 1578:    if (__n >= size())
    $$$$$: 1578-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1578-block  1
branch  2 never executed
branch  3 never executed
    #####: 1579:        this->__throw_out_of_range();
    $$$$$: 1579-block  0
    $$$$$: 1579-block  1
    #####: 1580:    return this->__begin_[__n];
    $$$$$: 1580-block  0
    $$$$$: 1580-block  1
        -: 1581:}
        -: 1582:
        -: 1583:template <class _Tp, class _Allocator>
        -: 1584:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE7reserveEm called 4 returned 0% blocks executed 71%
        4: 1585:vector<_Tp, _Allocator>::reserve(size_type __n)
        4: 1585-block  0
        -: 1586:{
        4: 1587:    if (__n > capacity())
        4: 1587-block  0
branch  0 taken 4
branch  1 taken 0
        -: 1588:    {
        4: 1589:        allocator_type& __a = this->__alloc();
        4: 1590:        __split_buffer<value_type, allocator_type&> __v(__n, size(), __a);
        4: 1591:        __swap_out_circular_buffer(__v);
        4: 1591-block  0
branch  0 taken 4
branch  1 taken 0
        4: 1592:    }
        4: 1592-block  0
    $$$$$: 1592-block  1
    $$$$$: 1592-block  2
        4: 1593:}
        4: 1593-block  0
        -: 1594:
        -: 1595:template <class _Tp, class _Allocator>
        -: 1596:void
        -: 1597:vector<_Tp, _Allocator>::shrink_to_fit() _NOEXCEPT
        -: 1598:{
        -: 1599:    if (capacity() > size())
        -: 1600:    {
        -: 1601:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1602:        try
        -: 1603:        {
        -: 1604:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1605:            allocator_type& __a = this->__alloc();
        -: 1606:            __split_buffer<value_type, allocator_type&> __v(size(), size(), __a);
        -: 1607:            __swap_out_circular_buffer(__v);
        -: 1608:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1609:        }
        -: 1610:        catch (...)
        -: 1611:        {
        -: 1612:        }
        -: 1613:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1614:    }
        -: 1615:}
        -: 1616:
        -: 1617:template <class _Tp, class _Allocator>
        -: 1618:template <class _Up>
        -: 1619:void
        -: 1620:#ifndef _LIBCPP_CXX03_LANG
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ called 9 returned 0% blocks executed 66%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE21__push_back_slow_pathImEEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 8 returned 0% blocks executed 66%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_ called 10 returned 0% blocks executed 66%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 1 returned 0% blocks executed 66%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_ called 2 returned 0% blocks executed 66%
       30: 1621:vector<_Tp, _Allocator>::__push_back_slow_path(_Up&& __x)
    $$$$$: 1621-block  0
    $$$$$: 1621-block  1
        9: 1621-block  2
    $$$$$: 1621-block  3
    $$$$$: 1621-block  4
    $$$$$: 1621-block  5
        8: 1621-block  6
       10: 1621-block  7
        1: 1621-block  8
    $$$$$: 1621-block  9
    $$$$$: 1621-block 10
        2: 1621-block 11
        -: 1622:#else
        -: 1623:vector<_Tp, _Allocator>::__push_back_slow_path(_Up& __x)
        -: 1624:#endif
        -: 1625:{
       30: 1626:    allocator_type& __a = this->__alloc();
       30: 1627:    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);
        -: 1628:    // __v.push_back(_VSTD::forward<_Up>(__x));
       30: 1629:    __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Up>(__x));
    $$$$$: 1629-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1629-block  1
branch  2 never executed
branch  3 never executed
        9: 1629-block  2
branch  4 taken 9
branch  5 taken 0
    $$$$$: 1629-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1629-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1629-block  5
branch 10 never executed
branch 11 never executed
        8: 1629-block  6
branch 12 taken 8
branch 13 taken 0
       10: 1629-block  7
branch 14 taken 10
branch 15 taken 0
        1: 1629-block  8
branch 16 taken 1
branch 17 taken 0
    $$$$$: 1629-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 1629-block 10
branch 20 never executed
branch 21 never executed
        2: 1629-block 11
branch 22 taken 2
branch 23 taken 0
       30: 1630:    __v.__end_++;
       30: 1631:    __swap_out_circular_buffer(__v);
    $$$$$: 1631-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1631-block  1
branch  2 never executed
branch  3 never executed
        9: 1631-block  2
branch  4 taken 9
branch  5 taken 0
    $$$$$: 1631-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1631-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1631-block  5
branch 10 never executed
branch 11 never executed
        8: 1631-block  6
branch 12 taken 8
branch 13 taken 0
       10: 1631-block  7
branch 14 taken 10
branch 15 taken 0
        1: 1631-block  8
branch 16 taken 1
branch 17 taken 0
    $$$$$: 1631-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 1631-block 10
branch 20 never executed
branch 21 never executed
        2: 1631-block 11
branch 22 taken 2
branch 23 taken 0
       30: 1632:}
    $$$$$: 1632-block  0
    $$$$$: 1632-block  1
    $$$$$: 1632-block  2
    $$$$$: 1632-block  3
    $$$$$: 1632-block  4
    $$$$$: 1632-block  5
        9: 1632-block  6
    $$$$$: 1632-block  7
    $$$$$: 1632-block  8
    $$$$$: 1632-block  9
    $$$$$: 1632-block 10
    $$$$$: 1632-block 11
    $$$$$: 1632-block 12
    $$$$$: 1632-block 13
    $$$$$: 1632-block 14
    $$$$$: 1632-block 15
    $$$$$: 1632-block 16
    $$$$$: 1632-block 17
        8: 1632-block 18
    $$$$$: 1632-block 19
    $$$$$: 1632-block 20
       10: 1632-block 21
    $$$$$: 1632-block 22
    $$$$$: 1632-block 23
        1: 1632-block 24
    $$$$$: 1632-block 25
    $$$$$: 1632-block 26
    $$$$$: 1632-block 27
    $$$$$: 1632-block 28
    $$$$$: 1632-block 29
    $$$$$: 1632-block 30
    $$$$$: 1632-block 31
    $$$$$: 1632-block 32
        2: 1632-block 33
    $$$$$: 1632-block 34
    $$$$$: 1632-block 35
        -: 1633:
        -: 1634:template <class _Tp, class _Allocator>
        -: 1635:inline _LIBCPP_INLINE_VISIBILITY
        -: 1636:void
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE9push_backERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE9push_backERKS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE9push_backERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE9push_backERKS3_ called 10 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE9push_backERKS3_ called 1 returned 100% blocks executed 80%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE9push_backERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE9push_backERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE9push_backERKS3_ called 2 returned 100% blocks executed 80%
       13: 1637:vector<_Tp, _Allocator>::push_back(const_reference __x)
    $$$$$: 1637-block  0
    $$$$$: 1637-block  1
    $$$$$: 1637-block  2
       10: 1637-block  3
        1: 1637-block  4
    $$$$$: 1637-block  5
    $$$$$: 1637-block  6
        2: 1637-block  7
        -: 1638:{
       13: 1639:    if (this->__end_ != this->__end_cap())
    $$$$$: 1639-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1639-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1639-block  2
branch  4 never executed
branch  5 never executed
       10: 1639-block  3
branch  6 taken 2
branch  7 taken 8
        1: 1639-block  4
branch  8 taken 0
branch  9 taken 1
    $$$$$: 1639-block  5
branch 10 never executed
branch 11 never executed
    $$$$$: 1639-block  6
branch 12 never executed
branch 13 never executed
        2: 1639-block  7
branch 14 taken 0
branch 15 taken 2
        -: 1640:    {
        2: 1641:        __construct_one_at_end(__x);
        2: 1642:    }
    $$$$$: 1642-block  0
    $$$$$: 1642-block  1
    $$$$$: 1642-block  2
        2: 1642-block  3
    $$$$$: 1642-block  4
    $$$$$: 1642-block  5
    $$$$$: 1642-block  6
    $$$$$: 1642-block  7
        -: 1643:    else
       11: 1644:        __push_back_slow_path(__x);
    $$$$$: 1644-block  0
    $$$$$: 1644-block  1
    $$$$$: 1644-block  2
        8: 1644-block  3
        1: 1644-block  4
    $$$$$: 1644-block  5
    $$$$$: 1644-block  6
        2: 1644-block  7
       13: 1645:}
    $$$$$: 1645-block  0
    $$$$$: 1645-block  1
    $$$$$: 1645-block  2
       10: 1645-block  3
        1: 1645-block  4
    $$$$$: 1645-block  5
    $$$$$: 1645-block  6
        2: 1645-block  7
        -: 1646:
        -: 1647:#ifndef _LIBCPP_CXX03_LANG
        -: 1648:
        -: 1649:template <class _Tp, class _Allocator>
        -: 1650:inline _LIBCPP_INLINE_VISIBILITY
        -: 1651:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backEOS6_ called 9 returned 100% blocks executed 80%
function _ZNSt3__16vectorImNS_9allocatorImEEE9push_backEOm called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE9push_backEOi called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE9push_backEOS1_ called 0 returned 0% blocks executed 0%
       21: 1652:vector<_Tp, _Allocator>::push_back(value_type&& __x)
        9: 1652-block  0
    $$$$$: 1652-block  1
       12: 1652-block  2
    $$$$$: 1652-block  3
        -: 1653:{
       21: 1654:    if (this->__end_ < this->__end_cap())
        9: 1654-block  0
branch  0 taken 0
branch  1 taken 9
    $$$$$: 1654-block  1
branch  2 never executed
branch  3 never executed
       12: 1654-block  2
branch  4 taken 2
branch  5 taken 10
    $$$$$: 1654-block  3
branch  6 never executed
branch  7 never executed
        -: 1655:    {
        2: 1656:        __construct_one_at_end(_VSTD::move(__x));
        2: 1657:    }
    $$$$$: 1657-block  0
    $$$$$: 1657-block  1
        2: 1657-block  2
    $$$$$: 1657-block  3
        -: 1658:    else
       19: 1659:        __push_back_slow_path(_VSTD::move(__x));
        9: 1659-block  0
    $$$$$: 1659-block  1
       10: 1659-block  2
    $$$$$: 1659-block  3
       21: 1660:}
        9: 1660-block  0
    $$$$$: 1660-block  1
       12: 1660-block  2
    $$$$$: 1660-block  3
        -: 1661:
        -: 1662:template <class _Tp, class _Allocator>
        -: 1663:template <class... _Args>
        -: 1664:void
        -: 1665:vector<_Tp, _Allocator>::__emplace_back_slow_path(_Args&&... __args)
        -: 1666:{
        -: 1667:    allocator_type& __a = this->__alloc();
        -: 1668:    __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), size(), __a);
        -: 1669://    __v.emplace_back(_VSTD::forward<_Args>(__args)...);
        -: 1670:    __alloc_traits::construct(__a, _VSTD::__to_address(__v.__end_), _VSTD::forward<_Args>(__args)...);
        -: 1671:    __v.__end_++;
        -: 1672:    __swap_out_circular_buffer(__v);
        -: 1673:}
        -: 1674:
        -: 1675:template <class _Tp, class _Allocator>
        -: 1676:template <class... _Args>
        -: 1677:inline
        -: 1678:#if _LIBCPP_STD_VER > 14
        -: 1679:typename vector<_Tp, _Allocator>::reference
        -: 1680:#else
        -: 1681:void
        -: 1682:#endif
        -: 1683:vector<_Tp, _Allocator>::emplace_back(_Args&&... __args)
        -: 1684:{
        -: 1685:    if (this->__end_ < this->__end_cap())
        -: 1686:    {
        -: 1687:        __construct_one_at_end(_VSTD::forward<_Args>(__args)...);
        -: 1688:    }
        -: 1689:    else
        -: 1690:        __emplace_back_slow_path(_VSTD::forward<_Args>(__args)...);
        -: 1691:#if _LIBCPP_STD_VER > 14
        -: 1692:    return this->back();
        -: 1693:#endif
        -: 1694:}
        -: 1695:
        -: 1696:#endif  // !_LIBCPP_CXX03_LANG
        -: 1697:
        -: 1698:template <class _Tp, class _Allocator>
        -: 1699:inline
        -: 1700:void
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE8pop_backEv called 0 returned 0% blocks executed 0%
    #####: 1701:vector<_Tp, _Allocator>::pop_back()
    $$$$$: 1701-block  0
        -: 1702:{
        -: 1703:    _LIBCPP_ASSERT(!empty(), "vector::pop_back called for empty vector");
    #####: 1704:    this->__destruct_at_end(this->__end_ - 1);
    #####: 1705:}
    $$$$$: 1705-block  0
        -: 1706:
        -: 1707:template <class _Tp, class _Allocator>
        -: 1708:inline _LIBCPP_INLINE_VISIBILITY
        -: 1709:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE5eraseENS_11__wrap_iterIPKS3_EE called 0 returned 0% blocks executed 0%
    #####: 1710:vector<_Tp, _Allocator>::erase(const_iterator __position)
    $$$$$: 1710-block  0
        -: 1711:{
        -: 1712:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1713:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1714:        "vector::erase(iterator) called with an iterator not"
        -: 1715:        " referring to this vector");
        -: 1716:#endif
        -: 1717:    _LIBCPP_ASSERT(__position != end(),
        -: 1718:        "vector::erase(iterator) called with a non-dereferenceable iterator");
    #####: 1719:    difference_type __ps = __position - cbegin();
    #####: 1720:    pointer __p = this->__begin_ + __ps;
    #####: 1721:    this->__destruct_at_end(_VSTD::move(__p + 1, this->__end_, __p));
    #####: 1722:    this->__invalidate_iterators_past(__p-1);
    #####: 1723:    iterator __r = __make_iter(__p);
    #####: 1724:    return __r;
    $$$$$: 1724-block  0
        -: 1725:}
        -: 1726:
        -: 1727:template <class _Tp, class _Allocator>
        -: 1728:typename vector<_Tp, _Allocator>::iterator
        -: 1729:vector<_Tp, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 1730:{
        -: 1731:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1732:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__first) == this,
        -: 1733:        "vector::erase(iterator,  iterator) called with an iterator not"
        -: 1734:        " referring to this vector");
        -: 1735:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__last) == this,
        -: 1736:        "vector::erase(iterator,  iterator) called with an iterator not"
        -: 1737:        " referring to this vector");
        -: 1738:#endif
        -: 1739:    _LIBCPP_ASSERT(__first <= __last, "vector::erase(first, last) called with invalid range");
        -: 1740:    pointer __p = this->__begin_ + (__first - begin());
        -: 1741:    if (__first != __last) {
        -: 1742:        this->__destruct_at_end(_VSTD::move(__p + (__last - __first), this->__end_, __p));
        -: 1743:        this->__invalidate_iterators_past(__p - 1);
        -: 1744:    }
        -: 1745:    iterator __r = __make_iter(__p);
        -: 1746:    return __r;
        -: 1747:}
        -: 1748:
        -: 1749:template <class _Tp, class _Allocator>
        -: 1750:void
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE12__move_rangeEPS1_S5_S5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE12__move_rangeEPS6_S9_S9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE12__move_rangeEPS3_S7_S7_ called 0 returned 0% blocks executed 0%
    #####: 1751:vector<_Tp, _Allocator>::__move_range(pointer __from_s, pointer __from_e, pointer __to)
    $$$$$: 1751-block  0
    $$$$$: 1751-block  1
    $$$$$: 1751-block  2
        -: 1752:{
    #####: 1753:    pointer __old_last = this->__end_;
    #####: 1754:    difference_type __n = __old_last - __to;
        -: 1755:    {
    #####: 1756:      pointer __i = __from_s + __n;
    #####: 1757:      _ConstructTransaction __tx(*this, __from_e - __i);
    #####: 1758:      for (pointer __pos = __tx.__pos_; __i < __from_e;
    $$$$$: 1758-block  0
    $$$$$: 1758-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1758-block  2
    $$$$$: 1758-block  3
    $$$$$: 1758-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 1758-block  5
    $$$$$: 1758-block  6
    $$$$$: 1758-block  7
branch  4 never executed
branch  5 never executed
    $$$$$: 1758-block  8
    #####: 1759:           ++__i, ++__pos, __tx.__pos_ = __pos) {
    #####: 1760:          __alloc_traits::construct(this->__alloc(),
    $$$$$: 1760-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1760-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1760-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1760-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1760-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 1760-block  5
branch 10 never executed
branch 11 never executed
    #####: 1761:                                    _VSTD::__to_address(__pos),
    #####: 1762:                                    _VSTD::move(*__i));
    #####: 1763:      }
    $$$$$: 1763-block  0
    $$$$$: 1763-block  1
    $$$$$: 1763-block  2
    #####: 1764:    }
    $$$$$: 1764-block  0
    $$$$$: 1764-block  1
    $$$$$: 1764-block  2
    $$$$$: 1764-block  3
    $$$$$: 1764-block  4
    $$$$$: 1764-block  5
    #####: 1765:    _VSTD::move_backward(__from_s, __from_s + __n, __old_last);
    #####: 1766:}
    $$$$$: 1766-block  0
    $$$$$: 1766-block  1
    $$$$$: 1766-block  2
        -: 1767:
        -: 1768:template <class _Tp, class _Allocator>
        -: 1769:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EERS8_ called 0 returned 0% blocks executed 0%
    #####: 1770:vector<_Tp, _Allocator>::insert(const_iterator __position, const_reference __x)
    $$$$$: 1770-block  0
        -: 1771:{
        -: 1772:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1773:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1774:        "vector::insert(iterator, x) called with an iterator not"
        -: 1775:        " referring to this vector");
        -: 1776:#endif
    #####: 1777:    pointer __p = this->__begin_ + (__position - begin());
    #####: 1778:    if (this->__end_ < this->__end_cap())
    $$$$$: 1778-block  0
branch  0 never executed
branch  1 never executed
        -: 1779:    {
    #####: 1780:        if (__p == this->__end_)
    $$$$$: 1780-block  0
branch  0 never executed
branch  1 never executed
        -: 1781:        {
    #####: 1782:            __construct_one_at_end(__x);
    #####: 1783:        }
    $$$$$: 1783-block  0
        -: 1784:        else
        -: 1785:        {
    #####: 1786:            __move_range(__p, this->__end_, __p + 1);
    #####: 1787:            const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
    #####: 1788:            if (__p <= __xr && __xr < this->__end_)
    $$$$$: 1788-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1788-block  1
branch  2 never executed
branch  3 never executed
    #####: 1789:                ++__xr;
    $$$$$: 1789-block  0
    #####: 1790:            *__p = *__xr;
    $$$$$: 1790-block  0
        -: 1791:        }
    #####: 1792:    }
    $$$$$: 1792-block  0
        -: 1793:    else
        -: 1794:    {
    #####: 1795:        allocator_type& __a = this->__alloc();
    #####: 1796:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    #####: 1797:        __v.push_back(__x);
    $$$$$: 1797-block  0
branch  0 never executed
branch  1 never executed
    #####: 1798:        __p = __swap_out_circular_buffer(__v, __p);
    $$$$$: 1798-block  0
branch  0 never executed
branch  1 never executed
    #####: 1799:    }
    $$$$$: 1799-block  0
    $$$$$: 1799-block  1
    $$$$$: 1799-block  2
    #####: 1800:    return __make_iter(__p);
    $$$$$: 1800-block  0
    #####: 1801:}
        -: 1802:
        -: 1803:#ifndef _LIBCPP_CXX03_LANG
        -: 1804:
        -: 1805:template <class _Tp, class _Allocator>
        -: 1806:typename vector<_Tp, _Allocator>::iterator
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEOS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6insertENS_11__wrap_iterIPKS6_EEOS6_ called 7 returned 0% blocks executed 50%
        7: 1807:vector<_Tp, _Allocator>::insert(const_iterator __position, value_type&& __x)
    $$$$$: 1807-block  0
        7: 1807-block  1
        -: 1808:{
        -: 1809:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1810:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1811:        "vector::insert(iterator, x) called with an iterator not"
        -: 1812:        " referring to this vector");
        -: 1813:#endif
        7: 1814:    pointer __p = this->__begin_ + (__position - begin());
        7: 1815:    if (this->__end_ < this->__end_cap())
    $$$$$: 1815-block  0
branch  0 never executed
branch  1 never executed
        7: 1815-block  1
branch  2 taken 7
branch  3 taken 0
        -: 1816:    {
        7: 1817:        if (__p == this->__end_)
    $$$$$: 1817-block  0
branch  0 never executed
branch  1 never executed
        7: 1817-block  1
branch  2 taken 7
branch  3 taken 0
        -: 1818:        {
        7: 1819:            __construct_one_at_end(_VSTD::move(__x));
        7: 1820:        }
    $$$$$: 1820-block  0
        7: 1820-block  1
        -: 1821:        else
        -: 1822:        {
    #####: 1823:            __move_range(__p, this->__end_, __p + 1);
    #####: 1824:            *__p = _VSTD::move(__x);
    $$$$$: 1824-block  0
    $$$$$: 1824-block  1
        -: 1825:        }
        7: 1826:    }
    $$$$$: 1826-block  0
        7: 1826-block  1
        -: 1827:    else
        -: 1828:    {
    #####: 1829:        allocator_type& __a = this->__alloc();
    #####: 1830:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
    #####: 1831:        __v.push_back(_VSTD::move(__x));
    $$$$$: 1831-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1831-block  1
branch  2 never executed
branch  3 never executed
    #####: 1832:        __p = __swap_out_circular_buffer(__v, __p);
    $$$$$: 1832-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1832-block  1
branch  2 never executed
branch  3 never executed
    #####: 1833:    }
    $$$$$: 1833-block  0
    $$$$$: 1833-block  1
    $$$$$: 1833-block  2
    $$$$$: 1833-block  3
    $$$$$: 1833-block  4
    $$$$$: 1833-block  5
        7: 1834:    return __make_iter(__p);
    $$$$$: 1834-block  0
        7: 1834-block  1
    #####: 1835:}
        -: 1836:
        -: 1837:template <class _Tp, class _Allocator>
        -: 1838:template <class... _Args>
        -: 1839:typename vector<_Tp, _Allocator>::iterator
        -: 1840:vector<_Tp, _Allocator>::emplace(const_iterator __position, _Args&&... __args)
        -: 1841:{
        -: 1842:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1843:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1844:        "vector::emplace(iterator, x) called with an iterator not"
        -: 1845:        " referring to this vector");
        -: 1846:#endif
        -: 1847:    pointer __p = this->__begin_ + (__position - begin());
        -: 1848:    if (this->__end_ < this->__end_cap())
        -: 1849:    {
        -: 1850:        if (__p == this->__end_)
        -: 1851:        {
        -: 1852:            __construct_one_at_end(_VSTD::forward<_Args>(__args)...);
        -: 1853:        }
        -: 1854:        else
        -: 1855:        {
        -: 1856:            __temp_value<value_type, _Allocator> __tmp(this->__alloc(), _VSTD::forward<_Args>(__args)...);
        -: 1857:            __move_range(__p, this->__end_, __p + 1);
        -: 1858:            *__p = _VSTD::move(__tmp.get());
        -: 1859:        }
        -: 1860:    }
        -: 1861:    else
        -: 1862:    {
        -: 1863:        allocator_type& __a = this->__alloc();
        -: 1864:        __split_buffer<value_type, allocator_type&> __v(__recommend(size() + 1), __p - this->__begin_, __a);
        -: 1865:        __v.emplace_back(_VSTD::forward<_Args>(__args)...);
        -: 1866:        __p = __swap_out_circular_buffer(__v, __p);
        -: 1867:    }
        -: 1868:    return __make_iter(__p);
        -: 1869:}
        -: 1870:
        -: 1871:#endif  // !_LIBCPP_CXX03_LANG
        -: 1872:
        -: 1873:template <class _Tp, class _Allocator>
        -: 1874:typename vector<_Tp, _Allocator>::iterator
        -: 1875:vector<_Tp, _Allocator>::insert(const_iterator __position, size_type __n, const_reference __x)
        -: 1876:{
        -: 1877:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1878:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1879:        "vector::insert(iterator, n, x) called with an iterator not"
        -: 1880:        " referring to this vector");
        -: 1881:#endif
        -: 1882:    pointer __p = this->__begin_ + (__position - begin());
        -: 1883:    if (__n > 0)
        -: 1884:    {
        -: 1885:        if (__n <= static_cast<size_type>(this->__end_cap() - this->__end_))
        -: 1886:        {
        -: 1887:            size_type __old_n = __n;
        -: 1888:            pointer __old_last = this->__end_;
        -: 1889:            if (__n > static_cast<size_type>(this->__end_ - __p))
        -: 1890:            {
        -: 1891:                size_type __cx = __n - (this->__end_ - __p);
        -: 1892:                __construct_at_end(__cx, __x);
        -: 1893:                __n -= __cx;
        -: 1894:            }
        -: 1895:            if (__n > 0)
        -: 1896:            {
        -: 1897:                __move_range(__p, __old_last, __p + __old_n);
        -: 1898:                const_pointer __xr = pointer_traits<const_pointer>::pointer_to(__x);
        -: 1899:                if (__p <= __xr && __xr < this->__end_)
        -: 1900:                    __xr += __old_n;
        -: 1901:                _VSTD::fill_n(__p, __n, *__xr);
        -: 1902:            }
        -: 1903:        }
        -: 1904:        else
        -: 1905:        {
        -: 1906:            allocator_type& __a = this->__alloc();
        -: 1907:            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
        -: 1908:            __v.__construct_at_end(__n, __x);
        -: 1909:            __p = __swap_out_circular_buffer(__v, __p);
        -: 1910:        }
        -: 1911:    }
        -: 1912:    return __make_iter(__p);
        -: 1913:}
        -: 1914:
        -: 1915:template <class _Tp, class _Allocator>
        -: 1916:template <class _InputIterator>
        -: 1917:typename enable_if
        -: 1918:<
        -: 1919:     __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 1920:    !__is_cpp17_forward_iterator<_InputIterator>::value &&
        -: 1921:    is_constructible<
        -: 1922:       _Tp,
        -: 1923:       typename iterator_traits<_InputIterator>::reference>::value,
        -: 1924:    typename vector<_Tp, _Allocator>::iterator
        -: 1925:>::type
        -: 1926:vector<_Tp, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
        -: 1927:{
        -: 1928:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1929:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1930:        "vector::insert(iterator, range) called with an iterator not"
        -: 1931:        " referring to this vector");
        -: 1932:#endif
        -: 1933:    difference_type __off = __position - begin();
        -: 1934:    pointer __p = this->__begin_ + __off;
        -: 1935:    allocator_type& __a = this->__alloc();
        -: 1936:    pointer __old_last = this->__end_;
        -: 1937:    for (; this->__end_ != this->__end_cap() && __first != __last; ++__first)
        -: 1938:    {
        -: 1939:        __construct_one_at_end(*__first);
        -: 1940:    }
        -: 1941:    __split_buffer<value_type, allocator_type&> __v(__a);
        -: 1942:    if (__first != __last)
        -: 1943:    {
        -: 1944:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1945:        try
        -: 1946:        {
        -: 1947:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1948:            __v.__construct_at_end(__first, __last);
        -: 1949:            difference_type __old_size = __old_last - this->__begin_;
        -: 1950:            difference_type __old_p = __p - this->__begin_;
        -: 1951:            reserve(__recommend(size() + __v.size()));
        -: 1952:            __p = this->__begin_ + __old_p;
        -: 1953:            __old_last = this->__begin_ + __old_size;
        -: 1954:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 1955:        }
        -: 1956:        catch (...)
        -: 1957:        {
        -: 1958:            erase(__make_iter(__old_last), end());
        -: 1959:            throw;
        -: 1960:        }
        -: 1961:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 1962:    }
        -: 1963:    __p = _VSTD::rotate(__p, __old_last, this->__end_);
        -: 1964:    insert(__make_iter(__p), _VSTD::make_move_iterator(__v.begin()),
        -: 1965:                             _VSTD::make_move_iterator(__v.end()));
        -: 1966:    return begin() + __off;
        -: 1967:}
        -: 1968:
        -: 1969:template <class _Tp, class _Allocator>
        -: 1970:template <class _ForwardIterator>
        -: 1971:typename enable_if
        -: 1972:<
        -: 1973:    __is_cpp17_forward_iterator<_ForwardIterator>::value &&
        -: 1974:    is_constructible<
        -: 1975:       _Tp,
        -: 1976:       typename iterator_traits<_ForwardIterator>::reference>::value,
        -: 1977:    typename vector<_Tp, _Allocator>::iterator
        -: 1978:>::type
        -: 1979:vector<_Tp, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)
        -: 1980:{
        -: 1981:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 1982:    _LIBCPP_ASSERT(__get_const_db()->__find_c_from_i(&__position) == this,
        -: 1983:        "vector::insert(iterator, range) called with an iterator not"
        -: 1984:        " referring to this vector");
        -: 1985:#endif
        -: 1986:    pointer __p = this->__begin_ + (__position - begin());
        -: 1987:    difference_type __n = _VSTD::distance(__first, __last);
        -: 1988:    if (__n > 0)
        -: 1989:    {
        -: 1990:        if (__n <= this->__end_cap() - this->__end_)
        -: 1991:        {
        -: 1992:            size_type __old_n = __n;
        -: 1993:            pointer __old_last = this->__end_;
        -: 1994:            _ForwardIterator __m = __last;
        -: 1995:            difference_type __dx = this->__end_ - __p;
        -: 1996:            if (__n > __dx)
        -: 1997:            {
        -: 1998:                __m = __first;
        -: 1999:                difference_type __diff = this->__end_ - __p;
        -: 2000:                _VSTD::advance(__m, __diff);
        -: 2001:                __construct_at_end(__m, __last, __n - __diff);
        -: 2002:                __n = __dx;
        -: 2003:            }
        -: 2004:            if (__n > 0)
        -: 2005:            {
        -: 2006:                __move_range(__p, __old_last, __p + __old_n);
        -: 2007:                _VSTD::copy(__first, __m, __p);
        -: 2008:            }
        -: 2009:        }
        -: 2010:        else
        -: 2011:        {
        -: 2012:            allocator_type& __a = this->__alloc();
        -: 2013:            __split_buffer<value_type, allocator_type&> __v(__recommend(size() + __n), __p - this->__begin_, __a);
        -: 2014:            __v.__construct_at_end(__first, __last);
        -: 2015:            __p = __swap_out_circular_buffer(__v, __p);
        -: 2016:        }
        -: 2017:    }
        -: 2018:    return __make_iter(__p);
        -: 2019:}
        -: 2020:
        -: 2021:template <class _Tp, class _Allocator>
        -: 2022:void
        -: 2023:vector<_Tp, _Allocator>::resize(size_type __sz)
        -: 2024:{
        -: 2025:    size_type __cs = size();
        -: 2026:    if (__cs < __sz)
        -: 2027:        this->__append(__sz - __cs);
        -: 2028:    else if (__cs > __sz)
        -: 2029:        this->__destruct_at_end(this->__begin_ + __sz);
        -: 2030:}
        -: 2031:
        -: 2032:template <class _Tp, class _Allocator>
        -: 2033:void
        -: 2034:vector<_Tp, _Allocator>::resize(size_type __sz, const_reference __x)
        -: 2035:{
        -: 2036:    size_type __cs = size();
        -: 2037:    if (__cs < __sz)
        -: 2038:        this->__append(__sz - __cs, __x);
        -: 2039:    else if (__cs > __sz)
        -: 2040:        this->__destruct_at_end(this->__begin_ + __sz);
        -: 2041:}
        -: 2042:
        -: 2043:template <class _Tp, class _Allocator>
        -: 2044:void
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4swapERS8_ called 5 returned 100% blocks executed 100%
        5: 2045:vector<_Tp, _Allocator>::swap(vector& __x)
        5: 2045-block  0
        -: 2046:#if _LIBCPP_STD_VER >= 14
        -: 2047:    _NOEXCEPT
        -: 2048:#else
        -: 2049:    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 2050:                __is_nothrow_swappable<allocator_type>::value)
        -: 2051:#endif
        -: 2052:{
        -: 2053:    _LIBCPP_ASSERT(__alloc_traits::propagate_on_container_swap::value ||
        -: 2054:                   this->__alloc() == __x.__alloc(),
        -: 2055:                   "vector::swap: Either propagate_on_container_swap must be true"
        -: 2056:                   " or the allocators must compare equal");
        5: 2057:    _VSTD::swap(this->__begin_, __x.__begin_);
        5: 2058:    _VSTD::swap(this->__end_, __x.__end_);
        5: 2059:    _VSTD::swap(this->__end_cap(), __x.__end_cap());
        5: 2060:    __swap_allocator(this->__alloc(), __x.__alloc(),
        -: 2061:        integral_constant<bool,__alloc_traits::propagate_on_container_swap::value>());
        -: 2062:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2063:    __get_db()->swap(this, &__x);
        -: 2064:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        5: 2065:}
        5: 2065-block  0
        -: 2066:
        -: 2067:template <class _Tp, class _Allocator>
        -: 2068:bool
        -: 2069:vector<_Tp, _Allocator>::__invariants() const
        -: 2070:{
        -: 2071:    if (this->__begin_ == nullptr)
        -: 2072:    {
        -: 2073:        if (this->__end_ != nullptr || this->__end_cap() != nullptr)
        -: 2074:            return false;
        -: 2075:    }
        -: 2076:    else
        -: 2077:    {
        -: 2078:        if (this->__begin_ > this->__end_)
        -: 2079:            return false;
        -: 2080:        if (this->__begin_ == this->__end_cap())
        -: 2081:            return false;
        -: 2082:        if (this->__end_ > this->__end_cap())
        -: 2083:            return false;
        -: 2084:    }
        -: 2085:    return true;
        -: 2086:}
        -: 2087:
        -: 2088:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2089:
        -: 2090:template <class _Tp, class _Allocator>
        -: 2091:bool
        -: 2092:vector<_Tp, _Allocator>::__dereferenceable(const const_iterator* __i) const
        -: 2093:{
        -: 2094:    return this->__begin_ <= __i->base() && __i->base() < this->__end_;
        -: 2095:}
        -: 2096:
        -: 2097:template <class _Tp, class _Allocator>
        -: 2098:bool
        -: 2099:vector<_Tp, _Allocator>::__decrementable(const const_iterator* __i) const
        -: 2100:{
        -: 2101:    return this->__begin_ < __i->base() && __i->base() <= this->__end_;
        -: 2102:}
        -: 2103:
        -: 2104:template <class _Tp, class _Allocator>
        -: 2105:bool
        -: 2106:vector<_Tp, _Allocator>::__addable(const const_iterator* __i, ptrdiff_t __n) const
        -: 2107:{
        -: 2108:    const_pointer __p = __i->base() + __n;
        -: 2109:    return this->__begin_ <= __p && __p <= this->__end_;
        -: 2110:}
        -: 2111:
        -: 2112:template <class _Tp, class _Allocator>
        -: 2113:bool
        -: 2114:vector<_Tp, _Allocator>::__subscriptable(const const_iterator* __i, ptrdiff_t __n) const
        -: 2115:{
        -: 2116:    const_pointer __p = __i->base() + __n;
        -: 2117:    return this->__begin_ <= __p && __p < this->__end_;
        -: 2118:}
        -: 2119:
        -: 2120:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
        -: 2121:
        -: 2122:template <class _Tp, class _Allocator>
        -: 2123:inline _LIBCPP_INLINE_VISIBILITY
        -: 2124:void
function _ZNSt3__16vectorIPcNS_9allocatorIS1_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__invalidate_all_iteratorsEv called 14 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing14TestPartResultENS_9allocatorIS2_EEE26__invalidate_all_iteratorsEv called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS4_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorImNS_9allocatorImEEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing12TestPropertyENS_9allocatorIS2_EEE26__invalidate_all_iteratorsEv called 12 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing8TestInfoENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 8 returned 100% blocks executed 100%
function _ZNSt3__16vectorIiNS_9allocatorIiEEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 1 returned 100% blocks executed 100%
function _ZNSt3__16vectorIPN7testing11EnvironmentENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIPN7testing9TestSuiteENS_9allocatorIS3_EEE26__invalidate_all_iteratorsEv called 2 returned 100% blocks executed 100%
       49: 2125:vector<_Tp, _Allocator>::__invalidate_all_iterators()
    $$$$$: 2125-block  0
       14: 2125-block  1
       12: 2125-block  2
    $$$$$: 2125-block  3
    $$$$$: 2125-block  4
       12: 2125-block  5
        8: 2125-block  6
    $$$$$: 2125-block  7
        1: 2125-block  8
    $$$$$: 2125-block  9
    $$$$$: 2125-block 10
        2: 2125-block 11
        -: 2126:{
        -: 2127:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2128:    __get_db()->__invalidate_all(this);
        -: 2129:#endif  // _LIBCPP_DEBUG_LEVEL >= 2
       49: 2130:}
    $$$$$: 2130-block  0
       14: 2130-block  1
       12: 2130-block  2
    $$$$$: 2130-block  3
    $$$$$: 2130-block  4
       12: 2130-block  5
        8: 2130-block  6
    $$$$$: 2130-block  7
        1: 2130-block  8
    $$$$$: 2130-block  9
    $$$$$: 2130-block 10
        2: 2130-block 11
        -: 2131:
        -: 2132:
        -: 2133:template <class _Tp, class _Allocator>
        -: 2134:inline _LIBCPP_INLINE_VISIBILITY
        -: 2135:void
function _ZNSt3__16vectorIPN7testing17TestEventListenerENS_9allocatorIS3_EEE27__invalidate_iterators_pastEPS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16vectorIN7testing8internal9TraceInfoENS_9allocatorIS3_EEE27__invalidate_iterators_pastEPS3_ called 0 returned 0% blocks executed 0%
    #####: 2136:vector<_Tp, _Allocator>::__invalidate_iterators_past(pointer __new_last) {
    $$$$$: 2136-block  0
    $$$$$: 2136-block  1
        -: 2137:#if _LIBCPP_DEBUG_LEVEL >= 2
        -: 2138:  __c_node* __c = __get_db()->__find_c_and_lock(this);
        -: 2139:  for (__i_node** __p = __c->end_; __p != __c->beg_; ) {
        -: 2140:    --__p;
        -: 2141:    const_iterator* __i = static_cast<const_iterator*>((*__p)->__i_);
        -: 2142:    if (__i->base() > __new_last) {
        -: 2143:      (*__p)->__c_ = nullptr;
        -: 2144:      if (--__c->end_ != __p)
        -: 2145:        memmove(__p, __p+1, (__c->end_ - __p)*sizeof(__i_node*));
        -: 2146:    }
        -: 2147:  }
        -: 2148:  __get_db()->unlock();
        -: 2149:#else
        -: 2150:  ((void)__new_last);
        -: 2151:#endif
    #####: 2152:}
    $$$$$: 2152-block  0
    $$$$$: 2152-block  1
        -: 2153:
        -: 2154:// vector<bool>
        -: 2155:
        -: 2156:template <class _Allocator> class vector<bool, _Allocator>;
        -: 2157:
        -: 2158:template <class _Allocator> struct hash<vector<bool, _Allocator> >;
        -: 2159:
        -: 2160:template <class _Allocator>
        -: 2161:struct __has_storage_type<vector<bool, _Allocator> >
        -: 2162:{
        -: 2163:    static const bool value = true;
        -: 2164:};
        -: 2165:
        -: 2166:template <class _Allocator>
        -: 2167:class _LIBCPP_TEMPLATE_VIS vector<bool, _Allocator>
        -: 2168:    : private __vector_base_common<true>
        -: 2169:{
        -: 2170:public:
        -: 2171:    typedef vector                                   __self;
        -: 2172:    typedef bool                                     value_type;
        -: 2173:    typedef _Allocator                               allocator_type;
        -: 2174:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -: 2175:    typedef typename __alloc_traits::size_type       size_type;
        -: 2176:    typedef typename __alloc_traits::difference_type difference_type;
        -: 2177:    typedef size_type __storage_type;
        -: 2178:    typedef __bit_iterator<vector, false>            pointer;
        -: 2179:    typedef __bit_iterator<vector, true>             const_pointer;
        -: 2180:    typedef pointer                                  iterator;
        -: 2181:    typedef const_pointer                            const_iterator;
        -: 2182:    typedef _VSTD::reverse_iterator<iterator>         reverse_iterator;
        -: 2183:    typedef _VSTD::reverse_iterator<const_iterator>   const_reverse_iterator;
        -: 2184:
        -: 2185:private:
        -: 2186:    typedef typename __rebind_alloc_helper<__alloc_traits, __storage_type>::type __storage_allocator;
        -: 2187:    typedef allocator_traits<__storage_allocator>    __storage_traits;
        -: 2188:    typedef typename __storage_traits::pointer       __storage_pointer;
        -: 2189:    typedef typename __storage_traits::const_pointer __const_storage_pointer;
        -: 2190:
        -: 2191:    __storage_pointer                                      __begin_;
        -: 2192:    size_type                                              __size_;
        -: 2193:    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;
        -: 2194:public:
        -: 2195:    typedef __bit_reference<vector>                  reference;
        -: 2196:    typedef __bit_const_reference<vector>            const_reference;
        -: 2197:private:
        -: 2198:    _LIBCPP_INLINE_VISIBILITY
        -: 2199:    size_type& __cap() _NOEXCEPT
        -: 2200:        {return __cap_alloc_.first();}
        -: 2201:    _LIBCPP_INLINE_VISIBILITY
        -: 2202:    const size_type& __cap() const _NOEXCEPT
        -: 2203:        {return __cap_alloc_.first();}
        -: 2204:    _LIBCPP_INLINE_VISIBILITY
        -: 2205:    __storage_allocator& __alloc() _NOEXCEPT
        -: 2206:        {return __cap_alloc_.second();}
        -: 2207:    _LIBCPP_INLINE_VISIBILITY
        -: 2208:    const __storage_allocator& __alloc() const _NOEXCEPT
        -: 2209:        {return __cap_alloc_.second();}
        -: 2210:
        -: 2211:    static const unsigned __bits_per_word = static_cast<unsigned>(sizeof(__storage_type) * CHAR_BIT);
        -: 2212:
        -: 2213:    _LIBCPP_INLINE_VISIBILITY
        -: 2214:    static size_type __internal_cap_to_external(size_type __n) _NOEXCEPT
        -: 2215:        {return __n * __bits_per_word;}
        -: 2216:    _LIBCPP_INLINE_VISIBILITY
        -: 2217:    static size_type __external_cap_to_internal(size_type __n) _NOEXCEPT
        -: 2218:        {return (__n - 1) / __bits_per_word + 1;}
        -: 2219:
        -: 2220:public:
        -: 2221:    _LIBCPP_INLINE_VISIBILITY
        -: 2222:    vector() _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value);
        -: 2223:
        -: 2224:    _LIBCPP_INLINE_VISIBILITY explicit vector(const allocator_type& __a)
        -: 2225:#if _LIBCPP_STD_VER <= 14
        -: 2226:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value);
        -: 2227:#else
        -: 2228:        _NOEXCEPT;
        -: 2229:#endif
        -: 2230:    ~vector();
        -: 2231:    explicit vector(size_type __n);
        -: 2232:#if _LIBCPP_STD_VER > 11
        -: 2233:    explicit vector(size_type __n, const allocator_type& __a);
        -: 2234:#endif
        -: 2235:    vector(size_type __n, const value_type& __v);
        -: 2236:    vector(size_type __n, const value_type& __v, const allocator_type& __a);
        -: 2237:    template <class _InputIterator>
        -: 2238:        vector(_InputIterator __first, _InputIterator __last,
        -: 2239:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2240:                                 !__is_cpp17_forward_iterator<_InputIterator>::value>::type* = 0);
        -: 2241:    template <class _InputIterator>
        -: 2242:        vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 2243:               typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2244:                                 !__is_cpp17_forward_iterator<_InputIterator>::value>::type* = 0);
        -: 2245:    template <class _ForwardIterator>
        -: 2246:        vector(_ForwardIterator __first, _ForwardIterator __last,
        -: 2247:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type* = 0);
        -: 2248:    template <class _ForwardIterator>
        -: 2249:        vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 2250:               typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type* = 0);
        -: 2251:
        -: 2252:    vector(const vector& __v);
        -: 2253:    vector(const vector& __v, const allocator_type& __a);
        -: 2254:    vector& operator=(const vector& __v);
        -: 2255:
        -: 2256:#ifndef _LIBCPP_CXX03_LANG
        -: 2257:    vector(initializer_list<value_type> __il);
        -: 2258:    vector(initializer_list<value_type> __il, const allocator_type& __a);
        -: 2259:
        -: 2260:    _LIBCPP_INLINE_VISIBILITY
        -: 2261:    vector(vector&& __v)
        -: 2262:#if _LIBCPP_STD_VER > 14
        -: 2263:        _NOEXCEPT;
        -: 2264:#else
        -: 2265:        _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value);
        -: 2266:#endif
        -: 2267:    vector(vector&& __v, const allocator_type& __a);
        -: 2268:    _LIBCPP_INLINE_VISIBILITY
        -: 2269:    vector& operator=(vector&& __v)
        -: 2270:        _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value));
        -: 2271:
        -: 2272:    _LIBCPP_INLINE_VISIBILITY
        -: 2273:    vector& operator=(initializer_list<value_type> __il)
        -: 2274:        {assign(__il.begin(), __il.end()); return *this;}
        -: 2275:
        -: 2276:#endif  // !_LIBCPP_CXX03_LANG
        -: 2277:
        -: 2278:    template <class _InputIterator>
        -: 2279:        typename enable_if
        -: 2280:        <
        -: 2281:            __is_cpp17_input_iterator<_InputIterator>::value &&
        -: 2282:           !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 2283:           void
        -: 2284:        >::type
        -: 2285:        assign(_InputIterator __first, _InputIterator __last);
        -: 2286:    template <class _ForwardIterator>
        -: 2287:        typename enable_if
        -: 2288:        <
        -: 2289:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2290:           void
        -: 2291:        >::type
        -: 2292:        assign(_ForwardIterator __first, _ForwardIterator __last);
        -: 2293:
        -: 2294:    void assign(size_type __n, const value_type& __x);
        -: 2295:
        -: 2296:#ifndef _LIBCPP_CXX03_LANG
        -: 2297:    _LIBCPP_INLINE_VISIBILITY
        -: 2298:    void assign(initializer_list<value_type> __il)
        -: 2299:        {assign(__il.begin(), __il.end());}
        -: 2300:#endif
        -: 2301:
        -: 2302:    _LIBCPP_INLINE_VISIBILITY allocator_type get_allocator() const _NOEXCEPT
        -: 2303:        {return allocator_type(this->__alloc());}
        -: 2304:
        -: 2305:    size_type max_size() const _NOEXCEPT;
        -: 2306:    _LIBCPP_INLINE_VISIBILITY
        -: 2307:    size_type capacity() const _NOEXCEPT
        -: 2308:        {return __internal_cap_to_external(__cap());}
        -: 2309:    _LIBCPP_INLINE_VISIBILITY
        -: 2310:    size_type size() const _NOEXCEPT
        -: 2311:        {return __size_;}
        -: 2312:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 2313:    bool empty() const _NOEXCEPT
        -: 2314:        {return __size_ == 0;}
        -: 2315:    void reserve(size_type __n);
        -: 2316:    void shrink_to_fit() _NOEXCEPT;
        -: 2317:
        -: 2318:    _LIBCPP_INLINE_VISIBILITY
        -: 2319:    iterator begin() _NOEXCEPT
        -: 2320:        {return __make_iter(0);}
        -: 2321:    _LIBCPP_INLINE_VISIBILITY
        -: 2322:    const_iterator begin() const _NOEXCEPT
        -: 2323:        {return __make_iter(0);}
        -: 2324:    _LIBCPP_INLINE_VISIBILITY
        -: 2325:    iterator end() _NOEXCEPT
        -: 2326:        {return __make_iter(__size_);}
        -: 2327:    _LIBCPP_INLINE_VISIBILITY
        -: 2328:    const_iterator end()   const _NOEXCEPT
        -: 2329:        {return __make_iter(__size_);}
        -: 2330:
        -: 2331:    _LIBCPP_INLINE_VISIBILITY
        -: 2332:    reverse_iterator rbegin() _NOEXCEPT
        -: 2333:        {return       reverse_iterator(end());}
        -: 2334:    _LIBCPP_INLINE_VISIBILITY
        -: 2335:    const_reverse_iterator rbegin() const _NOEXCEPT
        -: 2336:        {return const_reverse_iterator(end());}
        -: 2337:    _LIBCPP_INLINE_VISIBILITY
        -: 2338:    reverse_iterator rend() _NOEXCEPT
        -: 2339:        {return       reverse_iterator(begin());}
        -: 2340:    _LIBCPP_INLINE_VISIBILITY
        -: 2341:    const_reverse_iterator rend()   const _NOEXCEPT
        -: 2342:        {return const_reverse_iterator(begin());}
        -: 2343:
        -: 2344:    _LIBCPP_INLINE_VISIBILITY
        -: 2345:    const_iterator         cbegin()  const _NOEXCEPT
        -: 2346:        {return __make_iter(0);}
        -: 2347:    _LIBCPP_INLINE_VISIBILITY
        -: 2348:    const_iterator         cend()    const _NOEXCEPT
        -: 2349:        {return __make_iter(__size_);}
        -: 2350:    _LIBCPP_INLINE_VISIBILITY
        -: 2351:    const_reverse_iterator crbegin() const _NOEXCEPT
        -: 2352:        {return rbegin();}
        -: 2353:    _LIBCPP_INLINE_VISIBILITY
        -: 2354:    const_reverse_iterator crend()   const _NOEXCEPT
        -: 2355:        {return rend();}
        -: 2356:
        -: 2357:    _LIBCPP_INLINE_VISIBILITY reference       operator[](size_type __n)       {return __make_ref(__n);}
        -: 2358:    _LIBCPP_INLINE_VISIBILITY const_reference operator[](size_type __n) const {return __make_ref(__n);}
        -: 2359:    reference       at(size_type __n);
        -: 2360:    const_reference at(size_type __n) const;
        -: 2361:
        -: 2362:    _LIBCPP_INLINE_VISIBILITY reference       front()       {return __make_ref(0);}
        -: 2363:    _LIBCPP_INLINE_VISIBILITY const_reference front() const {return __make_ref(0);}
        -: 2364:    _LIBCPP_INLINE_VISIBILITY reference       back()        {return __make_ref(__size_ - 1);}
        -: 2365:    _LIBCPP_INLINE_VISIBILITY const_reference back()  const {return __make_ref(__size_ - 1);}
        -: 2366:
        -: 2367:    void push_back(const value_type& __x);
        -: 2368:#if _LIBCPP_STD_VER > 11
        -: 2369:    template <class... _Args>
        -: 2370:#if _LIBCPP_STD_VER > 14
        -: 2371:    _LIBCPP_INLINE_VISIBILITY reference emplace_back(_Args&&... __args)
        -: 2372:#else
        -: 2373:    _LIBCPP_INLINE_VISIBILITY void      emplace_back(_Args&&... __args)
        -: 2374:#endif
        -: 2375:    {
        -: 2376:        push_back ( value_type ( _VSTD::forward<_Args>(__args)... ));
        -: 2377:#if _LIBCPP_STD_VER > 14
        -: 2378:        return this->back();
        -: 2379:#endif
        -: 2380:    }
        -: 2381:#endif
        -: 2382:
        -: 2383:    _LIBCPP_INLINE_VISIBILITY void pop_back() {--__size_;}
        -: 2384:
        -: 2385:#if _LIBCPP_STD_VER > 11
        -: 2386:    template <class... _Args>
        -: 2387:   _LIBCPP_INLINE_VISIBILITY iterator emplace(const_iterator position, _Args&&... __args)
        -: 2388:        { return insert ( position, value_type ( _VSTD::forward<_Args>(__args)... )); }
        -: 2389:#endif
        -: 2390:
        -: 2391:    iterator insert(const_iterator __position, const value_type& __x);
        -: 2392:    iterator insert(const_iterator __position, size_type __n, const value_type& __x);
        -: 2393:    iterator insert(const_iterator __position, size_type __n, const_reference __x);
        -: 2394:    template <class _InputIterator>
        -: 2395:        typename enable_if
        -: 2396:        <
        -: 2397:             __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2398:            !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 2399:            iterator
        -: 2400:        >::type
        -: 2401:        insert(const_iterator __position, _InputIterator __first, _InputIterator __last);
        -: 2402:    template <class _ForwardIterator>
        -: 2403:        typename enable_if
        -: 2404:        <
        -: 2405:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2406:            iterator
        -: 2407:        >::type
        -: 2408:        insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last);
        -: 2409:
        -: 2410:#ifndef _LIBCPP_CXX03_LANG
        -: 2411:    _LIBCPP_INLINE_VISIBILITY
        -: 2412:    iterator insert(const_iterator __position, initializer_list<value_type> __il)
        -: 2413:        {return insert(__position, __il.begin(), __il.end());}
        -: 2414:#endif
        -: 2415:
        -: 2416:    _LIBCPP_INLINE_VISIBILITY iterator erase(const_iterator __position);
        -: 2417:    iterator erase(const_iterator __first, const_iterator __last);
        -: 2418:
        -: 2419:    _LIBCPP_INLINE_VISIBILITY
        -: 2420:    void clear() _NOEXCEPT {__size_ = 0;}
        -: 2421:
        -: 2422:    void swap(vector&)
        -: 2423:#if _LIBCPP_STD_VER >= 14
        -: 2424:        _NOEXCEPT;
        -: 2425:#else
        -: 2426:        _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 2427:                    __is_nothrow_swappable<allocator_type>::value);
        -: 2428:#endif
        -: 2429:    static void swap(reference __x, reference __y) _NOEXCEPT { _VSTD::swap(__x, __y); }
        -: 2430:
        -: 2431:    void resize(size_type __sz, value_type __x = false);
        -: 2432:    void flip() _NOEXCEPT;
        -: 2433:
        -: 2434:    bool __invariants() const;
        -: 2435:
        -: 2436:private:
        -: 2437:    _LIBCPP_INLINE_VISIBILITY void __invalidate_all_iterators();
        -: 2438:    void __vallocate(size_type __n);
        -: 2439:    void __vdeallocate() _NOEXCEPT;
        -: 2440:    _LIBCPP_INLINE_VISIBILITY
        -: 2441:    static size_type __align_it(size_type __new_size) _NOEXCEPT
        -: 2442:        {return __new_size + (__bits_per_word-1) & ~((size_type)__bits_per_word-1);}
        -: 2443:    _LIBCPP_INLINE_VISIBILITY  size_type __recommend(size_type __new_size) const;
        -: 2444:    _LIBCPP_INLINE_VISIBILITY void __construct_at_end(size_type __n, bool __x);
        -: 2445:    template <class _ForwardIterator>
        -: 2446:        typename enable_if
        -: 2447:        <
        -: 2448:            __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2449:            void
        -: 2450:        >::type
        -: 2451:        __construct_at_end(_ForwardIterator __first, _ForwardIterator __last);
        -: 2452:    void __append(size_type __n, const_reference __x);
        -: 2453:    _LIBCPP_INLINE_VISIBILITY
        -: 2454:    reference __make_ref(size_type __pos) _NOEXCEPT
        -: 2455:        {return reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}
        -: 2456:    _LIBCPP_INLINE_VISIBILITY
        -: 2457:    const_reference __make_ref(size_type __pos) const _NOEXCEPT
        -: 2458:        {return const_reference(__begin_ + __pos / __bits_per_word, __storage_type(1) << __pos % __bits_per_word);}
        -: 2459:    _LIBCPP_INLINE_VISIBILITY
        -: 2460:    iterator __make_iter(size_type __pos) _NOEXCEPT
        -: 2461:        {return iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}
        -: 2462:    _LIBCPP_INLINE_VISIBILITY
        -: 2463:    const_iterator __make_iter(size_type __pos) const _NOEXCEPT
        -: 2464:        {return const_iterator(__begin_ + __pos / __bits_per_word, static_cast<unsigned>(__pos % __bits_per_word));}
        -: 2465:    _LIBCPP_INLINE_VISIBILITY
        -: 2466:    iterator __const_iterator_cast(const_iterator __p) _NOEXCEPT
        -: 2467:        {return begin() + (__p - cbegin());}
        -: 2468:
        -: 2469:    _LIBCPP_INLINE_VISIBILITY
        -: 2470:    void __copy_assign_alloc(const vector& __v)
        -: 2471:        {__copy_assign_alloc(__v, integral_constant<bool,
        -: 2472:                      __storage_traits::propagate_on_container_copy_assignment::value>());}
        -: 2473:    _LIBCPP_INLINE_VISIBILITY
        -: 2474:    void __copy_assign_alloc(const vector& __c, true_type)
        -: 2475:        {
        -: 2476:            if (__alloc() != __c.__alloc())
        -: 2477:                __vdeallocate();
        -: 2478:            __alloc() = __c.__alloc();
        -: 2479:        }
        -: 2480:
        -: 2481:    _LIBCPP_INLINE_VISIBILITY
        -: 2482:    void __copy_assign_alloc(const vector&, false_type)
        -: 2483:        {}
        -: 2484:
        -: 2485:    void __move_assign(vector& __c, false_type);
        -: 2486:    void __move_assign(vector& __c, true_type)
        -: 2487:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value);
        -: 2488:    _LIBCPP_INLINE_VISIBILITY
        -: 2489:    void __move_assign_alloc(vector& __c)
        -: 2490:        _NOEXCEPT_(
        -: 2491:            !__storage_traits::propagate_on_container_move_assignment::value ||
        -: 2492:            is_nothrow_move_assignable<allocator_type>::value)
        -: 2493:        {__move_assign_alloc(__c, integral_constant<bool,
        -: 2494:                      __storage_traits::propagate_on_container_move_assignment::value>());}
        -: 2495:    _LIBCPP_INLINE_VISIBILITY
        -: 2496:    void __move_assign_alloc(vector& __c, true_type)
        -: 2497:        _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2498:        {
        -: 2499:            __alloc() = _VSTD::move(__c.__alloc());
        -: 2500:        }
        -: 2501:
        -: 2502:    _LIBCPP_INLINE_VISIBILITY
        -: 2503:    void __move_assign_alloc(vector&, false_type)
        -: 2504:        _NOEXCEPT
        -: 2505:        {}
        -: 2506:
        -: 2507:    size_t __hash_code() const _NOEXCEPT;
        -: 2508:
        -: 2509:    friend class __bit_reference<vector>;
        -: 2510:    friend class __bit_const_reference<vector>;
        -: 2511:    friend class __bit_iterator<vector, false>;
        -: 2512:    friend class __bit_iterator<vector, true>;
        -: 2513:    friend struct __bit_array<vector>;
        -: 2514:    friend struct _LIBCPP_TEMPLATE_VIS hash<vector>;
        -: 2515:};
        -: 2516:
        -: 2517:template <class _Allocator>
        -: 2518:inline _LIBCPP_INLINE_VISIBILITY
        -: 2519:void
        -: 2520:vector<bool, _Allocator>::__invalidate_all_iterators()
        -: 2521:{
        -: 2522:}
        -: 2523:
        -: 2524://  Allocate space for __n objects
        -: 2525://  throws length_error if __n > max_size()
        -: 2526://  throws (probably bad_alloc) if memory run out
        -: 2527://  Precondition:  __begin_ == __end_ == __cap() == 0
        -: 2528://  Precondition:  __n > 0
        -: 2529://  Postcondition:  capacity() == __n
        -: 2530://  Postcondition:  size() == 0
        -: 2531:template <class _Allocator>
        -: 2532:void
        -: 2533:vector<bool, _Allocator>::__vallocate(size_type __n)
        -: 2534:{
        -: 2535:    if (__n > max_size())
        -: 2536:        this->__throw_length_error();
        -: 2537:    __n = __external_cap_to_internal(__n);
        -: 2538:    this->__begin_ = __storage_traits::allocate(this->__alloc(), __n);
        -: 2539:    this->__size_ = 0;
        -: 2540:    this->__cap() = __n;
        -: 2541:}
        -: 2542:
        -: 2543:template <class _Allocator>
        -: 2544:void
        -: 2545:vector<bool, _Allocator>::__vdeallocate() _NOEXCEPT
        -: 2546:{
        -: 2547:    if (this->__begin_ != nullptr)
        -: 2548:    {
        -: 2549:        __storage_traits::deallocate(this->__alloc(), this->__begin_, __cap());
        -: 2550:        __invalidate_all_iterators();
        -: 2551:        this->__begin_ = nullptr;
        -: 2552:        this->__size_ = this->__cap() = 0;
        -: 2553:    }
        -: 2554:}
        -: 2555:
        -: 2556:template <class _Allocator>
        -: 2557:typename vector<bool, _Allocator>::size_type
        -: 2558:vector<bool, _Allocator>::max_size() const _NOEXCEPT
        -: 2559:{
        -: 2560:    size_type __amax = __storage_traits::max_size(__alloc());
        -: 2561:    size_type __nmax = numeric_limits<size_type>::max() / 2;  // end() >= begin(), always
        -: 2562:    if (__nmax / __bits_per_word <= __amax)
        -: 2563:        return __nmax;
        -: 2564:    return __internal_cap_to_external(__amax);
        -: 2565:}
        -: 2566:
        -: 2567://  Precondition:  __new_size > capacity()
        -: 2568:template <class _Allocator>
        -: 2569:inline _LIBCPP_INLINE_VISIBILITY
        -: 2570:typename vector<bool, _Allocator>::size_type
        -: 2571:vector<bool, _Allocator>::__recommend(size_type __new_size) const
        -: 2572:{
        -: 2573:    const size_type __ms = max_size();
        -: 2574:    if (__new_size > __ms)
        -: 2575:        this->__throw_length_error();
        -: 2576:    const size_type __cap = capacity();
        -: 2577:    if (__cap >= __ms / 2)
        -: 2578:        return __ms;
        -: 2579:    return _VSTD::max(2*__cap, __align_it(__new_size));
        -: 2580:}
        -: 2581:
        -: 2582://  Default constructs __n objects starting at __end_
        -: 2583://  Precondition:  __n > 0
        -: 2584://  Precondition:  size() + __n <= capacity()
        -: 2585://  Postcondition:  size() == size() + __n
        -: 2586:template <class _Allocator>
        -: 2587:inline _LIBCPP_INLINE_VISIBILITY
        -: 2588:void
        -: 2589:vector<bool, _Allocator>::__construct_at_end(size_type __n, bool __x)
        -: 2590:{
        -: 2591:    size_type __old_size = this->__size_;
        -: 2592:    this->__size_ += __n;
        -: 2593:    if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word))
        -: 2594:    {
        -: 2595:        if (this->__size_ <= __bits_per_word)
        -: 2596:            this->__begin_[0] = __storage_type(0);
        -: 2597:        else
        -: 2598:            this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
        -: 2599:    }
        -: 2600:    _VSTD::fill_n(__make_iter(__old_size), __n, __x);
        -: 2601:}
        -: 2602:
        -: 2603:template <class _Allocator>
        -: 2604:template <class _ForwardIterator>
        -: 2605:typename enable_if
        -: 2606:<
        -: 2607:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2608:    void
        -: 2609:>::type
        -: 2610:vector<bool, _Allocator>::__construct_at_end(_ForwardIterator __first, _ForwardIterator __last)
        -: 2611:{
        -: 2612:    size_type __old_size = this->__size_;
        -: 2613:    this->__size_ += _VSTD::distance(__first, __last);
        -: 2614:    if (__old_size == 0 || ((__old_size - 1) / __bits_per_word) != ((this->__size_ - 1) / __bits_per_word))
        -: 2615:    {
        -: 2616:        if (this->__size_ <= __bits_per_word)
        -: 2617:            this->__begin_[0] = __storage_type(0);
        -: 2618:        else
        -: 2619:            this->__begin_[(this->__size_ - 1) / __bits_per_word] = __storage_type(0);
        -: 2620:    }
        -: 2621:    _VSTD::copy(__first, __last, __make_iter(__old_size));
        -: 2622:}
        -: 2623:
        -: 2624:template <class _Allocator>
        -: 2625:inline _LIBCPP_INLINE_VISIBILITY
        -: 2626:vector<bool, _Allocator>::vector()
        -: 2627:    _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
        -: 2628:    : __begin_(nullptr),
        -: 2629:      __size_(0),
        -: 2630:      __cap_alloc_(0, __default_init_tag())
        -: 2631:{
        -: 2632:}
        -: 2633:
        -: 2634:template <class _Allocator>
        -: 2635:inline _LIBCPP_INLINE_VISIBILITY
        -: 2636:vector<bool, _Allocator>::vector(const allocator_type& __a)
        -: 2637:#if _LIBCPP_STD_VER <= 14
        -: 2638:        _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -: 2639:#else
        -: 2640:        _NOEXCEPT
        -: 2641:#endif
        -: 2642:    : __begin_(nullptr),
        -: 2643:      __size_(0),
        -: 2644:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2645:{
        -: 2646:}
        -: 2647:
        -: 2648:template <class _Allocator>
        -: 2649:vector<bool, _Allocator>::vector(size_type __n)
        -: 2650:    : __begin_(nullptr),
        -: 2651:      __size_(0),
        -: 2652:      __cap_alloc_(0, __default_init_tag())
        -: 2653:{
        -: 2654:    if (__n > 0)
        -: 2655:    {
        -: 2656:        __vallocate(__n);
        -: 2657:        __construct_at_end(__n, false);
        -: 2658:    }
        -: 2659:}
        -: 2660:
        -: 2661:#if _LIBCPP_STD_VER > 11
        -: 2662:template <class _Allocator>
        -: 2663:vector<bool, _Allocator>::vector(size_type __n, const allocator_type& __a)
        -: 2664:    : __begin_(nullptr),
        -: 2665:      __size_(0),
        -: 2666:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2667:{
        -: 2668:    if (__n > 0)
        -: 2669:    {
        -: 2670:        __vallocate(__n);
        -: 2671:        __construct_at_end(__n, false);
        -: 2672:    }
        -: 2673:}
        -: 2674:#endif
        -: 2675:
        -: 2676:template <class _Allocator>
        -: 2677:vector<bool, _Allocator>::vector(size_type __n, const value_type& __x)
        -: 2678:    : __begin_(nullptr),
        -: 2679:      __size_(0),
        -: 2680:      __cap_alloc_(0, __default_init_tag())
        -: 2681:{
        -: 2682:    if (__n > 0)
        -: 2683:    {
        -: 2684:        __vallocate(__n);
        -: 2685:        __construct_at_end(__n, __x);
        -: 2686:    }
        -: 2687:}
        -: 2688:
        -: 2689:template <class _Allocator>
        -: 2690:vector<bool, _Allocator>::vector(size_type __n, const value_type& __x, const allocator_type& __a)
        -: 2691:    : __begin_(nullptr),
        -: 2692:      __size_(0),
        -: 2693:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2694:{
        -: 2695:    if (__n > 0)
        -: 2696:    {
        -: 2697:        __vallocate(__n);
        -: 2698:        __construct_at_end(__n, __x);
        -: 2699:    }
        -: 2700:}
        -: 2701:
        -: 2702:template <class _Allocator>
        -: 2703:template <class _InputIterator>
        -: 2704:vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last,
        -: 2705:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2706:                         !__is_cpp17_forward_iterator<_InputIterator>::value>::type*)
        -: 2707:    : __begin_(nullptr),
        -: 2708:      __size_(0),
        -: 2709:      __cap_alloc_(0, __default_init_tag())
        -: 2710:{
        -: 2711:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2712:    try
        -: 2713:    {
        -: 2714:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2715:        for (; __first != __last; ++__first)
        -: 2716:            push_back(*__first);
        -: 2717:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2718:    }
        -: 2719:    catch (...)
        -: 2720:    {
        -: 2721:        if (__begin_ != nullptr)
        -: 2722:            __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2723:        __invalidate_all_iterators();
        -: 2724:        throw;
        -: 2725:    }
        -: 2726:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2727:}
        -: 2728:
        -: 2729:template <class _Allocator>
        -: 2730:template <class _InputIterator>
        -: 2731:vector<bool, _Allocator>::vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a,
        -: 2732:       typename enable_if<__is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 2733:                         !__is_cpp17_forward_iterator<_InputIterator>::value>::type*)
        -: 2734:    : __begin_(nullptr),
        -: 2735:      __size_(0),
        -: 2736:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2737:{
        -: 2738:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2739:    try
        -: 2740:    {
        -: 2741:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2742:        for (; __first != __last; ++__first)
        -: 2743:            push_back(*__first);
        -: 2744:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2745:    }
        -: 2746:    catch (...)
        -: 2747:    {
        -: 2748:        if (__begin_ != nullptr)
        -: 2749:            __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2750:        __invalidate_all_iterators();
        -: 2751:        throw;
        -: 2752:    }
        -: 2753:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 2754:}
        -: 2755:
        -: 2756:template <class _Allocator>
        -: 2757:template <class _ForwardIterator>
        -: 2758:vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last,
        -: 2759:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type*)
        -: 2760:    : __begin_(nullptr),
        -: 2761:      __size_(0),
        -: 2762:      __cap_alloc_(0, __default_init_tag())
        -: 2763:{
        -: 2764:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2765:    if (__n > 0)
        -: 2766:    {
        -: 2767:        __vallocate(__n);
        -: 2768:        __construct_at_end(__first, __last);
        -: 2769:    }
        -: 2770:}
        -: 2771:
        -: 2772:template <class _Allocator>
        -: 2773:template <class _ForwardIterator>
        -: 2774:vector<bool, _Allocator>::vector(_ForwardIterator __first, _ForwardIterator __last, const allocator_type& __a,
        -: 2775:                                typename enable_if<__is_cpp17_forward_iterator<_ForwardIterator>::value>::type*)
        -: 2776:    : __begin_(nullptr),
        -: 2777:      __size_(0),
        -: 2778:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2779:{
        -: 2780:    size_type __n = static_cast<size_type>(_VSTD::distance(__first, __last));
        -: 2781:    if (__n > 0)
        -: 2782:    {
        -: 2783:        __vallocate(__n);
        -: 2784:        __construct_at_end(__first, __last);
        -: 2785:    }
        -: 2786:}
        -: 2787:
        -: 2788:#ifndef _LIBCPP_CXX03_LANG
        -: 2789:
        -: 2790:template <class _Allocator>
        -: 2791:vector<bool, _Allocator>::vector(initializer_list<value_type> __il)
        -: 2792:    : __begin_(nullptr),
        -: 2793:      __size_(0),
        -: 2794:      __cap_alloc_(0, __default_init_tag())
        -: 2795:{
        -: 2796:    size_type __n = static_cast<size_type>(__il.size());
        -: 2797:    if (__n > 0)
        -: 2798:    {
        -: 2799:        __vallocate(__n);
        -: 2800:        __construct_at_end(__il.begin(), __il.end());
        -: 2801:    }
        -: 2802:}
        -: 2803:
        -: 2804:template <class _Allocator>
        -: 2805:vector<bool, _Allocator>::vector(initializer_list<value_type> __il, const allocator_type& __a)
        -: 2806:    : __begin_(nullptr),
        -: 2807:      __size_(0),
        -: 2808:      __cap_alloc_(0, static_cast<__storage_allocator>(__a))
        -: 2809:{
        -: 2810:    size_type __n = static_cast<size_type>(__il.size());
        -: 2811:    if (__n > 0)
        -: 2812:    {
        -: 2813:        __vallocate(__n);
        -: 2814:        __construct_at_end(__il.begin(), __il.end());
        -: 2815:    }
        -: 2816:}
        -: 2817:
        -: 2818:#endif  // _LIBCPP_CXX03_LANG
        -: 2819:
        -: 2820:template <class _Allocator>
        -: 2821:vector<bool, _Allocator>::~vector()
        -: 2822:{
        -: 2823:    if (__begin_ != nullptr)
        -: 2824:        __storage_traits::deallocate(__alloc(), __begin_, __cap());
        -: 2825:    __invalidate_all_iterators();
        -: 2826:}
        -: 2827:
        -: 2828:template <class _Allocator>
        -: 2829:vector<bool, _Allocator>::vector(const vector& __v)
        -: 2830:    : __begin_(nullptr),
        -: 2831:      __size_(0),
        -: 2832:      __cap_alloc_(0, __storage_traits::select_on_container_copy_construction(__v.__alloc()))
        -: 2833:{
        -: 2834:    if (__v.size() > 0)
        -: 2835:    {
        -: 2836:        __vallocate(__v.size());
        -: 2837:        __construct_at_end(__v.begin(), __v.end());
        -: 2838:    }
        -: 2839:}
        -: 2840:
        -: 2841:template <class _Allocator>
        -: 2842:vector<bool, _Allocator>::vector(const vector& __v, const allocator_type& __a)
        -: 2843:    : __begin_(nullptr),
        -: 2844:      __size_(0),
        -: 2845:      __cap_alloc_(0, __a)
        -: 2846:{
        -: 2847:    if (__v.size() > 0)
        -: 2848:    {
        -: 2849:        __vallocate(__v.size());
        -: 2850:        __construct_at_end(__v.begin(), __v.end());
        -: 2851:    }
        -: 2852:}
        -: 2853:
        -: 2854:template <class _Allocator>
        -: 2855:vector<bool, _Allocator>&
        -: 2856:vector<bool, _Allocator>::operator=(const vector& __v)
        -: 2857:{
        -: 2858:    if (this != &__v)
        -: 2859:    {
        -: 2860:        __copy_assign_alloc(__v);
        -: 2861:        if (__v.__size_)
        -: 2862:        {
        -: 2863:            if (__v.__size_ > capacity())
        -: 2864:            {
        -: 2865:                __vdeallocate();
        -: 2866:                __vallocate(__v.__size_);
        -: 2867:            }
        -: 2868:            _VSTD::copy(__v.__begin_, __v.__begin_ + __external_cap_to_internal(__v.__size_), __begin_);
        -: 2869:        }
        -: 2870:        __size_ = __v.__size_;
        -: 2871:    }
        -: 2872:    return *this;
        -: 2873:}
        -: 2874:
        -: 2875:#ifndef _LIBCPP_CXX03_LANG
        -: 2876:
        -: 2877:template <class _Allocator>
        -: 2878:inline _LIBCPP_INLINE_VISIBILITY vector<bool, _Allocator>::vector(vector&& __v)
        -: 2879:#if _LIBCPP_STD_VER > 14
        -: 2880:    _NOEXCEPT
        -: 2881:#else
        -: 2882:    _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 2883:#endif
        -: 2884:    : __begin_(__v.__begin_),
        -: 2885:      __size_(__v.__size_),
        -: 2886:      __cap_alloc_(std::move(__v.__cap_alloc_)) {
        -: 2887:    __v.__begin_ = nullptr;
        -: 2888:    __v.__size_ = 0;
        -: 2889:    __v.__cap() = 0;
        -: 2890:}
        -: 2891:
        -: 2892:template <class _Allocator>
        -: 2893:vector<bool, _Allocator>::vector(vector&& __v, const allocator_type& __a)
        -: 2894:    : __begin_(nullptr),
        -: 2895:      __size_(0),
        -: 2896:      __cap_alloc_(0, __a)
        -: 2897:{
        -: 2898:    if (__a == allocator_type(__v.__alloc()))
        -: 2899:    {
        -: 2900:        this->__begin_ = __v.__begin_;
        -: 2901:        this->__size_ = __v.__size_;
        -: 2902:        this->__cap() = __v.__cap();
        -: 2903:        __v.__begin_ = nullptr;
        -: 2904:        __v.__cap() = __v.__size_ = 0;
        -: 2905:    }
        -: 2906:    else if (__v.size() > 0)
        -: 2907:    {
        -: 2908:        __vallocate(__v.size());
        -: 2909:        __construct_at_end(__v.begin(), __v.end());
        -: 2910:    }
        -: 2911:}
        -: 2912:
        -: 2913:template <class _Allocator>
        -: 2914:inline _LIBCPP_INLINE_VISIBILITY
        -: 2915:vector<bool, _Allocator>&
        -: 2916:vector<bool, _Allocator>::operator=(vector&& __v)
        -: 2917:    _NOEXCEPT_((__noexcept_move_assign_container<_Allocator, __alloc_traits>::value))
        -: 2918:{
        -: 2919:    __move_assign(__v, integral_constant<bool,
        -: 2920:          __storage_traits::propagate_on_container_move_assignment::value>());
        -: 2921:    return *this;
        -: 2922:}
        -: 2923:
        -: 2924:template <class _Allocator>
        -: 2925:void
        -: 2926:vector<bool, _Allocator>::__move_assign(vector& __c, false_type)
        -: 2927:{
        -: 2928:    if (__alloc() != __c.__alloc())
        -: 2929:        assign(__c.begin(), __c.end());
        -: 2930:    else
        -: 2931:        __move_assign(__c, true_type());
        -: 2932:}
        -: 2933:
        -: 2934:template <class _Allocator>
        -: 2935:void
        -: 2936:vector<bool, _Allocator>::__move_assign(vector& __c, true_type)
        -: 2937:    _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value)
        -: 2938:{
        -: 2939:    __vdeallocate();
        -: 2940:    __move_assign_alloc(__c);
        -: 2941:    this->__begin_ = __c.__begin_;
        -: 2942:    this->__size_ = __c.__size_;
        -: 2943:    this->__cap() = __c.__cap();
        -: 2944:    __c.__begin_ = nullptr;
        -: 2945:    __c.__cap() = __c.__size_ = 0;
        -: 2946:}
        -: 2947:
        -: 2948:#endif  // !_LIBCPP_CXX03_LANG
        -: 2949:
        -: 2950:template <class _Allocator>
        -: 2951:void
        -: 2952:vector<bool, _Allocator>::assign(size_type __n, const value_type& __x)
        -: 2953:{
        -: 2954:    __size_ = 0;
        -: 2955:    if (__n > 0)
        -: 2956:    {
        -: 2957:        size_type __c = capacity();
        -: 2958:        if (__n <= __c)
        -: 2959:            __size_ = __n;
        -: 2960:        else
        -: 2961:        {
        -: 2962:            vector __v(__alloc());
        -: 2963:            __v.reserve(__recommend(__n));
        -: 2964:            __v.__size_ = __n;
        -: 2965:            swap(__v);
        -: 2966:        }
        -: 2967:        _VSTD::fill_n(begin(), __n, __x);
        -: 2968:    }
        -: 2969:  __invalidate_all_iterators();
        -: 2970:}
        -: 2971:
        -: 2972:template <class _Allocator>
        -: 2973:template <class _InputIterator>
        -: 2974:typename enable_if
        -: 2975:<
        -: 2976:    __is_cpp17_input_iterator<_InputIterator>::value &&
        -: 2977:   !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 2978:   void
        -: 2979:>::type
        -: 2980:vector<bool, _Allocator>::assign(_InputIterator __first, _InputIterator __last)
        -: 2981:{
        -: 2982:    clear();
        -: 2983:    for (; __first != __last; ++__first)
        -: 2984:        push_back(*__first);
        -: 2985:}
        -: 2986:
        -: 2987:template <class _Allocator>
        -: 2988:template <class _ForwardIterator>
        -: 2989:typename enable_if
        -: 2990:<
        -: 2991:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 2992:   void
        -: 2993:>::type
        -: 2994:vector<bool, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last)
        -: 2995:{
        -: 2996:    clear();
        -: 2997:    difference_type __ns = _VSTD::distance(__first, __last);
        -: 2998:    _LIBCPP_ASSERT(__ns >= 0, "invalid range specified");
        -: 2999:    const size_t __n = static_cast<size_type>(__ns);
        -: 3000:    if (__n)
        -: 3001:    {
        -: 3002:        if (__n > capacity())
        -: 3003:        {
        -: 3004:            __vdeallocate();
        -: 3005:            __vallocate(__n);
        -: 3006:        }
        -: 3007:        __construct_at_end(__first, __last);
        -: 3008:    }
        -: 3009:}
        -: 3010:
        -: 3011:template <class _Allocator>
        -: 3012:void
        -: 3013:vector<bool, _Allocator>::reserve(size_type __n)
        -: 3014:{
        -: 3015:    if (__n > capacity())
        -: 3016:    {
        -: 3017:        vector __v(this->__alloc());
        -: 3018:        __v.__vallocate(__n);
        -: 3019:        __v.__construct_at_end(this->begin(), this->end());
        -: 3020:        swap(__v);
        -: 3021:        __invalidate_all_iterators();
        -: 3022:    }
        -: 3023:}
        -: 3024:
        -: 3025:template <class _Allocator>
        -: 3026:void
        -: 3027:vector<bool, _Allocator>::shrink_to_fit() _NOEXCEPT
        -: 3028:{
        -: 3029:    if (__external_cap_to_internal(size()) > __cap())
        -: 3030:    {
        -: 3031:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3032:        try
        -: 3033:        {
        -: 3034:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3035:            vector(*this, allocator_type(__alloc())).swap(*this);
        -: 3036:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3037:        }
        -: 3038:        catch (...)
        -: 3039:        {
        -: 3040:        }
        -: 3041:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3042:    }
        -: 3043:}
        -: 3044:
        -: 3045:template <class _Allocator>
        -: 3046:typename vector<bool, _Allocator>::reference
        -: 3047:vector<bool, _Allocator>::at(size_type __n)
        -: 3048:{
        -: 3049:    if (__n >= size())
        -: 3050:        this->__throw_out_of_range();
        -: 3051:    return (*this)[__n];
        -: 3052:}
        -: 3053:
        -: 3054:template <class _Allocator>
        -: 3055:typename vector<bool, _Allocator>::const_reference
        -: 3056:vector<bool, _Allocator>::at(size_type __n) const
        -: 3057:{
        -: 3058:    if (__n >= size())
        -: 3059:        this->__throw_out_of_range();
        -: 3060:    return (*this)[__n];
        -: 3061:}
        -: 3062:
        -: 3063:template <class _Allocator>
        -: 3064:void
        -: 3065:vector<bool, _Allocator>::push_back(const value_type& __x)
        -: 3066:{
        -: 3067:    if (this->__size_ == this->capacity())
        -: 3068:        reserve(__recommend(this->__size_ + 1));
        -: 3069:    ++this->__size_;
        -: 3070:    back() = __x;
        -: 3071:}
        -: 3072:
        -: 3073:template <class _Allocator>
        -: 3074:typename vector<bool, _Allocator>::iterator
        -: 3075:vector<bool, _Allocator>::insert(const_iterator __position, const value_type& __x)
        -: 3076:{
        -: 3077:    iterator __r;
        -: 3078:    if (size() < capacity())
        -: 3079:    {
        -: 3080:        const_iterator __old_end = end();
        -: 3081:        ++__size_;
        -: 3082:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3083:        __r = __const_iterator_cast(__position);
        -: 3084:    }
        -: 3085:    else
        -: 3086:    {
        -: 3087:        vector __v(__alloc());
        -: 3088:        __v.reserve(__recommend(__size_ + 1));
        -: 3089:        __v.__size_ = __size_ + 1;
        -: 3090:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3091:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3092:        swap(__v);
        -: 3093:    }
        -: 3094:    *__r = __x;
        -: 3095:    return __r;
        -: 3096:}
        -: 3097:
        -: 3098:template <class _Allocator>
        -: 3099:typename vector<bool, _Allocator>::iterator
        -: 3100:vector<bool, _Allocator>::insert(const_iterator __position, size_type __n, const value_type& __x)
        -: 3101:{
        -: 3102:    iterator __r;
        -: 3103:    size_type __c = capacity();
        -: 3104:    if (__n <= __c && size() <= __c - __n)
        -: 3105:    {
        -: 3106:        const_iterator __old_end = end();
        -: 3107:        __size_ += __n;
        -: 3108:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3109:        __r = __const_iterator_cast(__position);
        -: 3110:    }
        -: 3111:    else
        -: 3112:    {
        -: 3113:        vector __v(__alloc());
        -: 3114:        __v.reserve(__recommend(__size_ + __n));
        -: 3115:        __v.__size_ = __size_ + __n;
        -: 3116:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3117:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3118:        swap(__v);
        -: 3119:    }
        -: 3120:    _VSTD::fill_n(__r, __n, __x);
        -: 3121:    return __r;
        -: 3122:}
        -: 3123:
        -: 3124:template <class _Allocator>
        -: 3125:template <class _InputIterator>
        -: 3126:typename enable_if
        -: 3127:<
        -: 3128:     __is_cpp17_input_iterator  <_InputIterator>::value &&
        -: 3129:    !__is_cpp17_forward_iterator<_InputIterator>::value,
        -: 3130:    typename vector<bool, _Allocator>::iterator
        -: 3131:>::type
        -: 3132:vector<bool, _Allocator>::insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
        -: 3133:{
        -: 3134:    difference_type __off = __position - begin();
        -: 3135:    iterator __p = __const_iterator_cast(__position);
        -: 3136:    iterator __old_end = end();
        -: 3137:    for (; size() != capacity() && __first != __last; ++__first)
        -: 3138:    {
        -: 3139:        ++this->__size_;
        -: 3140:        back() = *__first;
        -: 3141:    }
        -: 3142:    vector __v(__alloc());
        -: 3143:    if (__first != __last)
        -: 3144:    {
        -: 3145:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3146:        try
        -: 3147:        {
        -: 3148:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3149:            __v.assign(__first, __last);
        -: 3150:            difference_type __old_size = static_cast<difference_type>(__old_end - begin());
        -: 3151:            difference_type __old_p = __p - begin();
        -: 3152:            reserve(__recommend(size() + __v.size()));
        -: 3153:            __p = begin() + __old_p;
        -: 3154:            __old_end = begin() + __old_size;
        -: 3155:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3156:        }
        -: 3157:        catch (...)
        -: 3158:        {
        -: 3159:            erase(__old_end, end());
        -: 3160:            throw;
        -: 3161:        }
        -: 3162:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3163:    }
        -: 3164:    __p = _VSTD::rotate(__p, __old_end, end());
        -: 3165:    insert(__p, __v.begin(), __v.end());
        -: 3166:    return begin() + __off;
        -: 3167:}
        -: 3168:
        -: 3169:template <class _Allocator>
        -: 3170:template <class _ForwardIterator>
        -: 3171:typename enable_if
        -: 3172:<
        -: 3173:    __is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 3174:    typename vector<bool, _Allocator>::iterator
        -: 3175:>::type
        -: 3176:vector<bool, _Allocator>::insert(const_iterator __position, _ForwardIterator __first, _ForwardIterator __last)
        -: 3177:{
        -: 3178:    const difference_type __n_signed = _VSTD::distance(__first, __last);
        -: 3179:    _LIBCPP_ASSERT(__n_signed >= 0, "invalid range specified");
        -: 3180:    const size_type __n = static_cast<size_type>(__n_signed);
        -: 3181:    iterator __r;
        -: 3182:    size_type __c = capacity();
        -: 3183:    if (__n <= __c && size() <= __c - __n)
        -: 3184:    {
        -: 3185:        const_iterator __old_end = end();
        -: 3186:        __size_ += __n;
        -: 3187:        _VSTD::copy_backward(__position, __old_end, end());
        -: 3188:        __r = __const_iterator_cast(__position);
        -: 3189:    }
        -: 3190:    else
        -: 3191:    {
        -: 3192:        vector __v(__alloc());
        -: 3193:        __v.reserve(__recommend(__size_ + __n));
        -: 3194:        __v.__size_ = __size_ + __n;
        -: 3195:        __r = _VSTD::copy(cbegin(), __position, __v.begin());
        -: 3196:        _VSTD::copy_backward(__position, cend(), __v.end());
        -: 3197:        swap(__v);
        -: 3198:    }
        -: 3199:    _VSTD::copy(__first, __last, __r);
        -: 3200:    return __r;
        -: 3201:}
        -: 3202:
        -: 3203:template <class _Allocator>
        -: 3204:inline _LIBCPP_INLINE_VISIBILITY
        -: 3205:typename vector<bool, _Allocator>::iterator
        -: 3206:vector<bool, _Allocator>::erase(const_iterator __position)
        -: 3207:{
        -: 3208:    iterator __r = __const_iterator_cast(__position);
        -: 3209:    _VSTD::copy(__position + 1, this->cend(), __r);
        -: 3210:    --__size_;
        -: 3211:    return __r;
        -: 3212:}
        -: 3213:
        -: 3214:template <class _Allocator>
        -: 3215:typename vector<bool, _Allocator>::iterator
        -: 3216:vector<bool, _Allocator>::erase(const_iterator __first, const_iterator __last)
        -: 3217:{
        -: 3218:    iterator __r = __const_iterator_cast(__first);
        -: 3219:    difference_type __d = __last - __first;
        -: 3220:    _VSTD::copy(__last, this->cend(), __r);
        -: 3221:    __size_ -= __d;
        -: 3222:    return __r;
        -: 3223:}
        -: 3224:
        -: 3225:template <class _Allocator>
        -: 3226:void
        -: 3227:vector<bool, _Allocator>::swap(vector& __x)
        -: 3228:#if _LIBCPP_STD_VER >= 14
        -: 3229:    _NOEXCEPT
        -: 3230:#else
        -: 3231:    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value ||
        -: 3232:                __is_nothrow_swappable<allocator_type>::value)
        -: 3233:#endif
        -: 3234:{
        -: 3235:    _VSTD::swap(this->__begin_, __x.__begin_);
        -: 3236:    _VSTD::swap(this->__size_, __x.__size_);
        -: 3237:    _VSTD::swap(this->__cap(), __x.__cap());
        -: 3238:    __swap_allocator(this->__alloc(), __x.__alloc(),
        -: 3239:        integral_constant<bool, __alloc_traits::propagate_on_container_swap::value>());
        -: 3240:}
        -: 3241:
        -: 3242:template <class _Allocator>
        -: 3243:void
        -: 3244:vector<bool, _Allocator>::resize(size_type __sz, value_type __x)
        -: 3245:{
        -: 3246:    size_type __cs = size();
        -: 3247:    if (__cs < __sz)
        -: 3248:    {
        -: 3249:        iterator __r;
        -: 3250:        size_type __c = capacity();
        -: 3251:        size_type __n = __sz - __cs;
        -: 3252:        if (__n <= __c && __cs <= __c - __n)
        -: 3253:        {
        -: 3254:            __r = end();
        -: 3255:            __size_ += __n;
        -: 3256:        }
        -: 3257:        else
        -: 3258:        {
        -: 3259:            vector __v(__alloc());
        -: 3260:            __v.reserve(__recommend(__size_ + __n));
        -: 3261:            __v.__size_ = __size_ + __n;
        -: 3262:            __r = _VSTD::copy(cbegin(), cend(), __v.begin());
        -: 3263:            swap(__v);
        -: 3264:        }
        -: 3265:        _VSTD::fill_n(__r, __n, __x);
        -: 3266:    }
        -: 3267:    else
        -: 3268:        __size_ = __sz;
        -: 3269:}
        -: 3270:
        -: 3271:template <class _Allocator>
        -: 3272:void
        -: 3273:vector<bool, _Allocator>::flip() _NOEXCEPT
        -: 3274:{
        -: 3275:    // do middle whole words
        -: 3276:    size_type __n = __size_;
        -: 3277:    __storage_pointer __p = __begin_;
        -: 3278:    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
        -: 3279:        *__p = ~*__p;
        -: 3280:    // do last partial word
        -: 3281:    if (__n > 0)
        -: 3282:    {
        -: 3283:        __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
        -: 3284:        __storage_type __b = *__p & __m;
        -: 3285:        *__p &= ~__m;
        -: 3286:        *__p |= ~__b & __m;
        -: 3287:    }
        -: 3288:}
        -: 3289:
        -: 3290:template <class _Allocator>
        -: 3291:bool
        -: 3292:vector<bool, _Allocator>::__invariants() const
        -: 3293:{
        -: 3294:    if (this->__begin_ == nullptr)
        -: 3295:    {
        -: 3296:        if (this->__size_ != 0 || this->__cap() != 0)
        -: 3297:            return false;
        -: 3298:    }
        -: 3299:    else
        -: 3300:    {
        -: 3301:        if (this->__cap() == 0)
        -: 3302:            return false;
        -: 3303:        if (this->__size_ > this->capacity())
        -: 3304:            return false;
        -: 3305:    }
        -: 3306:    return true;
        -: 3307:}
        -: 3308:
        -: 3309:template <class _Allocator>
        -: 3310:size_t
        -: 3311:vector<bool, _Allocator>::__hash_code() const _NOEXCEPT
        -: 3312:{
        -: 3313:    size_t __h = 0;
        -: 3314:    // do middle whole words
        -: 3315:    size_type __n = __size_;
        -: 3316:    __storage_pointer __p = __begin_;
        -: 3317:    for (; __n >= __bits_per_word; ++__p, __n -= __bits_per_word)
        -: 3318:        __h ^= *__p;
        -: 3319:    // do last partial word
        -: 3320:    if (__n > 0)
        -: 3321:    {
        -: 3322:        const __storage_type __m = ~__storage_type(0) >> (__bits_per_word - __n);
        -: 3323:        __h ^= *__p & __m;
        -: 3324:    }
        -: 3325:    return __h;
        -: 3326:}
        -: 3327:
        -: 3328:template <class _Allocator>
        -: 3329:struct _LIBCPP_TEMPLATE_VIS hash<vector<bool, _Allocator> >
        -: 3330:    : public unary_function<vector<bool, _Allocator>, size_t>
        -: 3331:{
        -: 3332:    _LIBCPP_INLINE_VISIBILITY
        -: 3333:    size_t operator()(const vector<bool, _Allocator>& __vec) const _NOEXCEPT
        -: 3334:        {return __vec.__hash_code();}
        -: 3335:};
        -: 3336:
        -: 3337:template <class _Tp, class _Allocator>
        -: 3338:inline _LIBCPP_INLINE_VISIBILITY
        -: 3339:bool
        -: 3340:operator==(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3341:{
        -: 3342:    const typename vector<_Tp, _Allocator>::size_type __sz = __x.size();
        -: 3343:    return __sz == __y.size() && _VSTD::equal(__x.begin(), __x.end(), __y.begin());
        -: 3344:}
        -: 3345:
        -: 3346:template <class _Tp, class _Allocator>
        -: 3347:inline _LIBCPP_INLINE_VISIBILITY
        -: 3348:bool
        -: 3349:operator!=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3350:{
        -: 3351:    return !(__x == __y);
        -: 3352:}
        -: 3353:
        -: 3354:template <class _Tp, class _Allocator>
        -: 3355:inline _LIBCPP_INLINE_VISIBILITY
        -: 3356:bool
        -: 3357:operator< (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3358:{
        -: 3359:    return _VSTD::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
        -: 3360:}
        -: 3361:
        -: 3362:template <class _Tp, class _Allocator>
        -: 3363:inline _LIBCPP_INLINE_VISIBILITY
        -: 3364:bool
        -: 3365:operator> (const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3366:{
        -: 3367:    return __y < __x;
        -: 3368:}
        -: 3369:
        -: 3370:template <class _Tp, class _Allocator>
        -: 3371:inline _LIBCPP_INLINE_VISIBILITY
        -: 3372:bool
        -: 3373:operator>=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3374:{
        -: 3375:    return !(__x < __y);
        -: 3376:}
        -: 3377:
        -: 3378:template <class _Tp, class _Allocator>
        -: 3379:inline _LIBCPP_INLINE_VISIBILITY
        -: 3380:bool
        -: 3381:operator<=(const vector<_Tp, _Allocator>& __x, const vector<_Tp, _Allocator>& __y)
        -: 3382:{
        -: 3383:    return !(__y < __x);
        -: 3384:}
        -: 3385:
        -: 3386:template <class _Tp, class _Allocator>
        -: 3387:inline _LIBCPP_INLINE_VISIBILITY
        -: 3388:void
        -: 3389:swap(vector<_Tp, _Allocator>& __x, vector<_Tp, _Allocator>& __y)
        -: 3390:    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))
        -: 3391:{
        -: 3392:    __x.swap(__y);
        -: 3393:}
        -: 3394:
        -: 3395:#if _LIBCPP_STD_VER > 17
        -: 3396:template <class _Tp, class _Allocator, class _Up>
        -: 3397:inline _LIBCPP_INLINE_VISIBILITY typename vector<_Tp, _Allocator>::size_type
        -: 3398:erase(vector<_Tp, _Allocator>& __c, const _Up& __v) {
        -: 3399:  auto __old_size = __c.size();
        -: 3400:  __c.erase(_VSTD::remove(__c.begin(), __c.end(), __v), __c.end());
        -: 3401:  return __old_size - __c.size();
        -: 3402:}
        -: 3403:
        -: 3404:template <class _Tp, class _Allocator, class _Predicate>
        -: 3405:inline _LIBCPP_INLINE_VISIBILITY typename vector<_Tp, _Allocator>::size_type
        -: 3406:erase_if(vector<_Tp, _Allocator>& __c, _Predicate __pred) {
        -: 3407:  auto __old_size = __c.size();
        -: 3408:  __c.erase(_VSTD::remove_if(__c.begin(), __c.end(), __pred), __c.end());
        -: 3409:  return __old_size - __c.size();
        -: 3410:}
        -: 3411:#endif
        -: 3412:
        -: 3413:_LIBCPP_END_NAMESPACE_STD
        -: 3414:
        -: 3415:_LIBCPP_POP_MACROS
        -: 3416:
        -: 3417:#endif  // _LIBCPP_VECTOR
