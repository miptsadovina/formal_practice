        -:    0:Source:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/tests/Earley_tests.cpp
        -:    0:Graph:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/CMakeFiles/unit_tests.dir/tests/Earley_tests.cpp.gcno
        -:    0:Data:/Users/sadovinama/CLionProjects/formal_practice/CYK_and_Earley/cmake-build-debug/CMakeFiles/unit_tests.dir/tests/Earley_tests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:#include "../src/Earley.h"
        -:    3:
function __cxx_global_var_init called 1 returned 0% blocks executed 60%
function _ZN23Earley_tests_test1_Test8TestBodyEv called 1 returned 0% blocks executed 44%
function _ZN23Earley_tests_test1_TestD1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test1_TestD0Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test1_TestC1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test1_TestC2Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test1_TestD2Ev called 1 returned 100% blocks executed 100%
        7:    4:TEST(Earley_tests, test1) {
        1:    4-block  0
        1:    4-block  1
branch  0 taken 1
branch  1 taken 0
        1:    4-block  2
branch  2 taken 1
branch  3 taken 0
        1:    4-block  3
branch  4 taken 1
branch  5 taken 0
        1:    4-block  4
branch  6 taken 1
branch  7 taken 0
        1:    4-block  5
branch  8 taken 1
branch  9 taken 0
        1:    4-block  6
branch 10 taken 1
branch 11 taken 0
        1:    4-block  7
branch 12 taken 1
branch 13 taken 0
        1:    4-block  8
    $$$$$:    4-block  9
    $$$$$:    4-block 10
    $$$$$:    4-block 11
    $$$$$:    4-block 12
    $$$$$:    4-block 13
    $$$$$:    4-block 14
        1:    4-block 15
        1:    4-block 16
        1:    4-block 17
        1:    4-block 18
        1:    4-block 19
        1:    4-block 20
        1:    4-block 21
        1:    4-block 22
        1:    4-block 23
        1:    4-block 24
        1:    4-block 25
        1:    5:    testing::internal::CaptureStdout();
        1:    6:    int start = 'S';
        1:    7:    std::map<int, std::set<std::vector<int>>> rules;
        1:    8:    rules['S'] = {{'a', 'F', 'b', 'F'}};
        1:    8-block  0
branch  0 taken 1
branch  1 taken 0
        1:    8-block  1
branch  2 taken 1
branch  3 taken 0
        1:    8-block  2
branch  4 taken 1
branch  5 taken 0
        1:    8-block  3
        1:    8-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:    8-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:    8-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:    8-block  7
    $$$$$:    8-block  8
    $$$$$:    8-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:    8-block 10
        3:    9:    rules['F'] = {{'a', 'F', 'b'}, {1}, {'G', 'a'}};
        1:    9-block  0
branch  0 taken 1
branch  1 taken 0
        1:    9-block  1
branch  2 taken 1
branch  3 taken 0
        1:    9-block  2
branch  4 taken 1
branch  5 taken 0
        1:    9-block  3
branch  6 taken 1
branch  7 taken 0
        1:    9-block  4
branch  8 taken 1
branch  9 taken 0
        1:    9-block  5
        3:    9-block  6
branch 10 taken 1
branch 11 taken 2
    $$$$$:    9-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:    9-block  8
branch 14 never executed
branch 15 never executed
    $$$$$:    9-block  9
    $$$$$:    9-block 10
    $$$$$:    9-block 11
branch 16 never executed
branch 17 never executed
    $$$$$:    9-block 12
        1:   10:    rules['G'] = {{'b', 'S', 'G'}};
        1:   10-block  0
branch  0 taken 1
branch  1 taken 0
        1:   10-block  1
branch  2 taken 1
branch  3 taken 0
        1:   10-block  2
branch  4 taken 1
branch  5 taken 0
        1:   10-block  3
        1:   10-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   10-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   10-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   10-block  7
    $$$$$:   10-block  8
    $$$$$:   10-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   10-block 10
        1:   11:    std::set<int> alpabet = {'a', 'b', 1};
        1:   11-block  0
branch  0 taken 1
branch  1 taken 0
        1:   12:    std::set<int> nonterminals = {'S', 'F', 'G'};
        1:   12-block  0
branch  0 taken 1
branch  1 taken 0
        1:   13:    Grammar grammar(start, rules, alpabet, nonterminals);
        1:   13-block  0
branch  0 taken 1
branch  1 taken 0
        1:   13-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   13-block  2
        1:   14:    Parser parser(grammar, "abaabb");
        1:   14-block  0
branch  0 taken 1
branch  1 taken 0
        1:   14-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   14-block  2
        1:   15:    parser.Earley();
        1:   15-block  0
branch  0 taken 1
branch  1 taken 0
        1:   16:    std::string output = testing::internal::GetCapturedStdout();
        1:   16-block  0
branch  0 taken 1
branch  1 taken 0
        1:   17:    ASSERT_EQ("1", output);
        1:   17-block  0
branch  0 taken 1
branch  1 taken 0
        1:   17-block  1
branch  2 taken 1
branch  3 taken 0
        1:   17-block  2
branch  4 taken 1
branch  5 taken 0
        1:   17-block  3
    $$$$$:   17-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   17-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   17-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   17-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   17-block  8
    $$$$$:   17-block  9
    $$$$$:   17-block 10
        1:   17-block 11
        1:   17-block 12
branch 14 taken 0
branch 15 taken 1
    $$$$$:   17-block 13
        1:   18:}
    $$$$$:   18-block  0
    $$$$$:   18-block  1
    $$$$$:   18-block  2
    $$$$$:   18-block  3
    $$$$$:   18-block  4
    $$$$$:   18-block  5
    $$$$$:   18-block  6
    $$$$$:   18-block  7
        1:   18-block  8
        1:   18-block  9
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
        1:   18-block 10
    $$$$$:   18-block 11
    $$$$$:   18-block 12
    $$$$$:   18-block 13
    $$$$$:   18-block 14
    $$$$$:   18-block 15
    $$$$$:   18-block 16
    $$$$$:   18-block 17
        -:   19:
function __cxx_global_var_init.7 called 1 returned 0% blocks executed 60%
function _ZN23Earley_tests_test2_Test8TestBodyEv called 1 returned 0% blocks executed 44%
function _ZN23Earley_tests_test2_TestD1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test2_TestD0Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test2_TestC1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test2_TestC2Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test2_TestD2Ev called 1 returned 100% blocks executed 100%
        7:   20:TEST(Earley_tests, test2) {
        1:   20-block  0
        1:   20-block  1
branch  0 taken 1
branch  1 taken 0
        1:   20-block  2
branch  2 taken 1
branch  3 taken 0
        1:   20-block  3
branch  4 taken 1
branch  5 taken 0
        1:   20-block  4
branch  6 taken 1
branch  7 taken 0
        1:   20-block  5
branch  8 taken 1
branch  9 taken 0
        1:   20-block  6
branch 10 taken 1
branch 11 taken 0
        1:   20-block  7
branch 12 taken 1
branch 13 taken 0
        1:   20-block  8
    $$$$$:   20-block  9
    $$$$$:   20-block 10
    $$$$$:   20-block 11
    $$$$$:   20-block 12
    $$$$$:   20-block 13
    $$$$$:   20-block 14
        1:   20-block 15
        1:   20-block 16
        1:   20-block 17
        1:   20-block 18
        1:   20-block 19
        1:   20-block 20
        1:   20-block 21
        1:   20-block 22
        1:   20-block 23
        1:   20-block 24
        1:   20-block 25
        1:   21:    testing::internal::CaptureStdout();
        1:   22:    int start = 'S';
        1:   23:    std::map<int, std::set<std::vector<int>>> rules;
        1:   24:    rules['S'] = {{'a', 'F', 'F'}};
        1:   24-block  0
branch  0 taken 1
branch  1 taken 0
        1:   24-block  1
branch  2 taken 1
branch  3 taken 0
        1:   24-block  2
branch  4 taken 1
branch  5 taken 0
        1:   24-block  3
        1:   24-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   24-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   24-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   24-block 10
        3:   25:    rules['F'] = {{'a', 'F', 'b'}, {1}, {'G', 'b', 'a'}};
        1:   25-block  0
branch  0 taken 1
branch  1 taken 0
        1:   25-block  1
branch  2 taken 1
branch  3 taken 0
        1:   25-block  2
branch  4 taken 1
branch  5 taken 0
        1:   25-block  3
branch  6 taken 1
branch  7 taken 0
        1:   25-block  4
branch  8 taken 1
branch  9 taken 0
        1:   25-block  5
        3:   25-block  6
branch 10 taken 1
branch 11 taken 2
    $$$$$:   25-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   25-block  8
branch 14 never executed
branch 15 never executed
    $$$$$:   25-block  9
    $$$$$:   25-block 10
    $$$$$:   25-block 11
branch 16 never executed
branch 17 never executed
    $$$$$:   25-block 12
        1:   26:    rules['G'] = {{'b', 'S', 'a', 'G'}};
        1:   26-block  0
branch  0 taken 1
branch  1 taken 0
        1:   26-block  1
branch  2 taken 1
branch  3 taken 0
        1:   26-block  2
branch  4 taken 1
branch  5 taken 0
        1:   26-block  3
        1:   26-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   26-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   26-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   26-block  7
    $$$$$:   26-block  8
    $$$$$:   26-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   26-block 10
        1:   27:    std::set<int> alpabet = {'a', 'b', 1};
        1:   27-block  0
branch  0 taken 1
branch  1 taken 0
        1:   28:    std::set<int> nonterminals = {'S', 'F', 'G'};
        1:   28-block  0
branch  0 taken 1
branch  1 taken 0
        1:   29:    Grammar grammar(start, rules, alpabet, nonterminals);
        1:   29-block  0
branch  0 taken 1
branch  1 taken 0
        1:   29-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   29-block  2
        1:   30:    Parser parser(grammar, "aabab");
        1:   30-block  0
branch  0 taken 1
branch  1 taken 0
        1:   30-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   30-block  2
        1:   31:    parser.Earley();
        1:   31-block  0
branch  0 taken 1
branch  1 taken 0
        1:   32:    std::string output = testing::internal::GetCapturedStdout();
        1:   32-block  0
branch  0 taken 1
branch  1 taken 0
        1:   33:    ASSERT_EQ("1", output);
        1:   33-block  0
branch  0 taken 1
branch  1 taken 0
        1:   33-block  1
branch  2 taken 1
branch  3 taken 0
        1:   33-block  2
branch  4 taken 1
branch  5 taken 0
        1:   33-block  3
    $$$$$:   33-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   33-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   33-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   33-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   33-block  8
    $$$$$:   33-block  9
    $$$$$:   33-block 10
        1:   33-block 11
        1:   33-block 12
branch 14 taken 0
branch 15 taken 1
    $$$$$:   33-block 13
        1:   34:}
    $$$$$:   34-block  0
    $$$$$:   34-block  1
    $$$$$:   34-block  2
    $$$$$:   34-block  3
    $$$$$:   34-block  4
    $$$$$:   34-block  5
    $$$$$:   34-block  6
    $$$$$:   34-block  7
        1:   34-block  8
        1:   34-block  9
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
        1:   34-block 10
    $$$$$:   34-block 11
    $$$$$:   34-block 12
    $$$$$:   34-block 13
    $$$$$:   34-block 14
    $$$$$:   34-block 15
    $$$$$:   34-block 16
    $$$$$:   34-block 17
        -:   35:
function __cxx_global_var_init.10 called 1 returned 0% blocks executed 60%
function _ZN23Earley_tests_test3_Test8TestBodyEv called 1 returned 0% blocks executed 45%
function _ZN23Earley_tests_test3_TestD1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test3_TestD0Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test3_TestC1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test3_TestC2Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test3_TestD2Ev called 1 returned 100% blocks executed 100%
        7:   36:TEST(Earley_tests, test3) {
        1:   36-block  0
        1:   36-block  1
branch  0 taken 1
branch  1 taken 0
        1:   36-block  2
branch  2 taken 1
branch  3 taken 0
        1:   36-block  3
branch  4 taken 1
branch  5 taken 0
        1:   36-block  4
branch  6 taken 1
branch  7 taken 0
        1:   36-block  5
branch  8 taken 1
branch  9 taken 0
        1:   36-block  6
branch 10 taken 1
branch 11 taken 0
        1:   36-block  7
branch 12 taken 1
branch 13 taken 0
        1:   36-block  8
    $$$$$:   36-block  9
    $$$$$:   36-block 10
    $$$$$:   36-block 11
    $$$$$:   36-block 12
    $$$$$:   36-block 13
    $$$$$:   36-block 14
        1:   36-block 15
        1:   36-block 16
        1:   36-block 17
        1:   36-block 18
        1:   36-block 19
        1:   36-block 20
        1:   36-block 21
        1:   36-block 22
        1:   36-block 23
        1:   36-block 24
        1:   36-block 25
        1:   37:    testing::internal::CaptureStdout();
        1:   38:    int start = 'S';
        1:   39:    std::map<int, std::set<std::vector<int>>> rules;
        1:   40:    rules['S'] = {{'a', 'F', 'F'}};
        1:   40-block  0
branch  0 taken 1
branch  1 taken 0
        1:   40-block  1
branch  2 taken 1
branch  3 taken 0
        1:   40-block  2
branch  4 taken 1
branch  5 taken 0
        1:   40-block  3
        1:   40-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   40-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   40-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   40-block  7
    $$$$$:   40-block  8
    $$$$$:   40-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   40-block 10
        3:   41:    rules['F'] = {{'a', 'F', 'b'}, {1}, {'G', 'b', 'a'}};
        1:   41-block  0
branch  0 taken 1
branch  1 taken 0
        1:   41-block  1
branch  2 taken 1
branch  3 taken 0
        1:   41-block  2
branch  4 taken 1
branch  5 taken 0
        1:   41-block  3
branch  6 taken 1
branch  7 taken 0
        1:   41-block  4
branch  8 taken 1
branch  9 taken 0
        1:   41-block  5
        3:   41-block  6
branch 10 taken 1
branch 11 taken 2
    $$$$$:   41-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   41-block  8
branch 14 never executed
branch 15 never executed
    $$$$$:   41-block  9
    $$$$$:   41-block 10
    $$$$$:   41-block 11
branch 16 never executed
branch 17 never executed
    $$$$$:   41-block 12
        1:   42:    rules['G'] = {{'b', 'S', 'a', 'G', 'E'}};
        1:   42-block  0
branch  0 taken 1
branch  1 taken 0
        1:   42-block  1
branch  2 taken 1
branch  3 taken 0
        1:   42-block  2
branch  4 taken 1
branch  5 taken 0
        1:   42-block  3
        1:   42-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   42-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   42-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   42-block  7
    $$$$$:   42-block  8
    $$$$$:   42-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   42-block 10
        3:   43:    rules['E'] = {{'a'}, {'b'}, {1}};
        1:   43-block  0
branch  0 taken 1
branch  1 taken 0
        1:   43-block  1
branch  2 taken 1
branch  3 taken 0
        1:   43-block  2
branch  4 taken 1
branch  5 taken 0
        1:   43-block  3
branch  6 taken 1
branch  7 taken 0
        1:   43-block  4
branch  8 taken 1
branch  9 taken 0
        1:   43-block  5
        3:   43-block  6
branch 10 taken 1
branch 11 taken 2
    $$$$$:   43-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   43-block  8
branch 14 never executed
branch 15 never executed
    $$$$$:   43-block  9
    $$$$$:   43-block 10
    $$$$$:   43-block 11
branch 16 never executed
branch 17 never executed
    $$$$$:   43-block 12
        1:   44:    std::set<int> alpabet = {'a', 'b', 1};
        1:   44-block  0
branch  0 taken 1
branch  1 taken 0
        1:   45:    std::set<int> nonterminals = {'S', 'F', 'G'};
        1:   45-block  0
branch  0 taken 1
branch  1 taken 0
        1:   46:    Grammar grammar(start, rules, alpabet, nonterminals);
        1:   46-block  0
branch  0 taken 1
branch  1 taken 0
        1:   46-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   46-block  2
        1:   47:    Parser parser(grammar, "aabbbaabbab");
        1:   47-block  0
branch  0 taken 1
branch  1 taken 0
        1:   47-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   47-block  2
        1:   48:    parser.Earley();
        1:   48-block  0
branch  0 taken 1
branch  1 taken 0
        1:   49:    std::string output = testing::internal::GetCapturedStdout();
        1:   49-block  0
branch  0 taken 1
branch  1 taken 0
        1:   50:    ASSERT_EQ("0", output);
        1:   50-block  0
branch  0 taken 1
branch  1 taken 0
        1:   50-block  1
branch  2 taken 1
branch  3 taken 0
        1:   50-block  2
branch  4 taken 1
branch  5 taken 0
        1:   50-block  3
    $$$$$:   50-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   50-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   50-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   50-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   50-block  8
    $$$$$:   50-block  9
    $$$$$:   50-block 10
        1:   50-block 11
        1:   50-block 12
branch 14 taken 0
branch 15 taken 1
    $$$$$:   50-block 13
        1:   51:}
    $$$$$:   51-block  0
    $$$$$:   51-block  1
    $$$$$:   51-block  2
    $$$$$:   51-block  3
    $$$$$:   51-block  4
    $$$$$:   51-block  5
    $$$$$:   51-block  6
    $$$$$:   51-block  7
        1:   51-block  8
        1:   51-block  9
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
        1:   51-block 10
    $$$$$:   51-block 11
    $$$$$:   51-block 12
    $$$$$:   51-block 13
    $$$$$:   51-block 14
    $$$$$:   51-block 15
    $$$$$:   51-block 16
    $$$$$:   51-block 17
        -:   52:
function __cxx_global_var_init.15 called 1 returned 0% blocks executed 60%
function _ZN23Earley_tests_test4_Test8TestBodyEv called 1 returned 0% blocks executed 43%
function _ZN23Earley_tests_test4_TestD1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test4_TestD0Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test4_TestC1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test4_TestC2Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test4_TestD2Ev called 1 returned 100% blocks executed 100%
        7:   53:TEST(Earley_tests, test4) {
        1:   53-block  0
        1:   53-block  1
branch  0 taken 1
branch  1 taken 0
        1:   53-block  2
branch  2 taken 1
branch  3 taken 0
        1:   53-block  3
branch  4 taken 1
branch  5 taken 0
        1:   53-block  4
branch  6 taken 1
branch  7 taken 0
        1:   53-block  5
branch  8 taken 1
branch  9 taken 0
        1:   53-block  6
branch 10 taken 1
branch 11 taken 0
        1:   53-block  7
branch 12 taken 1
branch 13 taken 0
        1:   53-block  8
    $$$$$:   53-block  9
    $$$$$:   53-block 10
    $$$$$:   53-block 11
    $$$$$:   53-block 12
    $$$$$:   53-block 13
    $$$$$:   53-block 14
        1:   53-block 15
        1:   53-block 16
        1:   53-block 17
        1:   53-block 18
        1:   53-block 19
        1:   53-block 20
        1:   53-block 21
        1:   53-block 22
        1:   53-block 23
        1:   53-block 24
        1:   53-block 25
        1:   54:    testing::internal::CaptureStdout();
        1:   55:    int start = 'S';
        1:   56:    std::map<int, std::set<std::vector<int>>> rules;
        1:   57:    rules['S'] = {{'a', 'F', 'b', 'F'}};
        1:   57-block  0
branch  0 taken 1
branch  1 taken 0
        1:   57-block  1
branch  2 taken 1
branch  3 taken 0
        1:   57-block  2
branch  4 taken 1
branch  5 taken 0
        1:   57-block  3
        1:   57-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   57-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   57-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   57-block  7
    $$$$$:   57-block  8
    $$$$$:   57-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   57-block 10
        2:   58:    rules['F'] = {{'a', 'F', 'b'}, {'a'}};
        1:   58-block  0
branch  0 taken 1
branch  1 taken 0
        1:   58-block  1
branch  2 taken 1
branch  3 taken 0
        1:   58-block  2
branch  4 taken 1
branch  5 taken 0
        1:   58-block  3
branch  6 taken 1
branch  7 taken 0
        1:   58-block  4
        2:   58-block  5
branch  8 taken 1
branch  9 taken 1
    $$$$$:   58-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   58-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   58-block  8
    $$$$$:   58-block  9
    $$$$$:   58-block 10
branch 14 never executed
branch 15 never executed
    $$$$$:   58-block 11
        1:   59:    std::set<int> alpabet = {'a', 'b', 1};
        1:   59-block  0
branch  0 taken 1
branch  1 taken 0
        1:   60:    std::set<int> nonterminals = {'S', 'F'};
        1:   60-block  0
branch  0 taken 1
branch  1 taken 0
        1:   61:    Grammar grammar(start, rules, alpabet, nonterminals);
        1:   61-block  0
branch  0 taken 1
branch  1 taken 0
        1:   61-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   61-block  2
        1:   62:    Parser parser(grammar, "abaabb");
        1:   62-block  0
branch  0 taken 1
branch  1 taken 0
        1:   62-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   62-block  2
        1:   63:    parser.Earley();
        1:   63-block  0
branch  0 taken 1
branch  1 taken 0
        1:   64:    std::string output = testing::internal::GetCapturedStdout();
        1:   64-block  0
branch  0 taken 1
branch  1 taken 0
        1:   65:    ASSERT_EQ("0", output);
        1:   65-block  0
branch  0 taken 1
branch  1 taken 0
        1:   65-block  1
branch  2 taken 1
branch  3 taken 0
        1:   65-block  2
branch  4 taken 1
branch  5 taken 0
        1:   65-block  3
    $$$$$:   65-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   65-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   65-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   65-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   65-block  8
    $$$$$:   65-block  9
    $$$$$:   65-block 10
        1:   65-block 11
        1:   65-block 12
branch 14 taken 0
branch 15 taken 1
    $$$$$:   65-block 13
        1:   66:}
    $$$$$:   66-block  0
    $$$$$:   66-block  1
    $$$$$:   66-block  2
    $$$$$:   66-block  3
    $$$$$:   66-block  4
    $$$$$:   66-block  5
    $$$$$:   66-block  6
    $$$$$:   66-block  7
        1:   66-block  8
        1:   66-block  9
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
        1:   66-block 10
    $$$$$:   66-block 11
    $$$$$:   66-block 12
    $$$$$:   66-block 13
    $$$$$:   66-block 14
    $$$$$:   66-block 15
    $$$$$:   66-block 16
    $$$$$:   66-block 17
        -:   67:
function __cxx_global_var_init.17 called 1 returned 0% blocks executed 60%
function _ZN23Earley_tests_test5_Test8TestBodyEv called 1 returned 0% blocks executed 44%
function _ZN23Earley_tests_test5_TestD1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test5_TestD0Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test5_TestC1Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test5_TestC2Ev called 1 returned 100% blocks executed 100%
function _ZN23Earley_tests_test5_TestD2Ev called 1 returned 100% blocks executed 100%
        7:   68:TEST(Earley_tests, test5) {
        1:   68-block  0
        1:   68-block  1
branch  0 taken 1
branch  1 taken 0
        1:   68-block  2
branch  2 taken 1
branch  3 taken 0
        1:   68-block  3
branch  4 taken 1
branch  5 taken 0
        1:   68-block  4
branch  6 taken 1
branch  7 taken 0
        1:   68-block  5
branch  8 taken 1
branch  9 taken 0
        1:   68-block  6
branch 10 taken 1
branch 11 taken 0
        1:   68-block  7
branch 12 taken 1
branch 13 taken 0
        1:   68-block  8
    $$$$$:   68-block  9
    $$$$$:   68-block 10
    $$$$$:   68-block 11
    $$$$$:   68-block 12
    $$$$$:   68-block 13
    $$$$$:   68-block 14
        1:   68-block 15
        1:   68-block 16
        1:   68-block 17
        1:   68-block 18
        1:   68-block 19
        1:   68-block 20
        1:   68-block 21
        1:   68-block 22
        1:   68-block 23
        1:   68-block 24
        1:   68-block 25
        1:   69:    testing::internal::CaptureStdout();
        1:   70:    int start = 'S';
        1:   71:    std::map<int, std::set<std::vector<int>>> rules;
        1:   72:    rules['S'] = {{'a', 'F', 'F'}};
        1:   72-block  0
branch  0 taken 1
branch  1 taken 0
        1:   72-block  1
branch  2 taken 1
branch  3 taken 0
        1:   72-block  2
branch  4 taken 1
branch  5 taken 0
        1:   72-block  3
        1:   72-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   72-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   72-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   72-block  7
    $$$$$:   72-block  8
    $$$$$:   72-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   72-block 10
        3:   73:    rules['F'] = {{'a', 'F', 'b'}, {1}, {'G', 'b', 'a'}};
        1:   73-block  0
branch  0 taken 1
branch  1 taken 0
        1:   73-block  1
branch  2 taken 1
branch  3 taken 0
        1:   73-block  2
branch  4 taken 1
branch  5 taken 0
        1:   73-block  3
branch  6 taken 1
branch  7 taken 0
        1:   73-block  4
branch  8 taken 1
branch  9 taken 0
        1:   73-block  5
        3:   73-block  6
branch 10 taken 1
branch 11 taken 2
    $$$$$:   73-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   73-block  8
branch 14 never executed
branch 15 never executed
    $$$$$:   73-block  9
    $$$$$:   73-block 10
    $$$$$:   73-block 11
branch 16 never executed
branch 17 never executed
    $$$$$:   73-block 12
        1:   74:    rules['G'] = {{'b', 'S', 'a', 'G'}};
        1:   74-block  0
branch  0 taken 1
branch  1 taken 0
        1:   74-block  1
branch  2 taken 1
branch  3 taken 0
        1:   74-block  2
branch  4 taken 1
branch  5 taken 0
        1:   74-block  3
        1:   74-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   74-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   74-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   74-block  7
    $$$$$:   74-block  8
    $$$$$:   74-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   74-block 10
        1:   75:    rules['E'] = {{'b', 'S'}};
        1:   75-block  0
branch  0 taken 1
branch  1 taken 0
        1:   75-block  1
branch  2 taken 1
branch  3 taken 0
        1:   75-block  2
branch  4 taken 1
branch  5 taken 0
        1:   75-block  3
        1:   75-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   75-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   75-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   75-block  7
    $$$$$:   75-block  8
    $$$$$:   75-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   75-block 10
        1:   76:    rules['T'] = {{'a', 'G'}};
        1:   76-block  0
branch  0 taken 1
branch  1 taken 0
        1:   76-block  1
branch  2 taken 1
branch  3 taken 0
        1:   76-block  2
branch  4 taken 1
branch  5 taken 0
        1:   76-block  3
        1:   76-block  4
branch  6 taken 1
branch  7 taken 0
    $$$$$:   76-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   76-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   76-block  7
    $$$$$:   76-block  8
    $$$$$:   76-block  9
branch 12 never executed
branch 13 never executed
    $$$$$:   76-block 10
        1:   77:    std::set<int> alpabet = {'a', 'b', 1};
        1:   77-block  0
branch  0 taken 1
branch  1 taken 0
        1:   78:    std::set<int> nonterminals = {'S', 'F', 'G', 'E', 'T'};
        1:   78-block  0
branch  0 taken 1
branch  1 taken 0
        1:   79:    Grammar grammar(start, rules, alpabet, nonterminals);
        1:   79-block  0
branch  0 taken 1
branch  1 taken 0
        1:   79-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   79-block  2
        1:   80:    Parser parser(grammar, "aabbaabbab");
        1:   80-block  0
branch  0 taken 1
branch  1 taken 0
        1:   80-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   80-block  2
        1:   81:    parser.Earley();
        1:   81-block  0
branch  0 taken 1
branch  1 taken 0
        1:   82:    std::string output = testing::internal::GetCapturedStdout();
        1:   82-block  0
branch  0 taken 1
branch  1 taken 0
        1:   83:    ASSERT_EQ("0", output);
        1:   83-block  0
branch  0 taken 1
branch  1 taken 0
        1:   83-block  1
branch  2 taken 1
branch  3 taken 0
        1:   83-block  2
branch  4 taken 1
branch  5 taken 0
        1:   83-block  3
    $$$$$:   83-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   83-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:   83-block  6
branch 10 never executed
branch 11 never executed
    $$$$$:   83-block  7
branch 12 never executed
branch 13 never executed
    $$$$$:   83-block  8
    $$$$$:   83-block  9
    $$$$$:   83-block 10
        1:   83-block 11
        1:   83-block 12
branch 14 taken 0
branch 15 taken 1
    $$$$$:   83-block 13
        1:   84:}
    $$$$$:   84-block  0
    $$$$$:   84-block  1
    $$$$$:   84-block  2
    $$$$$:   84-block  3
    $$$$$:   84-block  4
    $$$$$:   84-block  5
    $$$$$:   84-block  6
    $$$$$:   84-block  7
        1:   84-block  8
        1:   84-block  9
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
        1:   84-block 10
    $$$$$:   84-block 11
    $$$$$:   84-block 12
    $$$$$:   84-block 13
    $$$$$:   84-block 14
    $$$$$:   84-block 15
    $$$$$:   84-block 16
    $$$$$:   84-block 17
